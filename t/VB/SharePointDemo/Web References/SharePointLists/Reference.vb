' *************************************************************
' Copyright (c) 1991-2019 LEAD Technologies, Inc.              
' All Rights Reserved.                                         
' *************************************************************
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
'
Namespace SharePointLists
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ListsSoap", [Namespace]:="http://schemas.microsoft.com/sharepoint/soap/")>  _
    Partial Public Class Lists
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetListCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListAndViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAttachmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAttachmentCollectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAttachmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateListItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListItemChangesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SharePointDemo.Settings.Default.CSSharePointDemo_SharePointLists_Lists
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetListCollectionCompleted As GetListCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteListCompleted As DeleteListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateListCompleted As UpdateListCompletedEventHandler
        
        '''<remarks/>
        Public Event AddListCompleted As AddListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListAndViewCompleted As GetListAndViewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListCompleted As GetListCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAttachmentCompleted As DeleteAttachmentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAttachmentCollectionCompleted As GetAttachmentCollectionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAttachmentCompleted As AddAttachmentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateListItemsCompleted As UpdateListItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListItemChangesCompleted As GetListItemChangesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListItemsCompleted As GetListItemsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListCollection", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListCollection() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListCollection", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListCollectionAsync()
            Me.GetListCollectionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListCollectionAsync(ByVal userState As Object)
            If (Me.GetListCollectionOperationCompleted Is Nothing) Then
                Me.GetListCollectionOperationCompleted = AddressOf Me.OnGetListCollectionOperationCompleted
            End If
            Me.InvokeAsync("GetListCollection", New Object(-1) {}, Me.GetListCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListCollectionCompleted(Me, New GetListCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/DeleteList", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteList(ByVal listName As String)
            Me.Invoke("DeleteList", New Object() {listName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteListAsync(ByVal listName As String)
            Me.DeleteListAsync(listName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteListAsync(ByVal listName As String, ByVal userState As Object)
            If (Me.DeleteListOperationCompleted Is Nothing) Then
                Me.DeleteListOperationCompleted = AddressOf Me.OnDeleteListOperationCompleted
            End If
            Me.InvokeAsync("DeleteList", New Object() {listName}, Me.DeleteListOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteListOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateList", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateList(ByVal listName As String, ByVal listProperties As System.Xml.XmlNode, ByVal newFields As System.Xml.XmlNode, ByVal updateFields As System.Xml.XmlNode, ByVal deleteFields As System.Xml.XmlNode, ByVal listVersion As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateList", New Object() {listName, listProperties, newFields, updateFields, deleteFields, listVersion})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateListAsync(ByVal listName As String, ByVal listProperties As System.Xml.XmlNode, ByVal newFields As System.Xml.XmlNode, ByVal updateFields As System.Xml.XmlNode, ByVal deleteFields As System.Xml.XmlNode, ByVal listVersion As String)
            Me.UpdateListAsync(listName, listProperties, newFields, updateFields, deleteFields, listVersion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateListAsync(ByVal listName As String, ByVal listProperties As System.Xml.XmlNode, ByVal newFields As System.Xml.XmlNode, ByVal updateFields As System.Xml.XmlNode, ByVal deleteFields As System.Xml.XmlNode, ByVal listVersion As String, ByVal userState As Object)
            If (Me.UpdateListOperationCompleted Is Nothing) Then
                Me.UpdateListOperationCompleted = AddressOf Me.OnUpdateListOperationCompleted
            End If
            Me.InvokeAsync("UpdateList", New Object() {listName, listProperties, newFields, updateFields, deleteFields, listVersion}, Me.UpdateListOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateListOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateListCompleted(Me, New UpdateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/AddList", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddList(ByVal listName As String, ByVal description As String, ByVal templateID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddList", New Object() {listName, description, templateID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddListAsync(ByVal listName As String, ByVal description As String, ByVal templateID As Integer)
            Me.AddListAsync(listName, description, templateID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddListAsync(ByVal listName As String, ByVal description As String, ByVal templateID As Integer, ByVal userState As Object)
            If (Me.AddListOperationCompleted Is Nothing) Then
                Me.AddListOperationCompleted = AddressOf Me.OnAddListOperationCompleted
            End If
            Me.InvokeAsync("AddList", New Object() {listName, description, templateID}, Me.AddListOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddListOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddListCompleted(Me, New AddListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListAndView", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListAndView(ByVal listName As String, ByVal viewName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListAndView", New Object() {listName, viewName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListAndViewAsync(ByVal listName As String, ByVal viewName As String)
            Me.GetListAndViewAsync(listName, viewName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListAndViewAsync(ByVal listName As String, ByVal viewName As String, ByVal userState As Object)
            If (Me.GetListAndViewOperationCompleted Is Nothing) Then
                Me.GetListAndViewOperationCompleted = AddressOf Me.OnGetListAndViewOperationCompleted
            End If
            Me.InvokeAsync("GetListAndView", New Object() {listName, viewName}, Me.GetListAndViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListAndViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListAndViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListAndViewCompleted(Me, New GetListAndViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetList", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetList(ByVal listName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetList", New Object() {listName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListAsync(ByVal listName As String)
            Me.GetListAsync(listName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListAsync(ByVal listName As String, ByVal userState As Object)
            If (Me.GetListOperationCompleted Is Nothing) Then
                Me.GetListOperationCompleted = AddressOf Me.OnGetListOperationCompleted
            End If
            Me.InvokeAsync("GetList", New Object() {listName}, Me.GetListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListCompleted(Me, New GetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/DeleteAttachment", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteAttachment(ByVal listName As String, ByVal listItemID As String, ByVal url As String)
            Me.Invoke("DeleteAttachment", New Object() {listName, listItemID, url})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAttachmentAsync(ByVal listName As String, ByVal listItemID As String, ByVal url As String)
            Me.DeleteAttachmentAsync(listName, listItemID, url, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAttachmentAsync(ByVal listName As String, ByVal listItemID As String, ByVal url As String, ByVal userState As Object)
            If (Me.DeleteAttachmentOperationCompleted Is Nothing) Then
                Me.DeleteAttachmentOperationCompleted = AddressOf Me.OnDeleteAttachmentOperationCompleted
            End If
            Me.InvokeAsync("DeleteAttachment", New Object() {listName, listItemID, url}, Me.DeleteAttachmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAttachmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAttachmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAttachmentCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetAttachmentCollection", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAttachmentCollection(ByVal listName As String, ByVal listItemID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetAttachmentCollection", New Object() {listName, listItemID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAttachmentCollectionAsync(ByVal listName As String, ByVal listItemID As String)
            Me.GetAttachmentCollectionAsync(listName, listItemID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAttachmentCollectionAsync(ByVal listName As String, ByVal listItemID As String, ByVal userState As Object)
            If (Me.GetAttachmentCollectionOperationCompleted Is Nothing) Then
                Me.GetAttachmentCollectionOperationCompleted = AddressOf Me.OnGetAttachmentCollectionOperationCompleted
            End If
            Me.InvokeAsync("GetAttachmentCollection", New Object() {listName, listItemID}, Me.GetAttachmentCollectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAttachmentCollectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAttachmentCollectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAttachmentCollectionCompleted(Me, New GetAttachmentCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/AddAttachment", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAttachment(ByVal listName As String, ByVal listItemID As String, ByVal fileName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal attachment() As Byte) As String
            Dim results() As Object = Me.Invoke("AddAttachment", New Object() {listName, listItemID, fileName, attachment})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAttachmentAsync(ByVal listName As String, ByVal listItemID As String, ByVal fileName As String, ByVal attachment() As Byte)
            Me.AddAttachmentAsync(listName, listItemID, fileName, attachment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAttachmentAsync(ByVal listName As String, ByVal listItemID As String, ByVal fileName As String, ByVal attachment() As Byte, ByVal userState As Object)
            If (Me.AddAttachmentOperationCompleted Is Nothing) Then
                Me.AddAttachmentOperationCompleted = AddressOf Me.OnAddAttachmentOperationCompleted
            End If
            Me.InvokeAsync("AddAttachment", New Object() {listName, listItemID, fileName, attachment}, Me.AddAttachmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAttachmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAttachmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAttachmentCompleted(Me, New AddAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/UpdateListItems", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateListItems(ByVal listName As String, ByVal updates As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateListItems", New Object() {listName, updates})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateListItemsAsync(ByVal listName As String, ByVal updates As System.Xml.XmlNode)
            Me.UpdateListItemsAsync(listName, updates, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateListItemsAsync(ByVal listName As String, ByVal updates As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.UpdateListItemsOperationCompleted Is Nothing) Then
                Me.UpdateListItemsOperationCompleted = AddressOf Me.OnUpdateListItemsOperationCompleted
            End If
            Me.InvokeAsync("UpdateListItems", New Object() {listName, updates}, Me.UpdateListItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateListItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateListItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateListItemsCompleted(Me, New UpdateListItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListItemChanges", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListItemChanges(ByVal listName As String, ByVal viewFields As System.Xml.XmlNode, ByVal since As String, ByVal contains As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListItemChanges", New Object() {listName, viewFields, since, contains})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListItemChangesAsync(ByVal listName As String, ByVal viewFields As System.Xml.XmlNode, ByVal since As String, ByVal contains As System.Xml.XmlNode)
            Me.GetListItemChangesAsync(listName, viewFields, since, contains, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListItemChangesAsync(ByVal listName As String, ByVal viewFields As System.Xml.XmlNode, ByVal since As String, ByVal contains As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.GetListItemChangesOperationCompleted Is Nothing) Then
                Me.GetListItemChangesOperationCompleted = AddressOf Me.OnGetListItemChangesOperationCompleted
            End If
            Me.InvokeAsync("GetListItemChanges", New Object() {listName, viewFields, since, contains}, Me.GetListItemChangesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListItemChangesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListItemChangesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListItemChangesCompleted(Me, New GetListItemChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetListItems", RequestNamespace:="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace:="http://schemas.microsoft.com/sharepoint/soap/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListItems(ByVal listName As String, ByVal viewName As String, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal rowLimit As String, ByVal queryOptions As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListItems", New Object() {listName, viewName, query, viewFields, rowLimit, queryOptions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListItemsAsync(ByVal listName As String, ByVal viewName As String, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal rowLimit As String, ByVal queryOptions As System.Xml.XmlNode)
            Me.GetListItemsAsync(listName, viewName, query, viewFields, rowLimit, queryOptions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListItemsAsync(ByVal listName As String, ByVal viewName As String, ByVal query As System.Xml.XmlNode, ByVal viewFields As System.Xml.XmlNode, ByVal rowLimit As String, ByVal queryOptions As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.GetListItemsOperationCompleted Is Nothing) Then
                Me.GetListItemsOperationCompleted = AddressOf Me.OnGetListItemsOperationCompleted
            End If
            Me.InvokeAsync("GetListItems", New Object() {listName, viewName, query, viewFields, rowLimit, queryOptions}, Me.GetListItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListItemsCompleted(Me, New GetListItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetListCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UpdateListCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AddListCompletedEventHandler(ByVal sender As Object, ByVal e As AddListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListAndViewCompletedEventHandler(ByVal sender As Object, ByVal e As GetListAndViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListAndViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListCompletedEventHandler(ByVal sender As Object, ByVal e As GetListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteAttachmentCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetAttachmentCollectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetAttachmentCollectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAttachmentCollectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AddAttachmentCompletedEventHandler(ByVal sender As Object, ByVal e As AddAttachmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAttachmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UpdateListItemsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateListItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateListItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListItemChangesCompletedEventHandler(ByVal sender As Object, ByVal e As GetListItemChangesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListItemChangesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetListItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
