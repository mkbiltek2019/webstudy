'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports Microsoft.VisualBasic
Imports System

''' <summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), Global.System.Xml.Serialization.XmlRootAttribute("StudyBrowserDataSet"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class StudyBrowserDataSet : Inherits Global.System.Data.DataSet

   Private tableSeriesTable As SeriesTableDataTable

   Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Sub New()
      Me.BeginInit()
      Me.InitClass()
      Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
      AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
      AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
      Me.EndInit()
   End Sub

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context, False)
      If (Me.IsBinarySerialized(info, context) = True) Then
         Me.InitVars(False)
         Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
         AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
         AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
         Return
      End If
      Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
      If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
         Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
         ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
         If (Not ds.Tables("SeriesTable") Is Nothing) Then
            MyBase.Tables.Add(New SeriesTableDataTable(ds.Tables("SeriesTable")))
         End If
         Me.DataSetName = ds.DataSetName
         Me.Prefix = ds.Prefix
         Me.Namespace = ds.Namespace
         Me.Locale = ds.Locale
         Me.CaseSensitive = ds.CaseSensitive
         Me.EnforceConstraints = ds.EnforceConstraints
         Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
         Me.InitVars()
      Else
         Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
      End If
      Me.GetSerializationData(info, context)
      Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
      AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
      AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
   End Sub

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
   Public ReadOnly Property SeriesTable() As SeriesTableDataTable
      Get
         Return Me.tableSeriesTable
      End Get
   End Property

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.BrowsableAttribute(True), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
   Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
      Get
         Return Me._schemaSerializationMode
      End Get
      Set(value As Global.System.Data.SchemaSerializationMode)
         Me._schemaSerializationMode = value
      End Set
   End Property

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
   Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
      Get
         Return MyBase.Tables
      End Get
   End Property

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
   Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
      Get
         Return MyBase.Relations
      End Get
   End Property

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Sub InitializeDerivedDataSet()
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
   End Sub

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Overrides Function Clone() As Global.System.Data.DataSet
      Dim cln As StudyBrowserDataSet = (CType(MyBase.Clone(), StudyBrowserDataSet))
      cln.InitVars()
      cln.SchemaSerializationMode = Me.SchemaSerializationMode
      Return cln
   End Function

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Function ShouldSerializeTables() As Boolean
      Return False
   End Function

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Function ShouldSerializeRelations() As Boolean
      Return False
   End Function

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
      If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
         Me.Reset()
         Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
         ds.ReadXml(reader)
         If (Not ds.Tables("SeriesTable") Is Nothing) Then
            MyBase.Tables.Add(New SeriesTableDataTable(ds.Tables("SeriesTable")))
         End If
         Me.DataSetName = ds.DataSetName
         Me.Prefix = ds.Prefix
         Me.Namespace = ds.Namespace
         Me.Locale = ds.Locale
         Me.CaseSensitive = ds.CaseSensitive
         Me.EnforceConstraints = ds.EnforceConstraints
         Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
         Me.InitVars()
      Else
         Me.ReadXml(reader)
         Me.InitVars()
      End If
   End Sub

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
      Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
      Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
      stream.Position = 0
      Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
   End Function

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Friend Sub InitVars()
      Me.InitVars(True)
   End Sub

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Friend Sub InitVars(ByVal initTable As Boolean)
      Me.tableSeriesTable = (CType(MyBase.Tables("SeriesTable"), SeriesTableDataTable))
      If (initTable = True) Then
         If (Not Me.tableSeriesTable Is Nothing) Then
            Me.tableSeriesTable.InitVars()
         End If
      End If
   End Sub

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Private Sub InitClass()
      Me.DataSetName = "StudyBrowserDataSet"
      Me.Prefix = ""
      Me.Namespace = "http://tempuri.org/StudyBrowserDataSet.xsd"
      Me.EnforceConstraints = True
      Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
      Me.tableSeriesTable = New SeriesTableDataTable()
      MyBase.Tables.Add(Me.tableSeriesTable)
   End Sub

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Private Function ShouldSerializeSeriesTable() As Boolean
      Return False
   End Function

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
      If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
         Me.InitVars()
      End If
   End Sub

   <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
   Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
      Dim ds As StudyBrowserDataSet = New StudyBrowserDataSet()
      Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
      Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
      Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any.Namespace = ds.Namespace
      sequence.Items.Add(any)
      type.Particle = sequence
      Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
      If xs.Contains(dsSchema.TargetNamespace) Then
         Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
         Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
         Try
            Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
            dsSchema.Write(s1)
            Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
            Do While schemas.MoveNext()
               schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
               s2.SetLength(0)
               schema.Write(s2)
               If (s1.Length = s2.Length) Then
                  s1.Position = 0
                  s2.Position = 0
                  Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                  Loop
                  If (s1.Position = s1.Length) Then
                     Return type
                  End If
               End If
            Loop
         Finally
            If (Not s1 Is Nothing) Then
               s1.Close()
            End If
            If (Not s2 Is Nothing) Then
               s2.Close()
            End If
         End Try
      End If
      xs.Add(dsSchema)
      Return type
   End Function

   Public Delegate Sub SeriesTableRowChangeEventHandler(ByVal sender As Object, ByVal e As SeriesTableRowChangeEvent)

   ''' <summary>
   '''Represents the strongly named DataTable class.
   '''</summary>
   <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
   Partial Public Class SeriesTableDataTable : Inherits Global.System.Data.DataTable ' : Implements Global.System.Collections.IEnumerable

      Private columnSeries_Date As Global.System.Data.DataColumn

      Private columnSeriesNumber As Global.System.Data.DataColumn

      Private columnModality As Global.System.Data.DataColumn

      Private columnOrgan As Global.System.Data.DataColumn

      Private columnSeries_Description As Global.System.Data.DataColumn

      Private columnNumber_of_Instances As Global.System.Data.DataColumn

      Private columnSeriesInstanceUID As Global.System.Data.DataColumn

      Private columnStudyInstanceUID As Global.System.Data.DataColumn

      Private columnFrameCount As Global.System.Data.DataColumn

      Private columnThumbnail As Global.System.Data.DataColumn

      Private columnStudyID As Global.System.Data.DataColumn

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub New()
         Me.TableName = "SeriesTable"
         Me.BeginInit()
         Me.InitClass()
         Me.EndInit()
      End Sub

      'Implements Global.System.Collections.IEnumerable.GetEnumerator

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Friend Sub New(ByVal table As Global.System.Data.DataTable)
         Me.TableName = table.TableName
         If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
         End If
         If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
            Me.Locale = table.Locale
         End If
         If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
         End If
         Me.Prefix = table.Prefix
         Me.MinimumCapacity = table.MinimumCapacity
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
         MyBase.New(info, context)
         Me.InitVars()
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property Series_DateColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnSeries_Date
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property SeriesNumberColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnSeriesNumber
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property ModalityColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnModality
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property OrganColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnOrgan
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property Series_DescriptionColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnSeries_Description
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property Number_of_InstancesColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnNumber_of_Instances
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property SeriesInstanceUIDColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnSeriesInstanceUID
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property StudyInstanceUIDColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnStudyInstanceUID
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property FrameCountColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnFrameCount
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property ThumbnailColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnThumbnail
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property StudyIDColumn() As Global.System.Data.DataColumn
         Get
            Return Me.columnStudyID
         End Get
      End Property



      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
      Public ReadOnly Property Count() As Integer
         Get
            Return Me.Rows.Count
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Default Public ReadOnly Property Item(ByVal index As Integer) As SeriesTableRow
         Get
            Return (CType(Me.Rows(index), SeriesTableRow))
         End Get
      End Property

      Public Event SeriesTableRowChanging As SeriesTableRowChangeEventHandler

      Public Event SeriesTableRowChanged As SeriesTableRowChangeEventHandler

      Public Event SeriesTableRowDeleting As SeriesTableRowChangeEventHandler

      Public Event SeriesTableRowDeleted As SeriesTableRowChangeEventHandler

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub AddSeriesTableRow(ByVal row As SeriesTableRow)
         Me.Rows.Add(row)
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function AddSeriesTableRow(ByVal Series_Date As String, ByVal SeriesNumber As String, ByVal Modality As String, ByVal Organ As String, ByVal Series_Description As String, ByVal Number_of_Instances As String, ByVal SeriesInstanceUID As String, ByVal StudyInstanceUID As String, ByVal FrameCount As String, ByVal Thumbnail As System.Drawing.Image, ByVal StudyID As String) As SeriesTableRow
         Dim rowSeriesTableRow As SeriesTableRow = (CType(Me.NewRow(), SeriesTableRow))
         Dim columnValuesArray As Object() = New Object() {Series_Date, SeriesNumber, Modality, Organ, Series_Description, Number_of_Instances, SeriesInstanceUID, StudyInstanceUID, FrameCount, Thumbnail, StudyID}
         rowSeriesTableRow.ItemArray = columnValuesArray
         Me.Rows.Add(rowSeriesTableRow)
         Return rowSeriesTableRow
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator
         Return Me.Rows.GetEnumerator()
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Overrides Function Clone() As Global.System.Data.DataTable
         Dim cln As SeriesTableDataTable = (CType(MyBase.Clone(), SeriesTableDataTable))
         cln.InitVars()
         Return cln
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
         Return New SeriesTableDataTable()
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Friend Sub InitVars()
         Me.columnSeries_Date = MyBase.Columns("Series Date")
         Me.columnSeriesNumber = MyBase.Columns("SeriesNumber")
         Me.columnModality = MyBase.Columns("Modality")
         Me.columnOrgan = MyBase.Columns("Organ")
         Me.columnSeries_Description = MyBase.Columns("Series Description")
         Me.columnNumber_of_Instances = MyBase.Columns("Number of Instances")
         Me.columnSeriesInstanceUID = MyBase.Columns("SeriesInstanceUID")
         Me.columnStudyInstanceUID = MyBase.Columns("StudyInstanceUID")
         Me.columnFrameCount = MyBase.Columns("FrameCount")
         Me.columnThumbnail = MyBase.Columns("Thumbnail")
         Me.columnStudyID = MyBase.Columns("StudyID")
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Private Sub InitClass()
         Me.columnSeries_Date = New Global.System.Data.DataColumn("Series Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnSeries_Date)
         Me.columnSeriesNumber = New Global.System.Data.DataColumn("SeriesNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnSeriesNumber)
         Me.columnModality = New Global.System.Data.DataColumn("Modality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnModality)
         Me.columnOrgan = New Global.System.Data.DataColumn("Organ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnOrgan)
         Me.columnSeries_Description = New Global.System.Data.DataColumn("Series Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnSeries_Description)
         Me.columnNumber_of_Instances = New Global.System.Data.DataColumn("Number of Instances", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnNumber_of_Instances)
         Me.columnSeriesInstanceUID = New Global.System.Data.DataColumn("SeriesInstanceUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnSeriesInstanceUID)
         Me.columnStudyInstanceUID = New Global.System.Data.DataColumn("StudyInstanceUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnStudyInstanceUID)
         Me.columnFrameCount = New Global.System.Data.DataColumn("FrameCount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnFrameCount)
         Me.columnThumbnail = New Global.System.Data.DataColumn("Thumbnail", GetType(Global.System.Drawing.Image), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnThumbnail)
         Me.columnStudyID = New Global.System.Data.DataColumn("StudyID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
         MyBase.Columns.Add(Me.columnStudyID)
         Me.columnSeriesInstanceUID.Caption = "rowSeriesID"
         Me.columnStudyInstanceUID.Caption = "rowStudyID"
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function NewSeriesTableRow() As SeriesTableRow
         Return (CType(Me.NewRow(), SeriesTableRow))
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
         Return New SeriesTableRow(builder)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Function GetRowType() As Global.System.Type
         Return GetType(SeriesTableRow)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
         MyBase.OnRowChanged(e)
         If (Not Me.SeriesTableRowChangedEvent Is Nothing) Then
            RaiseEvent SeriesTableRowChanged(Me, New SeriesTableRowChangeEvent((CType(e.Row, SeriesTableRow)), e.Action))
         End If
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
         MyBase.OnRowChanging(e)
         If (Not Me.SeriesTableRowChangingEvent Is Nothing) Then
            RaiseEvent SeriesTableRowChanging(Me, New SeriesTableRowChangeEvent((CType(e.Row, SeriesTableRow)), e.Action))
         End If
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
         MyBase.OnRowDeleted(e)
         If (Not Me.SeriesTableRowDeletedEvent Is Nothing) Then
            RaiseEvent SeriesTableRowDeleted(Me, New SeriesTableRowChangeEvent((CType(e.Row, SeriesTableRow)), e.Action))
         End If
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
         MyBase.OnRowDeleting(e)
         If (Not Me.SeriesTableRowDeletingEvent Is Nothing) Then
            RaiseEvent SeriesTableRowDeleting(Me, New SeriesTableRowChangeEvent((CType(e.Row, SeriesTableRow)), e.Action))
         End If
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub RemoveSeriesTableRow(ByVal row As SeriesTableRow)
         Me.Rows.Remove(row)
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
         Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
         Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
         Dim ds As StudyBrowserDataSet = New StudyBrowserDataSet()
         Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
         any1.Namespace = "http://www.w3.org/2001/XMLSchema"
         any1.MinOccurs = New Decimal(0)
         any1.MaxOccurs = Decimal.MaxValue
         any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
         sequence.Items.Add(any1)
         Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
         any2.MinOccurs = New Decimal(1)
         any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
         sequence.Items.Add(any2)
         Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
         attribute1.Name = "namespace"
         attribute1.FixedValue = ds.Namespace
         type.Attributes.Add(attribute1)
         Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
         attribute2.Name = "tableTypeName"
         attribute2.FixedValue = "SeriesTableDataTable"
         type.Attributes.Add(attribute2)
         type.Particle = sequence
         Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
         If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try
               Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
               dsSchema.Write(s1)
               Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
               Do While schemas.MoveNext()
                  schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
                  s2.SetLength(0)
                  schema.Write(s2)
                  If (s1.Length = s2.Length) Then
                     s1.Position = 0
                     s2.Position = 0
                     Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

                     Loop
                     If (s1.Position = s1.Length) Then
                        Return type
                     End If
                  End If
               Loop
            Finally
               If (Not s1 Is Nothing) Then
                  s1.Close()
               End If
               If (Not s2 Is Nothing) Then
                  s2.Close()
               End If
            End Try
         End If
         xs.Add(dsSchema)
         Return type
      End Function
   End Class

   ''' <summary>
   '''Represents strongly named DataRow class.
   '''</summary>
   <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
   Partial Public Class SeriesTableRow : Inherits Global.System.Data.DataRow

      Private tableSeriesTable As SeriesTableDataTable

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
         MyBase.New(rb)
         Me.tableSeriesTable = (CType(Me.Table, SeriesTableDataTable))
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property Series_Date() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.Series_DateColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'Series Date' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.Series_DateColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property SeriesNumber() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.SeriesNumberColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesNumber' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.SeriesNumberColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property StudyID() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.StudyIDColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'StudyID' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.StudyIDColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property Modality() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.ModalityColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'Modality' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.ModalityColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property Organ() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.OrganColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'Organ' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.OrganColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property Series_Description() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.Series_DescriptionColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'Series Description' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.Series_DescriptionColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property Number_of_Instances() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.Number_of_InstancesColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'Number of Instances' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.Number_of_InstancesColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property SeriesInstanceUID() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.SeriesInstanceUIDColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'SeriesInstanceUID' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.SeriesInstanceUIDColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property StudyInstanceUID() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.StudyInstanceUIDColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'StudyInstanceUID' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.StudyInstanceUIDColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property FrameCount() As String
         Get
            Try
               Return (CStr(Me(Me.tableSeriesTable.FrameCountColumn)))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'FrameCount' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As String)
            Me(Me.tableSeriesTable.FrameCountColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Property Thumbnail() As System.Drawing.Image
         Get
            Try
               Return (CType(Me(Me.tableSeriesTable.ThumbnailColumn), Global.System.Drawing.Image))
            Catch e As Global.System.InvalidCastException
               Throw New Global.System.Data.StrongTypingException("The value for column 'Thumbnail' in table 'SeriesTable' is DBNull.", e)
            End Try
         End Get
         Set(value As System.Drawing.Image)
            Me(Me.tableSeriesTable.ThumbnailColumn) = value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsSeries_DateNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.Series_DateColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetSeries_DateNull()
         Me(Me.tableSeriesTable.Series_DateColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsSeriesNumberNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.SeriesNumberColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetSeriesNumberNull()
         Me(Me.tableSeriesTable.SeriesNumberColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsModalityNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.ModalityColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetModalityNull()
         Me(Me.tableSeriesTable.ModalityColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsOrganNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.OrganColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetOrganNull()
         Me(Me.tableSeriesTable.OrganColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsSeries_DescriptionNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.Series_DescriptionColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetSeries_DescriptionNull()
         Me(Me.tableSeriesTable.Series_DescriptionColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsNumber_of_InstancesNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.Number_of_InstancesColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetNumber_of_InstancesNull()
         Me(Me.tableSeriesTable.Number_of_InstancesColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsSeriesInstanceUIDNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.SeriesInstanceUIDColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetSeriesInstanceUIDNull()
         Me(Me.tableSeriesTable.SeriesInstanceUIDColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsStudyInstanceUIDNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.StudyInstanceUIDColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetStudyInstanceUIDNull()
         Me(Me.tableSeriesTable.StudyInstanceUIDColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsFrameCountNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.FrameCountColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetFrameCountNull()
         Me(Me.tableSeriesTable.FrameCountColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Function IsThumbnailNull() As Boolean
         Return Me.IsNull(Me.tableSeriesTable.ThumbnailColumn)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetThumbnailNull()
         Me(Me.tableSeriesTable.ThumbnailColumn) = Global.System.Convert.DBNull
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub SetStudyIDNull()
         Me(Me.tableSeriesTable.StudyIDColumn) = Global.System.Convert.DBNull
      End Sub
   End Class

   ''' <summary>
   '''Row event argument class
   '''</summary>
   <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
   Public Class SeriesTableRowChangeEvent : Inherits Global.System.EventArgs

      Private eventRow As SeriesTableRow

      Private eventAction As Global.System.Data.DataRowAction

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub New(ByVal rowParam As SeriesTableRow, ByVal actionParam As Global.System.Data.DataRowAction)
         Me.eventRow = rowParam
         Me.eventAction = actionParam
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property Row() As SeriesTableRow
         Get
            Return Me.eventRow
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public ReadOnly Property Action() As Global.System.Data.DataRowAction
         Get
            Return Me.eventAction
         End Get
      End Property
   End Class
End Class
