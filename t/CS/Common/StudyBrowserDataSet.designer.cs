//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Leadtools.Demos {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StudyBrowserDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StudyBrowserDataSet : global::System.Data.DataSet {
        
        private SeriesTableDataTable tableSeriesTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StudyBrowserDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StudyBrowserDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SeriesTable"] != null)) {
                    base.Tables.Add(new SeriesTableDataTable(ds.Tables["SeriesTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SeriesTableDataTable SeriesTable {
            get {
                return this.tableSeriesTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StudyBrowserDataSet cln = ((StudyBrowserDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SeriesTable"] != null)) {
                    base.Tables.Add(new SeriesTableDataTable(ds.Tables["SeriesTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSeriesTable = ((SeriesTableDataTable)(base.Tables["SeriesTable"]));
            if ((initTable == true)) {
                if ((this.tableSeriesTable != null)) {
                    this.tableSeriesTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StudyBrowserDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StudyBrowserDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSeriesTable = new SeriesTableDataTable();
            base.Tables.Add(this.tableSeriesTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSeriesTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StudyBrowserDataSet ds = new StudyBrowserDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SeriesTableRowChangeEventHandler(object sender, SeriesTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SeriesTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSeries_Date;
            
            private global::System.Data.DataColumn columnSeriesNumber;
            
            private global::System.Data.DataColumn columnModality;
            
            private global::System.Data.DataColumn columnOrgan;
            
            private global::System.Data.DataColumn columnSeries_Description;
            
            private global::System.Data.DataColumn columnNumber_of_Instances;
            
            private global::System.Data.DataColumn columnSeriesInstanceUID;
            
            private global::System.Data.DataColumn columnStudyInstanceUID;
            
            private global::System.Data.DataColumn columnFrameCount;
            
            private global::System.Data.DataColumn columnThumbnail;

            private global::System.Data.DataColumn columnStudyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesTableDataTable() {
                this.TableName = "SeriesTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SeriesTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SeriesTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Series_DateColumn {
                get {
                    return this.columnSeries_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesNumberColumn {
                get {
                    return this.columnSeriesNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModalityColumn {
                get {
                    return this.columnModality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrganColumn {
                get {
                    return this.columnOrgan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Series_DescriptionColumn {
                get {
                    return this.columnSeries_Description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Number_of_InstancesColumn {
                get {
                    return this.columnNumber_of_Instances;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesInstanceUIDColumn {
                get {
                    return this.columnSeriesInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyInstanceUIDColumn {
                get {
                    return this.columnStudyInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrameCountColumn {
                get {
                    return this.columnFrameCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThumbnailColumn {
                get {
                    return this.columnThumbnail;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyIDColumn {
                get {
                   return this.columnStudyID;
                }
            }

           
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesTableRow this[int index] {
                get {
                    return ((SeriesTableRow)(this.Rows[index]));
                }
            }
            
            public event SeriesTableRowChangeEventHandler SeriesTableRowChanging;
            
            public event SeriesTableRowChangeEventHandler SeriesTableRowChanged;
            
            public event SeriesTableRowChangeEventHandler SeriesTableRowDeleting;
            
            public event SeriesTableRowChangeEventHandler SeriesTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSeriesTableRow(SeriesTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesTableRow AddSeriesTableRow(string Series_Date, string SeriesNumber, string Modality, string Organ, string Series_Description, string Number_of_Instances, string SeriesInstanceUID, string StudyInstanceUID, string FrameCount, System.Drawing.Image Thumbnail, string StudyID) {
                SeriesTableRow rowSeriesTableRow = ((SeriesTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Series_Date,
                        SeriesNumber,
                        Modality,
                        Organ,
                        Series_Description,
                        Number_of_Instances,
                        SeriesInstanceUID,
                        StudyInstanceUID,
                        FrameCount,
                        Thumbnail,
                        StudyID};
                rowSeriesTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSeriesTableRow);
                return rowSeriesTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SeriesTableDataTable cln = ((SeriesTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SeriesTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSeries_Date = base.Columns["Series Date"];
                this.columnSeriesNumber = base.Columns["SeriesNumber"];
                this.columnModality = base.Columns["Modality"];
                this.columnOrgan = base.Columns["Organ"];
                this.columnSeries_Description = base.Columns["Series Description"];
                this.columnNumber_of_Instances = base.Columns["Number of Instances"];
                this.columnSeriesInstanceUID = base.Columns["SeriesInstanceUID"];
                this.columnStudyInstanceUID = base.Columns["StudyInstanceUID"];
                this.columnFrameCount = base.Columns["FrameCount"];
                this.columnThumbnail = base.Columns["Thumbnail"];
                this.columnStudyID = base.Columns["StudyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSeries_Date = new global::System.Data.DataColumn("Series Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries_Date);
                this.columnSeriesNumber = new global::System.Data.DataColumn("SeriesNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesNumber);
                this.columnModality = new global::System.Data.DataColumn("Modality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModality);
                this.columnOrgan = new global::System.Data.DataColumn("Organ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrgan);
                this.columnSeries_Description = new global::System.Data.DataColumn("Series Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries_Description);
                this.columnNumber_of_Instances = new global::System.Data.DataColumn("Number of Instances", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber_of_Instances);
                this.columnSeriesInstanceUID = new global::System.Data.DataColumn("SeriesInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesInstanceUID);
                this.columnStudyInstanceUID = new global::System.Data.DataColumn("StudyInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyInstanceUID);
                this.columnFrameCount = new global::System.Data.DataColumn("FrameCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrameCount);
                this.columnThumbnail = new global::System.Data.DataColumn("Thumbnail", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThumbnail);
                this.columnStudyID  = new global::System.Data.DataColumn("StudyID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyID);
                this.columnSeriesInstanceUID.Caption = "rowSeriesID";
                this.columnStudyInstanceUID.Caption = "rowStudyID";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesTableRow NewSeriesTableRow() {
                return ((SeriesTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SeriesTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SeriesTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SeriesTableRowChanged != null)) {
                    this.SeriesTableRowChanged(this, new SeriesTableRowChangeEvent(((SeriesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SeriesTableRowChanging != null)) {
                    this.SeriesTableRowChanging(this, new SeriesTableRowChangeEvent(((SeriesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SeriesTableRowDeleted != null)) {
                    this.SeriesTableRowDeleted(this, new SeriesTableRowChangeEvent(((SeriesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SeriesTableRowDeleting != null)) {
                    this.SeriesTableRowDeleting(this, new SeriesTableRowChangeEvent(((SeriesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSeriesTableRow(SeriesTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyBrowserDataSet ds = new StudyBrowserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SeriesTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SeriesTableRow : global::System.Data.DataRow {
            
            private SeriesTableDataTable tableSeriesTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SeriesTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSeriesTable = ((SeriesTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Series_Date {
                get {
                    try {
                        return ((string)(this[this.tableSeriesTable.Series_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Series Date\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.Series_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesNumber {
                get {
                    try {
                        return ((string)(this[this.tableSeriesTable.SeriesNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesNumber\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.SeriesNumberColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyID
            {
               get
               {
                  try
                  {
                     return ((string)(this[this.tableSeriesTable.StudyIDColumn]));
                  }
                  catch (global::System.InvalidCastException e)
                  {
                     throw new global::System.Data.StrongTypingException("The value for column \'StudyID\' in table \'SeriesTable\' is DBNull.", e);
                  }
               }
               set
               {
                  this[this.tableSeriesTable.StudyIDColumn] = value;
               }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Modality {
                get {
                    try {
                        return ((string)(this[this.tableSeriesTable.ModalityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modality\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.ModalityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Organ {
                get {
                    try {
                        return ((string)(this[this.tableSeriesTable.OrganColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Organ\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.OrganColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Series_Description {
                get {
                    try {
                        return ((string)(this[this.tableSeriesTable.Series_DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Series Description\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.Series_DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number_of_Instances {
                get {
                    try {
                        return ((string)(this[this.tableSeriesTable.Number_of_InstancesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Number of Instances\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.Number_of_InstancesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesInstanceUID {
                get {
                    try {
                        return ((string)(this[this.tableSeriesTable.SeriesInstanceUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesInstanceUID\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.SeriesInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyInstanceUID {
                get {
                    try {
                        return ((string)(this[this.tableSeriesTable.StudyInstanceUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyInstanceUID\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.StudyInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FrameCount {
                get {
                    try {
                        return ((string)(this[this.tableSeriesTable.FrameCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrameCount\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.FrameCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image Thumbnail {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableSeriesTable.ThumbnailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thumbnail\' in table \'SeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesTable.ThumbnailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeries_DateNull() {
                return this.IsNull(this.tableSeriesTable.Series_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeries_DateNull() {
                this[this.tableSeriesTable.Series_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesNumberNull() {
                return this.IsNull(this.tableSeriesTable.SeriesNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesNumberNull() {
                this[this.tableSeriesTable.SeriesNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModalityNull() {
                return this.IsNull(this.tableSeriesTable.ModalityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModalityNull() {
                this[this.tableSeriesTable.ModalityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrganNull() {
                return this.IsNull(this.tableSeriesTable.OrganColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrganNull() {
                this[this.tableSeriesTable.OrganColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeries_DescriptionNull() {
                return this.IsNull(this.tableSeriesTable.Series_DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeries_DescriptionNull() {
                this[this.tableSeriesTable.Series_DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumber_of_InstancesNull() {
                return this.IsNull(this.tableSeriesTable.Number_of_InstancesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumber_of_InstancesNull() {
                this[this.tableSeriesTable.Number_of_InstancesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesInstanceUIDNull() {
                return this.IsNull(this.tableSeriesTable.SeriesInstanceUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesInstanceUIDNull() {
                this[this.tableSeriesTable.SeriesInstanceUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyInstanceUIDNull() {
                return this.IsNull(this.tableSeriesTable.StudyInstanceUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyInstanceUIDNull() {
                this[this.tableSeriesTable.StudyInstanceUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrameCountNull() {
                return this.IsNull(this.tableSeriesTable.FrameCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrameCountNull() {
                this[this.tableSeriesTable.FrameCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThumbnailNull() {
                return this.IsNull(this.tableSeriesTable.ThumbnailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThumbnailNull() {
                this[this.tableSeriesTable.ThumbnailColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyIDNull()
            {
               this[this.tableSeriesTable.StudyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SeriesTableRowChangeEvent : global::System.EventArgs {
            
            private SeriesTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesTableRowChangeEvent(SeriesTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591