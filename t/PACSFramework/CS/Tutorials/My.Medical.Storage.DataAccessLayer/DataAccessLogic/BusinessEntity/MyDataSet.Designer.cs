//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace My.Medical.Storage.DataAccessLayer.DataAccessLogic.BusinessEntity {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MyDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MyDataSet : global::System.Data.DataSet {
        
        private MyInstanceTableDataTable tableMyInstanceTable;
        
        private MyPatientTableDataTable tableMyPatientTable;
        
        private MySeriesTableDataTable tableMySeriesTable;
        
        private MyStudyTableDataTable tableMyStudyTable;
        
        private global::System.Data.DataRelation relationFK_DImage_Series;
        
        private global::System.Data.DataRelation relationFK_Series_Study;
        
        private global::System.Data.DataRelation relationFK_Study_Patient;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MyDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MyDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MyInstanceTable"] != null)) {
                    base.Tables.Add(new MyInstanceTableDataTable(ds.Tables["MyInstanceTable"]));
                }
                if ((ds.Tables["MyPatientTable"] != null)) {
                    base.Tables.Add(new MyPatientTableDataTable(ds.Tables["MyPatientTable"]));
                }
                if ((ds.Tables["MySeriesTable"] != null)) {
                    base.Tables.Add(new MySeriesTableDataTable(ds.Tables["MySeriesTable"]));
                }
                if ((ds.Tables["MyStudyTable"] != null)) {
                    base.Tables.Add(new MyStudyTableDataTable(ds.Tables["MyStudyTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MyInstanceTableDataTable MyInstanceTable {
            get {
                return this.tableMyInstanceTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MyPatientTableDataTable MyPatientTable {
            get {
                return this.tableMyPatientTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MySeriesTableDataTable MySeriesTable {
            get {
                return this.tableMySeriesTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MyStudyTableDataTable MyStudyTable {
            get {
                return this.tableMyStudyTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MyDataSet cln = ((MyDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MyInstanceTable"] != null)) {
                    base.Tables.Add(new MyInstanceTableDataTable(ds.Tables["MyInstanceTable"]));
                }
                if ((ds.Tables["MyPatientTable"] != null)) {
                    base.Tables.Add(new MyPatientTableDataTable(ds.Tables["MyPatientTable"]));
                }
                if ((ds.Tables["MySeriesTable"] != null)) {
                    base.Tables.Add(new MySeriesTableDataTable(ds.Tables["MySeriesTable"]));
                }
                if ((ds.Tables["MyStudyTable"] != null)) {
                    base.Tables.Add(new MyStudyTableDataTable(ds.Tables["MyStudyTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMyInstanceTable = ((MyInstanceTableDataTable)(base.Tables["MyInstanceTable"]));
            if ((initTable == true)) {
                if ((this.tableMyInstanceTable != null)) {
                    this.tableMyInstanceTable.InitVars();
                }
            }
            this.tableMyPatientTable = ((MyPatientTableDataTable)(base.Tables["MyPatientTable"]));
            if ((initTable == true)) {
                if ((this.tableMyPatientTable != null)) {
                    this.tableMyPatientTable.InitVars();
                }
            }
            this.tableMySeriesTable = ((MySeriesTableDataTable)(base.Tables["MySeriesTable"]));
            if ((initTable == true)) {
                if ((this.tableMySeriesTable != null)) {
                    this.tableMySeriesTable.InitVars();
                }
            }
            this.tableMyStudyTable = ((MyStudyTableDataTable)(base.Tables["MyStudyTable"]));
            if ((initTable == true)) {
                if ((this.tableMyStudyTable != null)) {
                    this.tableMyStudyTable.InitVars();
                }
            }
            this.relationFK_DImage_Series = this.Relations["FK_DImage_Series"];
            this.relationFK_Series_Study = this.Relations["FK_Series_Study"];
            this.relationFK_Study_Patient = this.Relations["FK_Study_Patient"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MyDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MyDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMyInstanceTable = new MyInstanceTableDataTable();
            base.Tables.Add(this.tableMyInstanceTable);
            this.tableMyPatientTable = new MyPatientTableDataTable();
            base.Tables.Add(this.tableMyPatientTable);
            this.tableMySeriesTable = new MySeriesTableDataTable();
            base.Tables.Add(this.tableMySeriesTable);
            this.tableMyStudyTable = new MyStudyTableDataTable();
            base.Tables.Add(this.tableMyStudyTable);
            this.relationFK_DImage_Series = new global::System.Data.DataRelation("FK_DImage_Series", new global::System.Data.DataColumn[] {
                        this.tableMySeriesTable.SeriesIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMyInstanceTable.ImageSeriesIdColumn}, false);
            this.Relations.Add(this.relationFK_DImage_Series);
            this.relationFK_Series_Study = new global::System.Data.DataRelation("FK_Series_Study", new global::System.Data.DataColumn[] {
                        this.tableMyStudyTable.StudyIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMySeriesTable.SeriesStudyIdColumn}, false);
            this.Relations.Add(this.relationFK_Series_Study);
            this.relationFK_Study_Patient = new global::System.Data.DataRelation("FK_Study_Patient", new global::System.Data.DataColumn[] {
                        this.tableMyPatientTable.PatientIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMyStudyTable.StudyPatientIdColumn}, false);
            this.Relations.Add(this.relationFK_Study_Patient);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMyInstanceTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMyPatientTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMySeriesTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMyStudyTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MyDataSet ds = new MyDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MyInstanceTableRowChangeEventHandler(object sender, MyInstanceTableRowChangeEvent e);
        
        public delegate void MyPatientTableRowChangeEventHandler(object sender, MyPatientTableRowChangeEvent e);
        
        public delegate void MySeriesTableRowChangeEventHandler(object sender, MySeriesTableRowChangeEvent e);
        
        public delegate void MyStudyTableRowChangeEventHandler(object sender, MyStudyTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MyInstanceTableDataTable : global::System.Data.TypedTableBase<MyInstanceTableRow> {
            
            private global::System.Data.DataColumn columnImageId;
            
            private global::System.Data.DataColumn columnImageSeriesId;
            
            private global::System.Data.DataColumn columnSOPInstanceUID;
            
            private global::System.Data.DataColumn columnImageImageNumber;
            
            private global::System.Data.DataColumn columnImageLastStoreDate;
            
            private global::System.Data.DataColumn columnImageFilename;
            
            private global::System.Data.DataColumn columnImageUniqueSOPClassUID;
            
            private global::System.Data.DataColumn columnImageRows;
            
            private global::System.Data.DataColumn columnImageColumns;
            
            private global::System.Data.DataColumn columnImageBitsAllocated;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyInstanceTableDataTable() {
                this.TableName = "MyInstanceTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyInstanceTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MyInstanceTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageIdColumn {
                get {
                    return this.columnImageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageSeriesIdColumn {
                get {
                    return this.columnImageSeriesId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SOPInstanceUIDColumn {
                get {
                    return this.columnSOPInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageImageNumberColumn {
                get {
                    return this.columnImageImageNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageLastStoreDateColumn {
                get {
                    return this.columnImageLastStoreDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageFilenameColumn {
                get {
                    return this.columnImageFilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageUniqueSOPClassUIDColumn {
                get {
                    return this.columnImageUniqueSOPClassUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageRowsColumn {
                get {
                    return this.columnImageRows;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageColumnsColumn {
                get {
                    return this.columnImageColumns;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageBitsAllocatedColumn {
                get {
                    return this.columnImageBitsAllocated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyInstanceTableRow this[int index] {
                get {
                    return ((MyInstanceTableRow)(this.Rows[index]));
                }
            }
            
            public event MyInstanceTableRowChangeEventHandler MyInstanceTableRowChanging;
            
            public event MyInstanceTableRowChangeEventHandler MyInstanceTableRowChanged;
            
            public event MyInstanceTableRowChangeEventHandler MyInstanceTableRowDeleting;
            
            public event MyInstanceTableRowChangeEventHandler MyInstanceTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMyInstanceTableRow(MyInstanceTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyInstanceTableRow AddMyInstanceTableRow(MySeriesTableRow parentMySeriesTableRowByFK_DImage_Series, string SOPInstanceUID, int ImageImageNumber, System.DateTime ImageLastStoreDate, string ImageFilename, string ImageUniqueSOPClassUID, long ImageRows, long ImageColumns, long ImageBitsAllocated) {
                MyInstanceTableRow rowMyInstanceTableRow = ((MyInstanceTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        SOPInstanceUID,
                        ImageImageNumber,
                        ImageLastStoreDate,
                        ImageFilename,
                        ImageUniqueSOPClassUID,
                        ImageRows,
                        ImageColumns,
                        ImageBitsAllocated};
                if ((parentMySeriesTableRowByFK_DImage_Series != null)) {
                    columnValuesArray[1] = parentMySeriesTableRowByFK_DImage_Series[0];
                }
                rowMyInstanceTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMyInstanceTableRow);
                return rowMyInstanceTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyInstanceTableRow FindByImageId(long ImageId) {
                return ((MyInstanceTableRow)(this.Rows.Find(new object[] {
                            ImageId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MyInstanceTableDataTable cln = ((MyInstanceTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MyInstanceTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImageId = base.Columns["ImageId"];
                this.columnImageSeriesId = base.Columns["ImageSeriesId"];
                this.columnSOPInstanceUID = base.Columns["SOPInstanceUID"];
                this.columnImageImageNumber = base.Columns["ImageImageNumber"];
                this.columnImageLastStoreDate = base.Columns["ImageLastStoreDate"];
                this.columnImageFilename = base.Columns["ImageFilename"];
                this.columnImageUniqueSOPClassUID = base.Columns["ImageUniqueSOPClassUID"];
                this.columnImageRows = base.Columns["ImageRows"];
                this.columnImageColumns = base.Columns["ImageColumns"];
                this.columnImageBitsAllocated = base.Columns["ImageBitsAllocated"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImageId = new global::System.Data.DataColumn("ImageId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageId);
                this.columnImageSeriesId = new global::System.Data.DataColumn("ImageSeriesId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageSeriesId);
                this.columnSOPInstanceUID = new global::System.Data.DataColumn("SOPInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOPInstanceUID);
                this.columnImageImageNumber = new global::System.Data.DataColumn("ImageImageNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageImageNumber);
                this.columnImageLastStoreDate = new global::System.Data.DataColumn("ImageLastStoreDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageLastStoreDate);
                this.columnImageFilename = new global::System.Data.DataColumn("ImageFilename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageFilename);
                this.columnImageUniqueSOPClassUID = new global::System.Data.DataColumn("ImageUniqueSOPClassUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageUniqueSOPClassUID);
                this.columnImageRows = new global::System.Data.DataColumn("ImageRows", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageRows);
                this.columnImageColumns = new global::System.Data.DataColumn("ImageColumns", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageColumns);
                this.columnImageBitsAllocated = new global::System.Data.DataColumn("ImageBitsAllocated", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageBitsAllocated);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnImageId}, true));
                this.columnImageId.AutoIncrement = true;
                this.columnImageId.AutoIncrementSeed = -1;
                this.columnImageId.AutoIncrementStep = -1;
                this.columnImageId.AllowDBNull = false;
                this.columnImageId.ReadOnly = true;
                this.columnImageId.Unique = true;
                this.columnImageSeriesId.AllowDBNull = false;
                this.columnSOPInstanceUID.AllowDBNull = false;
                this.columnSOPInstanceUID.MaxLength = 64;
                this.columnImageImageNumber.AllowDBNull = false;
                this.columnImageFilename.AllowDBNull = false;
                this.columnImageFilename.MaxLength = 400;
                this.columnImageUniqueSOPClassUID.MaxLength = 64;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyInstanceTableRow NewMyInstanceTableRow() {
                return ((MyInstanceTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MyInstanceTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MyInstanceTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MyInstanceTableRowChanged != null)) {
                    this.MyInstanceTableRowChanged(this, new MyInstanceTableRowChangeEvent(((MyInstanceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MyInstanceTableRowChanging != null)) {
                    this.MyInstanceTableRowChanging(this, new MyInstanceTableRowChangeEvent(((MyInstanceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MyInstanceTableRowDeleted != null)) {
                    this.MyInstanceTableRowDeleted(this, new MyInstanceTableRowChangeEvent(((MyInstanceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MyInstanceTableRowDeleting != null)) {
                    this.MyInstanceTableRowDeleting(this, new MyInstanceTableRowChangeEvent(((MyInstanceTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMyInstanceTableRow(MyInstanceTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MyInstanceTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MyPatientTableDataTable : global::System.Data.TypedTableBase<MyPatientTableRow> {
            
            private global::System.Data.DataColumn columnPatientId;
            
            private global::System.Data.DataColumn columnPatientIdentification;
            
            private global::System.Data.DataColumn columnPatientName;
            
            private global::System.Data.DataColumn columnPatientBirthday;
            
            private global::System.Data.DataColumn columnPatientSex;
            
            private global::System.Data.DataColumn columnPatientComments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyPatientTableDataTable() {
                this.TableName = "MyPatientTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyPatientTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MyPatientTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientIdColumn {
                get {
                    return this.columnPatientId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientIdentificationColumn {
                get {
                    return this.columnPatientIdentification;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientNameColumn {
                get {
                    return this.columnPatientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientBirthdayColumn {
                get {
                    return this.columnPatientBirthday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientSexColumn {
                get {
                    return this.columnPatientSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientCommentsColumn {
                get {
                    return this.columnPatientComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyPatientTableRow this[int index] {
                get {
                    return ((MyPatientTableRow)(this.Rows[index]));
                }
            }
            
            public event MyPatientTableRowChangeEventHandler MyPatientTableRowChanging;
            
            public event MyPatientTableRowChangeEventHandler MyPatientTableRowChanged;
            
            public event MyPatientTableRowChangeEventHandler MyPatientTableRowDeleting;
            
            public event MyPatientTableRowChangeEventHandler MyPatientTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMyPatientTableRow(MyPatientTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyPatientTableRow AddMyPatientTableRow(string PatientIdentification, string PatientName, System.DateTime PatientBirthday, string PatientSex, string PatientComments) {
                MyPatientTableRow rowMyPatientTableRow = ((MyPatientTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PatientIdentification,
                        PatientName,
                        PatientBirthday,
                        PatientSex,
                        PatientComments};
                rowMyPatientTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMyPatientTableRow);
                return rowMyPatientTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyPatientTableRow FindByPatientId(int PatientId) {
                return ((MyPatientTableRow)(this.Rows.Find(new object[] {
                            PatientId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MyPatientTableDataTable cln = ((MyPatientTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MyPatientTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPatientId = base.Columns["PatientId"];
                this.columnPatientIdentification = base.Columns["PatientIdentification"];
                this.columnPatientName = base.Columns["PatientName"];
                this.columnPatientBirthday = base.Columns["PatientBirthday"];
                this.columnPatientSex = base.Columns["PatientSex"];
                this.columnPatientComments = base.Columns["PatientComments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPatientId = new global::System.Data.DataColumn("PatientId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientId);
                this.columnPatientIdentification = new global::System.Data.DataColumn("PatientIdentification", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientIdentification);
                this.columnPatientName = new global::System.Data.DataColumn("PatientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientName);
                this.columnPatientBirthday = new global::System.Data.DataColumn("PatientBirthday", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientBirthday);
                this.columnPatientSex = new global::System.Data.DataColumn("PatientSex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientSex);
                this.columnPatientComments = new global::System.Data.DataColumn("PatientComments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientComments);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPatientId}, true));
                this.columnPatientId.AutoIncrement = true;
                this.columnPatientId.AutoIncrementSeed = -1;
                this.columnPatientId.AutoIncrementStep = -1;
                this.columnPatientId.AllowDBNull = false;
                this.columnPatientId.ReadOnly = true;
                this.columnPatientId.Unique = true;
                this.columnPatientIdentification.AllowDBNull = false;
                this.columnPatientIdentification.MaxLength = 70;
                this.columnPatientName.AllowDBNull = false;
                this.columnPatientName.MaxLength = 2147483647;
                this.columnPatientSex.MaxLength = 50;
                this.columnPatientComments.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyPatientTableRow NewMyPatientTableRow() {
                return ((MyPatientTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MyPatientTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MyPatientTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MyPatientTableRowChanged != null)) {
                    this.MyPatientTableRowChanged(this, new MyPatientTableRowChangeEvent(((MyPatientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MyPatientTableRowChanging != null)) {
                    this.MyPatientTableRowChanging(this, new MyPatientTableRowChangeEvent(((MyPatientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MyPatientTableRowDeleted != null)) {
                    this.MyPatientTableRowDeleted(this, new MyPatientTableRowChangeEvent(((MyPatientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MyPatientTableRowDeleting != null)) {
                    this.MyPatientTableRowDeleting(this, new MyPatientTableRowChangeEvent(((MyPatientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMyPatientTableRow(MyPatientTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MyPatientTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MySeriesTableDataTable : global::System.Data.TypedTableBase<MySeriesTableRow> {
            
            private global::System.Data.DataColumn columnSeriesId;
            
            private global::System.Data.DataColumn columnSeriesStudyId;
            
            private global::System.Data.DataColumn columnSeriesSeriesInstanceUID;
            
            private global::System.Data.DataColumn columnSeriesBodyPartExamined;
            
            private global::System.Data.DataColumn columnSeriesSeriesNumber;
            
            private global::System.Data.DataColumn columnSeriesSeriesDescription;
            
            private global::System.Data.DataColumn columnSeriesSeriesDate;
            
            private global::System.Data.DataColumn columnSeriesModality;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MySeriesTableDataTable() {
                this.TableName = "MySeriesTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MySeriesTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MySeriesTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesIdColumn {
                get {
                    return this.columnSeriesId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesStudyIdColumn {
                get {
                    return this.columnSeriesStudyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesSeriesInstanceUIDColumn {
                get {
                    return this.columnSeriesSeriesInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesBodyPartExaminedColumn {
                get {
                    return this.columnSeriesBodyPartExamined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesSeriesNumberColumn {
                get {
                    return this.columnSeriesSeriesNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesSeriesDescriptionColumn {
                get {
                    return this.columnSeriesSeriesDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesSeriesDateColumn {
                get {
                    return this.columnSeriesSeriesDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesModalityColumn {
                get {
                    return this.columnSeriesModality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MySeriesTableRow this[int index] {
                get {
                    return ((MySeriesTableRow)(this.Rows[index]));
                }
            }
            
            public event MySeriesTableRowChangeEventHandler MySeriesTableRowChanging;
            
            public event MySeriesTableRowChangeEventHandler MySeriesTableRowChanged;
            
            public event MySeriesTableRowChangeEventHandler MySeriesTableRowDeleting;
            
            public event MySeriesTableRowChangeEventHandler MySeriesTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMySeriesTableRow(MySeriesTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MySeriesTableRow AddMySeriesTableRow(MyStudyTableRow parentMyStudyTableRowByFK_Series_Study, string SeriesSeriesInstanceUID, string SeriesBodyPartExamined, int SeriesSeriesNumber, string SeriesSeriesDescription, System.DateTime SeriesSeriesDate, string SeriesModality) {
                MySeriesTableRow rowMySeriesTableRow = ((MySeriesTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        SeriesSeriesInstanceUID,
                        SeriesBodyPartExamined,
                        SeriesSeriesNumber,
                        SeriesSeriesDescription,
                        SeriesSeriesDate,
                        SeriesModality};
                if ((parentMyStudyTableRowByFK_Series_Study != null)) {
                    columnValuesArray[1] = parentMyStudyTableRowByFK_Series_Study[0];
                }
                rowMySeriesTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMySeriesTableRow);
                return rowMySeriesTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MySeriesTableRow FindBySeriesId(int SeriesId) {
                return ((MySeriesTableRow)(this.Rows.Find(new object[] {
                            SeriesId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MySeriesTableDataTable cln = ((MySeriesTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MySeriesTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSeriesId = base.Columns["SeriesId"];
                this.columnSeriesStudyId = base.Columns["SeriesStudyId"];
                this.columnSeriesSeriesInstanceUID = base.Columns["SeriesSeriesInstanceUID"];
                this.columnSeriesBodyPartExamined = base.Columns["SeriesBodyPartExamined"];
                this.columnSeriesSeriesNumber = base.Columns["SeriesSeriesNumber"];
                this.columnSeriesSeriesDescription = base.Columns["SeriesSeriesDescription"];
                this.columnSeriesSeriesDate = base.Columns["SeriesSeriesDate"];
                this.columnSeriesModality = base.Columns["SeriesModality"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSeriesId = new global::System.Data.DataColumn("SeriesId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesId);
                this.columnSeriesStudyId = new global::System.Data.DataColumn("SeriesStudyId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesStudyId);
                this.columnSeriesSeriesInstanceUID = new global::System.Data.DataColumn("SeriesSeriesInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesSeriesInstanceUID);
                this.columnSeriesBodyPartExamined = new global::System.Data.DataColumn("SeriesBodyPartExamined", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesBodyPartExamined);
                this.columnSeriesSeriesNumber = new global::System.Data.DataColumn("SeriesSeriesNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesSeriesNumber);
                this.columnSeriesSeriesDescription = new global::System.Data.DataColumn("SeriesSeriesDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesSeriesDescription);
                this.columnSeriesSeriesDate = new global::System.Data.DataColumn("SeriesSeriesDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesSeriesDate);
                this.columnSeriesModality = new global::System.Data.DataColumn("SeriesModality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesModality);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSeriesId}, true));
                this.columnSeriesId.AutoIncrement = true;
                this.columnSeriesId.AutoIncrementSeed = -1;
                this.columnSeriesId.AutoIncrementStep = -1;
                this.columnSeriesId.AllowDBNull = false;
                this.columnSeriesId.ReadOnly = true;
                this.columnSeriesId.Unique = true;
                this.columnSeriesStudyId.AllowDBNull = false;
                this.columnSeriesSeriesInstanceUID.AllowDBNull = false;
                this.columnSeriesSeriesInstanceUID.MaxLength = 64;
                this.columnSeriesBodyPartExamined.MaxLength = 16;
                this.columnSeriesSeriesDescription.MaxLength = 300;
                this.columnSeriesModality.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MySeriesTableRow NewMySeriesTableRow() {
                return ((MySeriesTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MySeriesTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MySeriesTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MySeriesTableRowChanged != null)) {
                    this.MySeriesTableRowChanged(this, new MySeriesTableRowChangeEvent(((MySeriesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MySeriesTableRowChanging != null)) {
                    this.MySeriesTableRowChanging(this, new MySeriesTableRowChangeEvent(((MySeriesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MySeriesTableRowDeleted != null)) {
                    this.MySeriesTableRowDeleted(this, new MySeriesTableRowChangeEvent(((MySeriesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MySeriesTableRowDeleting != null)) {
                    this.MySeriesTableRowDeleting(this, new MySeriesTableRowChangeEvent(((MySeriesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMySeriesTableRow(MySeriesTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MySeriesTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MyStudyTableDataTable : global::System.Data.TypedTableBase<MyStudyTableRow> {
            
            private global::System.Data.DataColumn columnStudyId;
            
            private global::System.Data.DataColumn columnStudyPatientId;
            
            private global::System.Data.DataColumn columnStudyStudyInstanceUID;
            
            private global::System.Data.DataColumn columnStudyStudyDate;
            
            private global::System.Data.DataColumn columnStudyAccessionNumber;
            
            private global::System.Data.DataColumn columnStudyStudyDescription;
            
            private global::System.Data.DataColumn columnStudyReferringPhysiciansName;
            
            private global::System.Data.DataColumn columnStudyStudyId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyStudyTableDataTable() {
                this.TableName = "MyStudyTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyStudyTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MyStudyTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyIdColumn {
                get {
                    return this.columnStudyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyPatientIdColumn {
                get {
                    return this.columnStudyPatientId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyStudyInstanceUIDColumn {
                get {
                    return this.columnStudyStudyInstanceUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyStudyDateColumn {
                get {
                    return this.columnStudyStudyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyAccessionNumberColumn {
                get {
                    return this.columnStudyAccessionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyStudyDescriptionColumn {
                get {
                    return this.columnStudyStudyDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyReferringPhysiciansNameColumn {
                get {
                    return this.columnStudyReferringPhysiciansName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudyStudyIdColumn {
                get {
                    return this.columnStudyStudyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyStudyTableRow this[int index] {
                get {
                    return ((MyStudyTableRow)(this.Rows[index]));
                }
            }
            
            public event MyStudyTableRowChangeEventHandler MyStudyTableRowChanging;
            
            public event MyStudyTableRowChangeEventHandler MyStudyTableRowChanged;
            
            public event MyStudyTableRowChangeEventHandler MyStudyTableRowDeleting;
            
            public event MyStudyTableRowChangeEventHandler MyStudyTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMyStudyTableRow(MyStudyTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyStudyTableRow AddMyStudyTableRow(MyPatientTableRow parentMyPatientTableRowByFK_Study_Patient, string StudyStudyInstanceUID, System.DateTime StudyStudyDate, string StudyAccessionNumber, string StudyStudyDescription, string StudyReferringPhysiciansName, string StudyStudyId) {
                MyStudyTableRow rowMyStudyTableRow = ((MyStudyTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        StudyStudyInstanceUID,
                        StudyStudyDate,
                        StudyAccessionNumber,
                        StudyStudyDescription,
                        StudyReferringPhysiciansName,
                        StudyStudyId};
                if ((parentMyPatientTableRowByFK_Study_Patient != null)) {
                    columnValuesArray[1] = parentMyPatientTableRowByFK_Study_Patient[0];
                }
                rowMyStudyTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMyStudyTableRow);
                return rowMyStudyTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyStudyTableRow FindByStudyId(int StudyId) {
                return ((MyStudyTableRow)(this.Rows.Find(new object[] {
                            StudyId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MyStudyTableDataTable cln = ((MyStudyTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MyStudyTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStudyId = base.Columns["StudyId"];
                this.columnStudyPatientId = base.Columns["StudyPatientId"];
                this.columnStudyStudyInstanceUID = base.Columns["StudyStudyInstanceUID"];
                this.columnStudyStudyDate = base.Columns["StudyStudyDate"];
                this.columnStudyAccessionNumber = base.Columns["StudyAccessionNumber"];
                this.columnStudyStudyDescription = base.Columns["StudyStudyDescription"];
                this.columnStudyReferringPhysiciansName = base.Columns["StudyReferringPhysiciansName"];
                this.columnStudyStudyId = base.Columns["StudyStudyId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStudyId = new global::System.Data.DataColumn("StudyId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyId);
                this.columnStudyPatientId = new global::System.Data.DataColumn("StudyPatientId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyPatientId);
                this.columnStudyStudyInstanceUID = new global::System.Data.DataColumn("StudyStudyInstanceUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyStudyInstanceUID);
                this.columnStudyStudyDate = new global::System.Data.DataColumn("StudyStudyDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyStudyDate);
                this.columnStudyAccessionNumber = new global::System.Data.DataColumn("StudyAccessionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyAccessionNumber);
                this.columnStudyStudyDescription = new global::System.Data.DataColumn("StudyStudyDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyStudyDescription);
                this.columnStudyReferringPhysiciansName = new global::System.Data.DataColumn("StudyReferringPhysiciansName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyReferringPhysiciansName);
                this.columnStudyStudyId = new global::System.Data.DataColumn("StudyStudyId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudyStudyId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStudyId}, true));
                this.columnStudyId.AutoIncrement = true;
                this.columnStudyId.AutoIncrementSeed = -1;
                this.columnStudyId.AutoIncrementStep = -1;
                this.columnStudyId.AllowDBNull = false;
                this.columnStudyId.ReadOnly = true;
                this.columnStudyId.Unique = true;
                this.columnStudyPatientId.AllowDBNull = false;
                this.columnStudyStudyInstanceUID.AllowDBNull = false;
                this.columnStudyStudyInstanceUID.MaxLength = 64;
                this.columnStudyAccessionNumber.MaxLength = 64;
                this.columnStudyStudyDescription.MaxLength = 256;
                this.columnStudyReferringPhysiciansName.MaxLength = 50;
                this.columnStudyStudyId.MaxLength = 16;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyStudyTableRow NewMyStudyTableRow() {
                return ((MyStudyTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MyStudyTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MyStudyTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MyStudyTableRowChanged != null)) {
                    this.MyStudyTableRowChanged(this, new MyStudyTableRowChangeEvent(((MyStudyTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MyStudyTableRowChanging != null)) {
                    this.MyStudyTableRowChanging(this, new MyStudyTableRowChangeEvent(((MyStudyTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MyStudyTableRowDeleted != null)) {
                    this.MyStudyTableRowDeleted(this, new MyStudyTableRowChangeEvent(((MyStudyTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MyStudyTableRowDeleting != null)) {
                    this.MyStudyTableRowDeleting(this, new MyStudyTableRowChangeEvent(((MyStudyTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMyStudyTableRow(MyStudyTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MyDataSet ds = new MyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MyStudyTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MyInstanceTableRow : global::System.Data.DataRow {
            
            private MyInstanceTableDataTable tableMyInstanceTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyInstanceTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMyInstanceTable = ((MyInstanceTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ImageId {
                get {
                    return ((long)(this[this.tableMyInstanceTable.ImageIdColumn]));
                }
                set {
                    this[this.tableMyInstanceTable.ImageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImageSeriesId {
                get {
                    return ((int)(this[this.tableMyInstanceTable.ImageSeriesIdColumn]));
                }
                set {
                    this[this.tableMyInstanceTable.ImageSeriesIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOPInstanceUID {
                get {
                    return ((string)(this[this.tableMyInstanceTable.SOPInstanceUIDColumn]));
                }
                set {
                    this[this.tableMyInstanceTable.SOPInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImageImageNumber {
                get {
                    return ((int)(this[this.tableMyInstanceTable.ImageImageNumberColumn]));
                }
                set {
                    this[this.tableMyInstanceTable.ImageImageNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ImageLastStoreDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMyInstanceTable.ImageLastStoreDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageLastStoreDate\' in table \'MyInstanceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyInstanceTable.ImageLastStoreDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageFilename {
                get {
                    return ((string)(this[this.tableMyInstanceTable.ImageFilenameColumn]));
                }
                set {
                    this[this.tableMyInstanceTable.ImageFilenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageUniqueSOPClassUID {
                get {
                    try {
                        return ((string)(this[this.tableMyInstanceTable.ImageUniqueSOPClassUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageUniqueSOPClassUID\' in table \'MyInstanceTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMyInstanceTable.ImageUniqueSOPClassUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ImageRows {
                get {
                    try {
                        return ((long)(this[this.tableMyInstanceTable.ImageRowsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageRows\' in table \'MyInstanceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyInstanceTable.ImageRowsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ImageColumns {
                get {
                    try {
                        return ((long)(this[this.tableMyInstanceTable.ImageColumnsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageColumns\' in table \'MyInstanceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyInstanceTable.ImageColumnsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ImageBitsAllocated {
                get {
                    try {
                        return ((long)(this[this.tableMyInstanceTable.ImageBitsAllocatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageBitsAllocated\' in table \'MyInstanceTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyInstanceTable.ImageBitsAllocatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MySeriesTableRow MySeriesTableRow {
                get {
                    return ((MySeriesTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_DImage_Series"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DImage_Series"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageLastStoreDateNull() {
                return this.IsNull(this.tableMyInstanceTable.ImageLastStoreDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageLastStoreDateNull() {
                this[this.tableMyInstanceTable.ImageLastStoreDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageUniqueSOPClassUIDNull() {
                return this.IsNull(this.tableMyInstanceTable.ImageUniqueSOPClassUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageUniqueSOPClassUIDNull() {
                this[this.tableMyInstanceTable.ImageUniqueSOPClassUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageRowsNull() {
                return this.IsNull(this.tableMyInstanceTable.ImageRowsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageRowsNull() {
                this[this.tableMyInstanceTable.ImageRowsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageColumnsNull() {
                return this.IsNull(this.tableMyInstanceTable.ImageColumnsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageColumnsNull() {
                this[this.tableMyInstanceTable.ImageColumnsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageBitsAllocatedNull() {
                return this.IsNull(this.tableMyInstanceTable.ImageBitsAllocatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageBitsAllocatedNull() {
                this[this.tableMyInstanceTable.ImageBitsAllocatedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MyPatientTableRow : global::System.Data.DataRow {
            
            private MyPatientTableDataTable tableMyPatientTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyPatientTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMyPatientTable = ((MyPatientTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PatientId {
                get {
                    return ((int)(this[this.tableMyPatientTable.PatientIdColumn]));
                }
                set {
                    this[this.tableMyPatientTable.PatientIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientIdentification {
                get {
                    return ((string)(this[this.tableMyPatientTable.PatientIdentificationColumn]));
                }
                set {
                    this[this.tableMyPatientTable.PatientIdentificationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientName {
                get {
                    return ((string)(this[this.tableMyPatientTable.PatientNameColumn]));
                }
                set {
                    this[this.tableMyPatientTable.PatientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PatientBirthday {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMyPatientTable.PatientBirthdayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientBirthday\' in table \'MyPatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyPatientTable.PatientBirthdayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientSex {
                get {
                    try {
                        return ((string)(this[this.tableMyPatientTable.PatientSexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientSex\' in table \'MyPatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyPatientTable.PatientSexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientComments {
                get {
                    try {
                        return ((string)(this[this.tableMyPatientTable.PatientCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientComments\' in table \'MyPatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyPatientTable.PatientCommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientBirthdayNull() {
                return this.IsNull(this.tableMyPatientTable.PatientBirthdayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientBirthdayNull() {
                this[this.tableMyPatientTable.PatientBirthdayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientSexNull() {
                return this.IsNull(this.tableMyPatientTable.PatientSexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientSexNull() {
                this[this.tableMyPatientTable.PatientSexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientCommentsNull() {
                return this.IsNull(this.tableMyPatientTable.PatientCommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientCommentsNull() {
                this[this.tableMyPatientTable.PatientCommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyStudyTableRow[] GetMyStudyTableRows() {
                if ((this.Table.ChildRelations["FK_Study_Patient"] == null)) {
                    return new MyStudyTableRow[0];
                }
                else {
                    return ((MyStudyTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Study_Patient"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MySeriesTableRow : global::System.Data.DataRow {
            
            private MySeriesTableDataTable tableMySeriesTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MySeriesTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMySeriesTable = ((MySeriesTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SeriesId {
                get {
                    return ((int)(this[this.tableMySeriesTable.SeriesIdColumn]));
                }
                set {
                    this[this.tableMySeriesTable.SeriesIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SeriesStudyId {
                get {
                    return ((int)(this[this.tableMySeriesTable.SeriesStudyIdColumn]));
                }
                set {
                    this[this.tableMySeriesTable.SeriesStudyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesSeriesInstanceUID {
                get {
                    return ((string)(this[this.tableMySeriesTable.SeriesSeriesInstanceUIDColumn]));
                }
                set {
                    this[this.tableMySeriesTable.SeriesSeriesInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesBodyPartExamined {
                get {
                    try {
                        return ((string)(this[this.tableMySeriesTable.SeriesBodyPartExaminedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesBodyPartExamined\' in table \'MySeriesTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableMySeriesTable.SeriesBodyPartExaminedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SeriesSeriesNumber {
                get {
                    try {
                        return ((int)(this[this.tableMySeriesTable.SeriesSeriesNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesSeriesNumber\' in table \'MySeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMySeriesTable.SeriesSeriesNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesSeriesDescription {
                get {
                    try {
                        return ((string)(this[this.tableMySeriesTable.SeriesSeriesDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesSeriesDescription\' in table \'MySeriesTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMySeriesTable.SeriesSeriesDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SeriesSeriesDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMySeriesTable.SeriesSeriesDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesSeriesDate\' in table \'MySeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMySeriesTable.SeriesSeriesDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesModality {
                get {
                    try {
                        return ((string)(this[this.tableMySeriesTable.SeriesModalityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesModality\' in table \'MySeriesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMySeriesTable.SeriesModalityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyStudyTableRow MyStudyTableRow {
                get {
                    return ((MyStudyTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_Series_Study"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Series_Study"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesBodyPartExaminedNull() {
                return this.IsNull(this.tableMySeriesTable.SeriesBodyPartExaminedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesBodyPartExaminedNull() {
                this[this.tableMySeriesTable.SeriesBodyPartExaminedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesSeriesNumberNull() {
                return this.IsNull(this.tableMySeriesTable.SeriesSeriesNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesSeriesNumberNull() {
                this[this.tableMySeriesTable.SeriesSeriesNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesSeriesDescriptionNull() {
                return this.IsNull(this.tableMySeriesTable.SeriesSeriesDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesSeriesDescriptionNull() {
                this[this.tableMySeriesTable.SeriesSeriesDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesSeriesDateNull() {
                return this.IsNull(this.tableMySeriesTable.SeriesSeriesDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesSeriesDateNull() {
                this[this.tableMySeriesTable.SeriesSeriesDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesModalityNull() {
                return this.IsNull(this.tableMySeriesTable.SeriesModalityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesModalityNull() {
                this[this.tableMySeriesTable.SeriesModalityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyInstanceTableRow[] GetMyInstanceTableRows() {
                if ((this.Table.ChildRelations["FK_DImage_Series"] == null)) {
                    return new MyInstanceTableRow[0];
                }
                else {
                    return ((MyInstanceTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_DImage_Series"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MyStudyTableRow : global::System.Data.DataRow {
            
            private MyStudyTableDataTable tableMyStudyTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyStudyTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMyStudyTable = ((MyStudyTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StudyId {
                get {
                    return ((int)(this[this.tableMyStudyTable.StudyIdColumn]));
                }
                set {
                    this[this.tableMyStudyTable.StudyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StudyPatientId {
                get {
                    return ((int)(this[this.tableMyStudyTable.StudyPatientIdColumn]));
                }
                set {
                    this[this.tableMyStudyTable.StudyPatientIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyStudyInstanceUID {
                get {
                    return ((string)(this[this.tableMyStudyTable.StudyStudyInstanceUIDColumn]));
                }
                set {
                    this[this.tableMyStudyTable.StudyStudyInstanceUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StudyStudyDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMyStudyTable.StudyStudyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyStudyDate\' in table \'MyStudyTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyStudyTable.StudyStudyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyAccessionNumber {
                get {
                    try {
                        return ((string)(this[this.tableMyStudyTable.StudyAccessionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyAccessionNumber\' in table \'MyStudyTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyStudyTable.StudyAccessionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyStudyDescription {
                get {
                    try {
                        return ((string)(this[this.tableMyStudyTable.StudyStudyDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyStudyDescription\' in table \'MyStudyTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyStudyTable.StudyStudyDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyReferringPhysiciansName {
                get {
                    try {
                        return ((string)(this[this.tableMyStudyTable.StudyReferringPhysiciansNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyReferringPhysiciansName\' in table \'MyStudyTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableMyStudyTable.StudyReferringPhysiciansNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudyStudyId {
                get {
                    try {
                        return ((string)(this[this.tableMyStudyTable.StudyStudyIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudyStudyId\' in table \'MyStudyTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyStudyTable.StudyStudyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyPatientTableRow MyPatientTableRow {
                get {
                    return ((MyPatientTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_Study_Patient"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Study_Patient"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyStudyDateNull() {
                return this.IsNull(this.tableMyStudyTable.StudyStudyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyStudyDateNull() {
                this[this.tableMyStudyTable.StudyStudyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyAccessionNumberNull() {
                return this.IsNull(this.tableMyStudyTable.StudyAccessionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyAccessionNumberNull() {
                this[this.tableMyStudyTable.StudyAccessionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyStudyDescriptionNull() {
                return this.IsNull(this.tableMyStudyTable.StudyStudyDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyStudyDescriptionNull() {
                this[this.tableMyStudyTable.StudyStudyDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyReferringPhysiciansNameNull() {
                return this.IsNull(this.tableMyStudyTable.StudyReferringPhysiciansNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyReferringPhysiciansNameNull() {
                this[this.tableMyStudyTable.StudyReferringPhysiciansNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudyStudyIdNull() {
                return this.IsNull(this.tableMyStudyTable.StudyStudyIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudyStudyIdNull() {
                this[this.tableMyStudyTable.StudyStudyIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MySeriesTableRow[] GetMySeriesTableRows() {
                if ((this.Table.ChildRelations["FK_Series_Study"] == null)) {
                    return new MySeriesTableRow[0];
                }
                else {
                    return ((MySeriesTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Series_Study"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MyInstanceTableRowChangeEvent : global::System.EventArgs {
            
            private MyInstanceTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyInstanceTableRowChangeEvent(MyInstanceTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyInstanceTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MyPatientTableRowChangeEvent : global::System.EventArgs {
            
            private MyPatientTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyPatientTableRowChangeEvent(MyPatientTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyPatientTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MySeriesTableRowChangeEvent : global::System.EventArgs {
            
            private MySeriesTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MySeriesTableRowChangeEvent(MySeriesTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MySeriesTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MyStudyTableRowChangeEvent : global::System.EventArgs {
            
            private MyStudyTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyStudyTableRowChangeEvent(MyStudyTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyStudyTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace My.Medical.Storage.DataAccessLayer.DataAccessLogic.BusinessEntity.MyDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MyInstanceTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MyInstanceTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MyInstanceTable";
            tableMapping.ColumnMappings.Add("ImageId", "ImageId");
            tableMapping.ColumnMappings.Add("ImageSeriesId", "ImageSeriesId");
            tableMapping.ColumnMappings.Add("SOPInstanceUID", "SOPInstanceUID");
            tableMapping.ColumnMappings.Add("ImageImageNumber", "ImageImageNumber");
            tableMapping.ColumnMappings.Add("ImageLastStoreDate", "ImageLastStoreDate");
            tableMapping.ColumnMappings.Add("ImageFilename", "ImageFilename");
            tableMapping.ColumnMappings.Add("ImageUniqueSOPClassUID", "ImageUniqueSOPClassUID");
            tableMapping.ColumnMappings.Add("ImageRows", "ImageRows");
            tableMapping.ColumnMappings.Add("ImageColumns", "ImageColumns");
            tableMapping.ColumnMappings.Add("ImageBitsAllocated", "ImageBitsAllocated");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[MyInstanceTable] WHERE (([ImageId] = @Original_ImageId) AND ([ImageSeriesId] = @Original_ImageSeriesId) AND ([SOPInstanceUID] = @Original_SOPInstanceUID) AND ([ImageImageNumber] = @Original_ImageImageNumber) AND ((@IsNull_ImageLastStoreDate = 1 AND [ImageLastStoreDate] IS NULL) OR ([ImageLastStoreDate] = @Original_ImageLastStoreDate)) AND ([ImageFilename] = @Original_ImageFilename) AND ((@IsNull_ImageUniqueSOPClassUID = 1 AND [ImageUniqueSOPClassUID] IS NULL) OR ([ImageUniqueSOPClassUID] = @Original_ImageUniqueSOPClassUID)) AND ((@IsNull_ImageRows = 1 AND [ImageRows] IS NULL) OR ([ImageRows] = @Original_ImageRows)) AND ((@IsNull_ImageColumns = 1 AND [ImageColumns] IS NULL) OR ([ImageColumns] = @Original_ImageColumns)) AND ((@IsNull_ImageBitsAllocated = 1 AND [ImageBitsAllocated] IS NULL) OR ([ImageBitsAllocated] = @Original_ImageBitsAllocated)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageSeriesId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageSeriesId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SOPInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SOPInstanceUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageImageNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageImageNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageLastStoreDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageLastStoreDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageLastStoreDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageLastStoreDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageFilename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageUniqueSOPClassUID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUniqueSOPClassUID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageUniqueSOPClassUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUniqueSOPClassUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageRows", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageRows", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageRows", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageRows", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageColumns", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageColumns", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageColumns", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageColumns", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageBitsAllocated", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageBitsAllocated", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageBitsAllocated", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageBitsAllocated", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[MyInstanceTable] ([ImageSeriesId], [SOPInstanceUID], [ImageImageNumber], [ImageLastStoreDate], [ImageFilename], [ImageUniqueSOPClassUID], [ImageRows], [ImageColumns], [ImageBitsAllocated]) VALUES (@ImageSeriesId, @SOPInstanceUID, @ImageImageNumber, @ImageLastStoreDate, @ImageFilename, @ImageUniqueSOPClassUID, @ImageRows, @ImageColumns, @ImageBitsAllocated);
SELECT ImageId, ImageSeriesId, SOPInstanceUID, ImageImageNumber, ImageLastStoreDate, ImageFilename, ImageUniqueSOPClassUID, ImageRows, ImageColumns, ImageBitsAllocated FROM MyInstanceTable WHERE (ImageId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageSeriesId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageSeriesId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SOPInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SOPInstanceUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageImageNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageImageNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageLastStoreDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageLastStoreDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageFilename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageUniqueSOPClassUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUniqueSOPClassUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageRows", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageRows", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageColumns", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageColumns", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageBitsAllocated", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageBitsAllocated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MyInstanceTable] SET [ImageSeriesId] = @ImageSeriesId, [SOPInstanceUID] = @SOPInstanceUID, [ImageImageNumber] = @ImageImageNumber, [ImageLastStoreDate] = @ImageLastStoreDate, [ImageFilename] = @ImageFilename, [ImageUniqueSOPClassUID] = @ImageUniqueSOPClassUID, [ImageRows] = @ImageRows, [ImageColumns] = @ImageColumns, [ImageBitsAllocated] = @ImageBitsAllocated WHERE (([ImageId] = @Original_ImageId) AND ([ImageSeriesId] = @Original_ImageSeriesId) AND ([SOPInstanceUID] = @Original_SOPInstanceUID) AND ([ImageImageNumber] = @Original_ImageImageNumber) AND ((@IsNull_ImageLastStoreDate = 1 AND [ImageLastStoreDate] IS NULL) OR ([ImageLastStoreDate] = @Original_ImageLastStoreDate)) AND ([ImageFilename] = @Original_ImageFilename) AND ((@IsNull_ImageUniqueSOPClassUID = 1 AND [ImageUniqueSOPClassUID] IS NULL) OR ([ImageUniqueSOPClassUID] = @Original_ImageUniqueSOPClassUID)) AND ((@IsNull_ImageRows = 1 AND [ImageRows] IS NULL) OR ([ImageRows] = @Original_ImageRows)) AND ((@IsNull_ImageColumns = 1 AND [ImageColumns] IS NULL) OR ([ImageColumns] = @Original_ImageColumns)) AND ((@IsNull_ImageBitsAllocated = 1 AND [ImageBitsAllocated] IS NULL) OR ([ImageBitsAllocated] = @Original_ImageBitsAllocated)));
SELECT ImageId, ImageSeriesId, SOPInstanceUID, ImageImageNumber, ImageLastStoreDate, ImageFilename, ImageUniqueSOPClassUID, ImageRows, ImageColumns, ImageBitsAllocated FROM MyInstanceTable WHERE (ImageId = @ImageId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageSeriesId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageSeriesId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SOPInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SOPInstanceUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageImageNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageImageNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageLastStoreDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageLastStoreDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageFilename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageUniqueSOPClassUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUniqueSOPClassUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageRows", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageRows", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageColumns", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageColumns", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageBitsAllocated", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageBitsAllocated", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageSeriesId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageSeriesId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SOPInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SOPInstanceUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageImageNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageImageNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageLastStoreDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageLastStoreDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageLastStoreDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageLastStoreDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageFilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageFilename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageUniqueSOPClassUID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUniqueSOPClassUID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageUniqueSOPClassUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUniqueSOPClassUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageRows", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageRows", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageRows", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageRows", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageColumns", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageColumns", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageColumns", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageColumns", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageBitsAllocated", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageBitsAllocated", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageBitsAllocated", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageBitsAllocated", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ImageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::My.Medical.Storage.DataAccessLayer.Properties.Settings.Default.MyDicomDbConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ImageId, ImageSeriesId, SOPInstanceUID, ImageImageNumber, ImageLastStoreDa" +
                "te, ImageFilename, ImageUniqueSOPClassUID, ImageRows, ImageColumns, ImageBitsAll" +
                "ocated FROM dbo.MyInstanceTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.MyInstanceTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.MyInstanceTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.MyInstanceTableDataTable dataTable = new MyDataSet.MyInstanceTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MyDataSet.MyInstanceTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MyDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MyInstanceTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_ImageId, int Original_ImageSeriesId, string Original_SOPInstanceUID, int Original_ImageImageNumber, global::System.Nullable<global::System.DateTime> Original_ImageLastStoreDate, string Original_ImageFilename, string Original_ImageUniqueSOPClassUID, global::System.Nullable<long> Original_ImageRows, global::System.Nullable<long> Original_ImageColumns, global::System.Nullable<long> Original_ImageBitsAllocated) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_ImageId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ImageSeriesId));
            if ((Original_SOPInstanceUID == null)) {
                throw new global::System.ArgumentNullException("Original_SOPInstanceUID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_SOPInstanceUID));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ImageImageNumber));
            if ((Original_ImageLastStoreDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_ImageLastStoreDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_ImageFilename == null)) {
                throw new global::System.ArgumentNullException("Original_ImageFilename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ImageFilename));
            }
            if ((Original_ImageUniqueSOPClassUID == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_ImageUniqueSOPClassUID));
            }
            if ((Original_ImageRows.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_ImageRows.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_ImageColumns.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_ImageColumns.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_ImageBitsAllocated.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_ImageBitsAllocated.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ImageSeriesId, string SOPInstanceUID, int ImageImageNumber, global::System.Nullable<global::System.DateTime> ImageLastStoreDate, string ImageFilename, string ImageUniqueSOPClassUID, global::System.Nullable<long> ImageRows, global::System.Nullable<long> ImageColumns, global::System.Nullable<long> ImageBitsAllocated) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ImageSeriesId));
            if ((SOPInstanceUID == null)) {
                throw new global::System.ArgumentNullException("SOPInstanceUID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SOPInstanceUID));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ImageImageNumber));
            if ((ImageLastStoreDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(ImageLastStoreDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ImageFilename == null)) {
                throw new global::System.ArgumentNullException("ImageFilename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ImageFilename));
            }
            if ((ImageUniqueSOPClassUID == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ImageUniqueSOPClassUID));
            }
            if ((ImageRows.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(ImageRows.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ImageColumns.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(ImageColumns.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ImageBitsAllocated.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((long)(ImageBitsAllocated.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ImageSeriesId, 
                    string SOPInstanceUID, 
                    int ImageImageNumber, 
                    global::System.Nullable<global::System.DateTime> ImageLastStoreDate, 
                    string ImageFilename, 
                    string ImageUniqueSOPClassUID, 
                    global::System.Nullable<long> ImageRows, 
                    global::System.Nullable<long> ImageColumns, 
                    global::System.Nullable<long> ImageBitsAllocated, 
                    long Original_ImageId, 
                    int Original_ImageSeriesId, 
                    string Original_SOPInstanceUID, 
                    int Original_ImageImageNumber, 
                    global::System.Nullable<global::System.DateTime> Original_ImageLastStoreDate, 
                    string Original_ImageFilename, 
                    string Original_ImageUniqueSOPClassUID, 
                    global::System.Nullable<long> Original_ImageRows, 
                    global::System.Nullable<long> Original_ImageColumns, 
                    global::System.Nullable<long> Original_ImageBitsAllocated, 
                    long ImageId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ImageSeriesId));
            if ((SOPInstanceUID == null)) {
                throw new global::System.ArgumentNullException("SOPInstanceUID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SOPInstanceUID));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ImageImageNumber));
            if ((ImageLastStoreDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(ImageLastStoreDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ImageFilename == null)) {
                throw new global::System.ArgumentNullException("ImageFilename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ImageFilename));
            }
            if ((ImageUniqueSOPClassUID == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ImageUniqueSOPClassUID));
            }
            if ((ImageRows.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(ImageRows.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ImageColumns.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(ImageColumns.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ImageBitsAllocated.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(ImageBitsAllocated.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_ImageId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ImageSeriesId));
            if ((Original_SOPInstanceUID == null)) {
                throw new global::System.ArgumentNullException("Original_SOPInstanceUID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_SOPInstanceUID));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_ImageImageNumber));
            if ((Original_ImageLastStoreDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_ImageLastStoreDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ImageFilename == null)) {
                throw new global::System.ArgumentNullException("Original_ImageFilename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ImageFilename));
            }
            if ((Original_ImageUniqueSOPClassUID == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_ImageUniqueSOPClassUID));
            }
            if ((Original_ImageRows.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(Original_ImageRows.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_ImageColumns.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(Original_ImageColumns.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_ImageBitsAllocated.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_ImageBitsAllocated.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(ImageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ImageSeriesId, 
                    string SOPInstanceUID, 
                    int ImageImageNumber, 
                    global::System.Nullable<global::System.DateTime> ImageLastStoreDate, 
                    string ImageFilename, 
                    string ImageUniqueSOPClassUID, 
                    global::System.Nullable<long> ImageRows, 
                    global::System.Nullable<long> ImageColumns, 
                    global::System.Nullable<long> ImageBitsAllocated, 
                    long Original_ImageId, 
                    int Original_ImageSeriesId, 
                    string Original_SOPInstanceUID, 
                    int Original_ImageImageNumber, 
                    global::System.Nullable<global::System.DateTime> Original_ImageLastStoreDate, 
                    string Original_ImageFilename, 
                    string Original_ImageUniqueSOPClassUID, 
                    global::System.Nullable<long> Original_ImageRows, 
                    global::System.Nullable<long> Original_ImageColumns, 
                    global::System.Nullable<long> Original_ImageBitsAllocated) {
            return this.Update(ImageSeriesId, SOPInstanceUID, ImageImageNumber, ImageLastStoreDate, ImageFilename, ImageUniqueSOPClassUID, ImageRows, ImageColumns, ImageBitsAllocated, Original_ImageId, Original_ImageSeriesId, Original_SOPInstanceUID, Original_ImageImageNumber, Original_ImageLastStoreDate, Original_ImageFilename, Original_ImageUniqueSOPClassUID, Original_ImageRows, Original_ImageColumns, Original_ImageBitsAllocated, Original_ImageId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MyPatientTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MyPatientTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MyPatientTable";
            tableMapping.ColumnMappings.Add("PatientId", "PatientId");
            tableMapping.ColumnMappings.Add("PatientIdentification", "PatientIdentification");
            tableMapping.ColumnMappings.Add("PatientName", "PatientName");
            tableMapping.ColumnMappings.Add("PatientBirthday", "PatientBirthday");
            tableMapping.ColumnMappings.Add("PatientSex", "PatientSex");
            tableMapping.ColumnMappings.Add("PatientComments", "PatientComments");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[MyPatientTable] WHERE (([PatientId] = @Original_PatientId) AND ([PatientIdentification] = @Original_PatientIdentification) AND ((@IsNull_PatientBirthday = 1 AND [PatientBirthday] IS NULL) OR ([PatientBirthday] = @Original_PatientBirthday)) AND ((@IsNull_PatientSex = 1 AND [PatientSex] IS NULL) OR ([PatientSex] = @Original_PatientSex)) AND ((@IsNull_PatientComments = 1 AND [PatientComments] IS NULL) OR ([PatientComments] = @Original_PatientComments)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientIdentification", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientIdentification", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PatientBirthday", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientBirthday", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientBirthday", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientBirthday", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PatientSex", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientSex", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientSex", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientSex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PatientComments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientComments", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientComments", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientComments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[MyPatientTable] ([PatientIdentification], [PatientName], [PatientBirthday], [PatientSex], [PatientComments]) VALUES (@PatientIdentification, @PatientName, @PatientBirthday, @PatientSex, @PatientComments);
SELECT PatientId, PatientIdentification, PatientName, PatientBirthday, PatientSex, PatientComments FROM MyPatientTable WHERE (PatientId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientIdentification", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientIdentification", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientBirthday", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientBirthday", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientSex", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientSex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientComments", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientComments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MyPatientTable] SET [PatientIdentification] = @PatientIdentification, [PatientName] = @PatientName, [PatientBirthday] = @PatientBirthday, [PatientSex] = @PatientSex, [PatientComments] = @PatientComments WHERE (([PatientId] = @Original_PatientId) AND ([PatientIdentification] = @Original_PatientIdentification) AND ((@IsNull_PatientBirthday = 1 AND [PatientBirthday] IS NULL) OR ([PatientBirthday] = @Original_PatientBirthday)) AND ((@IsNull_PatientSex = 1 AND [PatientSex] IS NULL) OR ([PatientSex] = @Original_PatientSex)) AND ((@IsNull_PatientComments = 1 AND [PatientComments] IS NULL) OR ([PatientComments] = @Original_PatientComments)));
SELECT PatientId, PatientIdentification, PatientName, PatientBirthday, PatientSex, PatientComments FROM MyPatientTable WHERE (PatientId = @PatientId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientIdentification", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientIdentification", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientBirthday", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientBirthday", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientSex", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientSex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientComments", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientComments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientIdentification", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientIdentification", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PatientBirthday", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientBirthday", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientBirthday", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientBirthday", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PatientSex", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientSex", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientSex", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientSex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PatientComments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientComments", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PatientComments", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PatientComments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PatientId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PatientId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::My.Medical.Storage.DataAccessLayer.Properties.Settings.Default.MyDicomDbConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PatientId, PatientIdentification, PatientName, PatientBirthday, PatientSex" +
                ", PatientComments FROM dbo.MyPatientTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.MyPatientTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.MyPatientTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.MyPatientTableDataTable dataTable = new MyDataSet.MyPatientTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MyDataSet.MyPatientTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MyDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MyPatientTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_PatientId, string Original_PatientIdentification, global::System.Nullable<global::System.DateTime> Original_PatientBirthday, string Original_PatientSex, string Original_PatientComments) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_PatientId));
            if ((Original_PatientIdentification == null)) {
                throw new global::System.ArgumentNullException("Original_PatientIdentification");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_PatientIdentification));
            }
            if ((Original_PatientBirthday.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_PatientBirthday.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_PatientSex == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_PatientSex));
            }
            if ((Original_PatientComments == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_PatientComments));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PatientIdentification, string PatientName, global::System.Nullable<global::System.DateTime> PatientBirthday, string PatientSex, string PatientComments) {
            if ((PatientIdentification == null)) {
                throw new global::System.ArgumentNullException("PatientIdentification");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PatientIdentification));
            }
            if ((PatientName == null)) {
                throw new global::System.ArgumentNullException("PatientName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PatientName));
            }
            if ((PatientBirthday.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(PatientBirthday.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PatientSex == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(PatientSex));
            }
            if ((PatientComments == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PatientComments));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PatientIdentification, string PatientName, global::System.Nullable<global::System.DateTime> PatientBirthday, string PatientSex, string PatientComments, int Original_PatientId, string Original_PatientIdentification, global::System.Nullable<global::System.DateTime> Original_PatientBirthday, string Original_PatientSex, string Original_PatientComments, int PatientId) {
            if ((PatientIdentification == null)) {
                throw new global::System.ArgumentNullException("PatientIdentification");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PatientIdentification));
            }
            if ((PatientName == null)) {
                throw new global::System.ArgumentNullException("PatientName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PatientName));
            }
            if ((PatientBirthday.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(PatientBirthday.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PatientSex == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(PatientSex));
            }
            if ((PatientComments == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PatientComments));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_PatientId));
            if ((Original_PatientIdentification == null)) {
                throw new global::System.ArgumentNullException("Original_PatientIdentification");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_PatientIdentification));
            }
            if ((Original_PatientBirthday.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_PatientBirthday.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_PatientSex == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_PatientSex));
            }
            if ((Original_PatientComments == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_PatientComments));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(PatientId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PatientIdentification, string PatientName, global::System.Nullable<global::System.DateTime> PatientBirthday, string PatientSex, string PatientComments, int Original_PatientId, string Original_PatientIdentification, global::System.Nullable<global::System.DateTime> Original_PatientBirthday, string Original_PatientSex, string Original_PatientComments) {
            return this.Update(PatientIdentification, PatientName, PatientBirthday, PatientSex, PatientComments, Original_PatientId, Original_PatientIdentification, Original_PatientBirthday, Original_PatientSex, Original_PatientComments, Original_PatientId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MySeriesTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MySeriesTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MySeriesTable";
            tableMapping.ColumnMappings.Add("SeriesId", "SeriesId");
            tableMapping.ColumnMappings.Add("SeriesStudyId", "SeriesStudyId");
            tableMapping.ColumnMappings.Add("SeriesSeriesInstanceUID", "SeriesSeriesInstanceUID");
            tableMapping.ColumnMappings.Add("SeriesBodyPartExamined", "SeriesBodyPartExamined");
            tableMapping.ColumnMappings.Add("SeriesSeriesNumber", "SeriesSeriesNumber");
            tableMapping.ColumnMappings.Add("SeriesSeriesDescription", "SeriesSeriesDescription");
            tableMapping.ColumnMappings.Add("SeriesSeriesDate", "SeriesSeriesDate");
            tableMapping.ColumnMappings.Add("SeriesModality", "SeriesModality");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[MySeriesTable] WHERE (([SeriesId] = @Original_SeriesId) AND ([SeriesStudyId] = @Original_SeriesStudyId) AND ([SeriesSeriesInstanceUID] = @Original_SeriesSeriesInstanceUID) AND ((@IsNull_SeriesBodyPartExamined = 1 AND [SeriesBodyPartExamined] IS NULL) OR ([SeriesBodyPartExamined] = @Original_SeriesBodyPartExamined)) AND ((@IsNull_SeriesSeriesNumber = 1 AND [SeriesSeriesNumber] IS NULL) OR ([SeriesSeriesNumber] = @Original_SeriesSeriesNumber)) AND ((@IsNull_SeriesSeriesDescription = 1 AND [SeriesSeriesDescription] IS NULL) OR ([SeriesSeriesDescription] = @Original_SeriesSeriesDescription)) AND ((@IsNull_SeriesSeriesDate = 1 AND [SeriesSeriesDate] IS NULL) OR ([SeriesSeriesDate] = @Original_SeriesSeriesDate)) AND ((@IsNull_SeriesModality = 1 AND [SeriesModality] IS NULL) OR ([SeriesModality] = @Original_SeriesModality)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesStudyId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesStudyId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesSeriesInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesInstanceUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesBodyPartExamined", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesBodyPartExamined", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesBodyPartExamined", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesBodyPartExamined", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesSeriesNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesSeriesNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesSeriesDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesSeriesDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesSeriesDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesSeriesDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesModality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesModality", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesModality", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesModality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[MySeriesTable] ([SeriesStudyId], [SeriesSeriesInstanceUID], [SeriesBodyPartExamined], [SeriesSeriesNumber], [SeriesSeriesDescription], [SeriesSeriesDate], [SeriesModality]) VALUES (@SeriesStudyId, @SeriesSeriesInstanceUID, @SeriesBodyPartExamined, @SeriesSeriesNumber, @SeriesSeriesDescription, @SeriesSeriesDate, @SeriesModality);
SELECT SeriesId, SeriesStudyId, SeriesSeriesInstanceUID, SeriesBodyPartExamined, SeriesSeriesNumber, SeriesSeriesDescription, SeriesSeriesDate, SeriesModality FROM MySeriesTable WHERE (SeriesId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesStudyId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesStudyId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesSeriesInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesInstanceUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesBodyPartExamined", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesBodyPartExamined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesSeriesNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesSeriesDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesSeriesDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesModality", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesModality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MySeriesTable] SET [SeriesStudyId] = @SeriesStudyId, [SeriesSeriesInstanceUID] = @SeriesSeriesInstanceUID, [SeriesBodyPartExamined] = @SeriesBodyPartExamined, [SeriesSeriesNumber] = @SeriesSeriesNumber, [SeriesSeriesDescription] = @SeriesSeriesDescription, [SeriesSeriesDate] = @SeriesSeriesDate, [SeriesModality] = @SeriesModality WHERE (([SeriesId] = @Original_SeriesId) AND ([SeriesStudyId] = @Original_SeriesStudyId) AND ([SeriesSeriesInstanceUID] = @Original_SeriesSeriesInstanceUID) AND ((@IsNull_SeriesBodyPartExamined = 1 AND [SeriesBodyPartExamined] IS NULL) OR ([SeriesBodyPartExamined] = @Original_SeriesBodyPartExamined)) AND ((@IsNull_SeriesSeriesNumber = 1 AND [SeriesSeriesNumber] IS NULL) OR ([SeriesSeriesNumber] = @Original_SeriesSeriesNumber)) AND ((@IsNull_SeriesSeriesDescription = 1 AND [SeriesSeriesDescription] IS NULL) OR ([SeriesSeriesDescription] = @Original_SeriesSeriesDescription)) AND ((@IsNull_SeriesSeriesDate = 1 AND [SeriesSeriesDate] IS NULL) OR ([SeriesSeriesDate] = @Original_SeriesSeriesDate)) AND ((@IsNull_SeriesModality = 1 AND [SeriesModality] IS NULL) OR ([SeriesModality] = @Original_SeriesModality)));
SELECT SeriesId, SeriesStudyId, SeriesSeriesInstanceUID, SeriesBodyPartExamined, SeriesSeriesNumber, SeriesSeriesDescription, SeriesSeriesDate, SeriesModality FROM MySeriesTable WHERE (SeriesId = @SeriesId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesStudyId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesStudyId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesSeriesInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesInstanceUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesBodyPartExamined", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesBodyPartExamined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesSeriesNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesSeriesDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesSeriesDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesModality", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesModality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesStudyId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesStudyId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesSeriesInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesInstanceUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesBodyPartExamined", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesBodyPartExamined", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesBodyPartExamined", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesBodyPartExamined", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesSeriesNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesSeriesNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesSeriesDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesSeriesDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesSeriesDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesSeriesDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesSeriesDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SeriesModality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesModality", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SeriesModality", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesModality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SeriesId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "SeriesId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::My.Medical.Storage.DataAccessLayer.Properties.Settings.Default.MyDicomDbConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SeriesId, SeriesStudyId, SeriesSeriesInstanceUID, SeriesBodyPartExamined, " +
                "SeriesSeriesNumber, SeriesSeriesDescription, SeriesSeriesDate, SeriesModality FR" +
                "OM dbo.MySeriesTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.MySeriesTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.MySeriesTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.MySeriesTableDataTable dataTable = new MyDataSet.MySeriesTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MyDataSet.MySeriesTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MyDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MySeriesTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SeriesId, int Original_SeriesStudyId, string Original_SeriesSeriesInstanceUID, string Original_SeriesBodyPartExamined, global::System.Nullable<int> Original_SeriesSeriesNumber, string Original_SeriesSeriesDescription, global::System.Nullable<global::System.DateTime> Original_SeriesSeriesDate, string Original_SeriesModality) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SeriesId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_SeriesStudyId));
            if ((Original_SeriesSeriesInstanceUID == null)) {
                throw new global::System.ArgumentNullException("Original_SeriesSeriesInstanceUID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_SeriesSeriesInstanceUID));
            }
            if ((Original_SeriesBodyPartExamined == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_SeriesBodyPartExamined));
            }
            if ((Original_SeriesSeriesNumber.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_SeriesSeriesNumber.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_SeriesSeriesDescription == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_SeriesSeriesDescription));
            }
            if ((Original_SeriesSeriesDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_SeriesSeriesDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_SeriesModality == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_SeriesModality));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SeriesStudyId, string SeriesSeriesInstanceUID, string SeriesBodyPartExamined, global::System.Nullable<int> SeriesSeriesNumber, string SeriesSeriesDescription, global::System.Nullable<global::System.DateTime> SeriesSeriesDate, string SeriesModality) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SeriesStudyId));
            if ((SeriesSeriesInstanceUID == null)) {
                throw new global::System.ArgumentNullException("SeriesSeriesInstanceUID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SeriesSeriesInstanceUID));
            }
            if ((SeriesBodyPartExamined == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SeriesBodyPartExamined));
            }
            if ((SeriesSeriesNumber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(SeriesSeriesNumber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SeriesSeriesDescription == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SeriesSeriesDescription));
            }
            if ((SeriesSeriesDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(SeriesSeriesDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SeriesModality == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SeriesModality));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int SeriesStudyId, 
                    string SeriesSeriesInstanceUID, 
                    string SeriesBodyPartExamined, 
                    global::System.Nullable<int> SeriesSeriesNumber, 
                    string SeriesSeriesDescription, 
                    global::System.Nullable<global::System.DateTime> SeriesSeriesDate, 
                    string SeriesModality, 
                    int Original_SeriesId, 
                    int Original_SeriesStudyId, 
                    string Original_SeriesSeriesInstanceUID, 
                    string Original_SeriesBodyPartExamined, 
                    global::System.Nullable<int> Original_SeriesSeriesNumber, 
                    string Original_SeriesSeriesDescription, 
                    global::System.Nullable<global::System.DateTime> Original_SeriesSeriesDate, 
                    string Original_SeriesModality, 
                    int SeriesId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SeriesStudyId));
            if ((SeriesSeriesInstanceUID == null)) {
                throw new global::System.ArgumentNullException("SeriesSeriesInstanceUID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SeriesSeriesInstanceUID));
            }
            if ((SeriesBodyPartExamined == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SeriesBodyPartExamined));
            }
            if ((SeriesSeriesNumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(SeriesSeriesNumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SeriesSeriesDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SeriesSeriesDescription));
            }
            if ((SeriesSeriesDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(SeriesSeriesDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SeriesModality == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SeriesModality));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_SeriesId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_SeriesStudyId));
            if ((Original_SeriesSeriesInstanceUID == null)) {
                throw new global::System.ArgumentNullException("Original_SeriesSeriesInstanceUID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_SeriesSeriesInstanceUID));
            }
            if ((Original_SeriesBodyPartExamined == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_SeriesBodyPartExamined));
            }
            if ((Original_SeriesSeriesNumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_SeriesSeriesNumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_SeriesSeriesDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_SeriesSeriesDescription));
            }
            if ((Original_SeriesSeriesDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_SeriesSeriesDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_SeriesModality == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_SeriesModality));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(SeriesId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SeriesStudyId, string SeriesSeriesInstanceUID, string SeriesBodyPartExamined, global::System.Nullable<int> SeriesSeriesNumber, string SeriesSeriesDescription, global::System.Nullable<global::System.DateTime> SeriesSeriesDate, string SeriesModality, int Original_SeriesId, int Original_SeriesStudyId, string Original_SeriesSeriesInstanceUID, string Original_SeriesBodyPartExamined, global::System.Nullable<int> Original_SeriesSeriesNumber, string Original_SeriesSeriesDescription, global::System.Nullable<global::System.DateTime> Original_SeriesSeriesDate, string Original_SeriesModality) {
            return this.Update(SeriesStudyId, SeriesSeriesInstanceUID, SeriesBodyPartExamined, SeriesSeriesNumber, SeriesSeriesDescription, SeriesSeriesDate, SeriesModality, Original_SeriesId, Original_SeriesStudyId, Original_SeriesSeriesInstanceUID, Original_SeriesBodyPartExamined, Original_SeriesSeriesNumber, Original_SeriesSeriesDescription, Original_SeriesSeriesDate, Original_SeriesModality, Original_SeriesId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MyStudyTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MyStudyTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MyStudyTable";
            tableMapping.ColumnMappings.Add("StudyId", "StudyId");
            tableMapping.ColumnMappings.Add("StudyPatientId", "StudyPatientId");
            tableMapping.ColumnMappings.Add("StudyStudyInstanceUID", "StudyStudyInstanceUID");
            tableMapping.ColumnMappings.Add("StudyStudyDate", "StudyStudyDate");
            tableMapping.ColumnMappings.Add("StudyAccessionNumber", "StudyAccessionNumber");
            tableMapping.ColumnMappings.Add("StudyStudyDescription", "StudyStudyDescription");
            tableMapping.ColumnMappings.Add("StudyReferringPhysiciansName", "StudyReferringPhysiciansName");
            tableMapping.ColumnMappings.Add("StudyStudyId", "StudyStudyId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[MyStudyTable] WHERE (([StudyId] = @Original_StudyId) AND ([StudyPatientId] = @Original_StudyPatientId) AND ([StudyStudyInstanceUID] = @Original_StudyStudyInstanceUID) AND ((@IsNull_StudyStudyDate = 1 AND [StudyStudyDate] IS NULL) OR ([StudyStudyDate] = @Original_StudyStudyDate)) AND ((@IsNull_StudyAccessionNumber = 1 AND [StudyAccessionNumber] IS NULL) OR ([StudyAccessionNumber] = @Original_StudyAccessionNumber)) AND ((@IsNull_StudyStudyDescription = 1 AND [StudyStudyDescription] IS NULL) OR ([StudyStudyDescription] = @Original_StudyStudyDescription)) AND ((@IsNull_StudyReferringPhysiciansName = 1 AND [StudyReferringPhysiciansName] IS NULL) OR ([StudyReferringPhysiciansName] = @Original_StudyReferringPhysiciansName)) AND ((@IsNull_StudyStudyId = 1 AND [StudyStudyId] IS NULL) OR ([StudyStudyId] = @Original_StudyStudyId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyPatientId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyPatientId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyStudyInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyInstanceUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyStudyDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyStudyDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyAccessionNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyAccessionNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyAccessionNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyAccessionNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyStudyDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyStudyDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyReferringPhysiciansName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyReferringPhysiciansName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyReferringPhysiciansName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyReferringPhysiciansName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyStudyId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyStudyId", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[MyStudyTable] ([StudyPatientId], [StudyStudyInstanceUID], [StudyStudyDate], [StudyAccessionNumber], [StudyStudyDescription], [StudyReferringPhysiciansName], [StudyStudyId]) VALUES (@StudyPatientId, @StudyStudyInstanceUID, @StudyStudyDate, @StudyAccessionNumber, @StudyStudyDescription, @StudyReferringPhysiciansName, @StudyStudyId);
SELECT StudyId, StudyPatientId, StudyStudyInstanceUID, StudyStudyDate, StudyAccessionNumber, StudyStudyDescription, StudyReferringPhysiciansName, StudyStudyId FROM MyStudyTable WHERE (StudyId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyPatientId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyPatientId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyStudyInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyInstanceUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyStudyDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyAccessionNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyAccessionNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyStudyDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyReferringPhysiciansName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyReferringPhysiciansName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyStudyId", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MyStudyTable] SET [StudyPatientId] = @StudyPatientId, [StudyStudyInstanceUID] = @StudyStudyInstanceUID, [StudyStudyDate] = @StudyStudyDate, [StudyAccessionNumber] = @StudyAccessionNumber, [StudyStudyDescription] = @StudyStudyDescription, [StudyReferringPhysiciansName] = @StudyReferringPhysiciansName, [StudyStudyId] = @StudyStudyId WHERE (([StudyId] = @Original_StudyId) AND ([StudyPatientId] = @Original_StudyPatientId) AND ([StudyStudyInstanceUID] = @Original_StudyStudyInstanceUID) AND ((@IsNull_StudyStudyDate = 1 AND [StudyStudyDate] IS NULL) OR ([StudyStudyDate] = @Original_StudyStudyDate)) AND ((@IsNull_StudyAccessionNumber = 1 AND [StudyAccessionNumber] IS NULL) OR ([StudyAccessionNumber] = @Original_StudyAccessionNumber)) AND ((@IsNull_StudyStudyDescription = 1 AND [StudyStudyDescription] IS NULL) OR ([StudyStudyDescription] = @Original_StudyStudyDescription)) AND ((@IsNull_StudyReferringPhysiciansName = 1 AND [StudyReferringPhysiciansName] IS NULL) OR ([StudyReferringPhysiciansName] = @Original_StudyReferringPhysiciansName)) AND ((@IsNull_StudyStudyId = 1 AND [StudyStudyId] IS NULL) OR ([StudyStudyId] = @Original_StudyStudyId)));
SELECT StudyId, StudyPatientId, StudyStudyInstanceUID, StudyStudyDate, StudyAccessionNumber, StudyStudyDescription, StudyReferringPhysiciansName, StudyStudyId FROM MyStudyTable WHERE (StudyId = @StudyId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyPatientId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyPatientId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyStudyInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyInstanceUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyStudyDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyAccessionNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyAccessionNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyStudyDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyReferringPhysiciansName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyReferringPhysiciansName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyStudyId", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyPatientId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyPatientId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyStudyInstanceUID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyInstanceUID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyStudyDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyStudyDate", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyAccessionNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyAccessionNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyAccessionNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyAccessionNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyStudyDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyStudyDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyReferringPhysiciansName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyReferringPhysiciansName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyReferringPhysiciansName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyReferringPhysiciansName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StudyStudyId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudyStudyId", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudyStudyId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudyId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "StudyId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::My.Medical.Storage.DataAccessLayer.Properties.Settings.Default.MyDicomDbConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT StudyId, StudyPatientId, StudyStudyInstanceUID, StudyStudyDate, StudyAcces" +
                "sionNumber, StudyStudyDescription, StudyReferringPhysiciansName, StudyStudyId FR" +
                "OM dbo.MyStudyTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MyDataSet.MyStudyTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MyDataSet.MyStudyTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MyDataSet.MyStudyTableDataTable dataTable = new MyDataSet.MyStudyTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MyDataSet.MyStudyTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MyDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MyStudyTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_StudyId, int Original_StudyPatientId, string Original_StudyStudyInstanceUID, global::System.Nullable<global::System.DateTime> Original_StudyStudyDate, string Original_StudyAccessionNumber, string Original_StudyStudyDescription, string Original_StudyReferringPhysiciansName, string Original_StudyStudyId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_StudyId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_StudyPatientId));
            if ((Original_StudyStudyInstanceUID == null)) {
                throw new global::System.ArgumentNullException("Original_StudyStudyInstanceUID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_StudyStudyInstanceUID));
            }
            if ((Original_StudyStudyDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_StudyStudyDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_StudyAccessionNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_StudyAccessionNumber));
            }
            if ((Original_StudyStudyDescription == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_StudyStudyDescription));
            }
            if ((Original_StudyReferringPhysiciansName == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_StudyReferringPhysiciansName));
            }
            if ((Original_StudyStudyId == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_StudyStudyId));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int StudyPatientId, string StudyStudyInstanceUID, global::System.Nullable<global::System.DateTime> StudyStudyDate, string StudyAccessionNumber, string StudyStudyDescription, string StudyReferringPhysiciansName, string StudyStudyId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(StudyPatientId));
            if ((StudyStudyInstanceUID == null)) {
                throw new global::System.ArgumentNullException("StudyStudyInstanceUID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(StudyStudyInstanceUID));
            }
            if ((StudyStudyDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(StudyStudyDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((StudyAccessionNumber == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(StudyAccessionNumber));
            }
            if ((StudyStudyDescription == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(StudyStudyDescription));
            }
            if ((StudyReferringPhysiciansName == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(StudyReferringPhysiciansName));
            }
            if ((StudyStudyId == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(StudyStudyId));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int StudyPatientId, 
                    string StudyStudyInstanceUID, 
                    global::System.Nullable<global::System.DateTime> StudyStudyDate, 
                    string StudyAccessionNumber, 
                    string StudyStudyDescription, 
                    string StudyReferringPhysiciansName, 
                    string StudyStudyId, 
                    int Original_StudyId, 
                    int Original_StudyPatientId, 
                    string Original_StudyStudyInstanceUID, 
                    global::System.Nullable<global::System.DateTime> Original_StudyStudyDate, 
                    string Original_StudyAccessionNumber, 
                    string Original_StudyStudyDescription, 
                    string Original_StudyReferringPhysiciansName, 
                    string Original_StudyStudyId, 
                    int StudyId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(StudyPatientId));
            if ((StudyStudyInstanceUID == null)) {
                throw new global::System.ArgumentNullException("StudyStudyInstanceUID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(StudyStudyInstanceUID));
            }
            if ((StudyStudyDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(StudyStudyDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((StudyAccessionNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(StudyAccessionNumber));
            }
            if ((StudyStudyDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(StudyStudyDescription));
            }
            if ((StudyReferringPhysiciansName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(StudyReferringPhysiciansName));
            }
            if ((StudyStudyId == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(StudyStudyId));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_StudyId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_StudyPatientId));
            if ((Original_StudyStudyInstanceUID == null)) {
                throw new global::System.ArgumentNullException("Original_StudyStudyInstanceUID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_StudyStudyInstanceUID));
            }
            if ((Original_StudyStudyDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_StudyStudyDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_StudyAccessionNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_StudyAccessionNumber));
            }
            if ((Original_StudyStudyDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_StudyStudyDescription));
            }
            if ((Original_StudyReferringPhysiciansName == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_StudyReferringPhysiciansName));
            }
            if ((Original_StudyStudyId == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_StudyStudyId));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(StudyId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int StudyPatientId, string StudyStudyInstanceUID, global::System.Nullable<global::System.DateTime> StudyStudyDate, string StudyAccessionNumber, string StudyStudyDescription, string StudyReferringPhysiciansName, string StudyStudyId, int Original_StudyId, int Original_StudyPatientId, string Original_StudyStudyInstanceUID, global::System.Nullable<global::System.DateTime> Original_StudyStudyDate, string Original_StudyAccessionNumber, string Original_StudyStudyDescription, string Original_StudyReferringPhysiciansName, string Original_StudyStudyId) {
            return this.Update(StudyPatientId, StudyStudyInstanceUID, StudyStudyDate, StudyAccessionNumber, StudyStudyDescription, StudyReferringPhysiciansName, StudyStudyId, Original_StudyId, Original_StudyPatientId, Original_StudyStudyInstanceUID, Original_StudyStudyDate, Original_StudyAccessionNumber, Original_StudyStudyDescription, Original_StudyReferringPhysiciansName, Original_StudyStudyId, Original_StudyId);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private MyInstanceTableTableAdapter _myInstanceTableTableAdapter;
        
        private MyPatientTableTableAdapter _myPatientTableTableAdapter;
        
        private MySeriesTableTableAdapter _mySeriesTableTableAdapter;
        
        private MyStudyTableTableAdapter _myStudyTableTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MyInstanceTableTableAdapter MyInstanceTableTableAdapter {
            get {
                return this._myInstanceTableTableAdapter;
            }
            set {
                this._myInstanceTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MyPatientTableTableAdapter MyPatientTableTableAdapter {
            get {
                return this._myPatientTableTableAdapter;
            }
            set {
                this._myPatientTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MySeriesTableTableAdapter MySeriesTableTableAdapter {
            get {
                return this._mySeriesTableTableAdapter;
            }
            set {
                this._mySeriesTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MyStudyTableTableAdapter MyStudyTableTableAdapter {
            get {
                return this._myStudyTableTableAdapter;
            }
            set {
                this._myStudyTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._myInstanceTableTableAdapter != null) 
                            && (this._myInstanceTableTableAdapter.Connection != null))) {
                    return this._myInstanceTableTableAdapter.Connection;
                }
                if (((this._myPatientTableTableAdapter != null) 
                            && (this._myPatientTableTableAdapter.Connection != null))) {
                    return this._myPatientTableTableAdapter.Connection;
                }
                if (((this._mySeriesTableTableAdapter != null) 
                            && (this._mySeriesTableTableAdapter.Connection != null))) {
                    return this._mySeriesTableTableAdapter.Connection;
                }
                if (((this._myStudyTableTableAdapter != null) 
                            && (this._myStudyTableTableAdapter.Connection != null))) {
                    return this._myStudyTableTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._myInstanceTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._myPatientTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mySeriesTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._myStudyTableTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(MyDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._myPatientTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MyPatientTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._myPatientTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._myStudyTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MyStudyTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._myStudyTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mySeriesTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MySeriesTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mySeriesTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._myInstanceTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MyInstanceTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._myInstanceTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(MyDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._myPatientTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MyPatientTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._myPatientTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._myStudyTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MyStudyTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._myStudyTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mySeriesTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MySeriesTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mySeriesTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._myInstanceTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MyInstanceTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._myInstanceTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(MyDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._myInstanceTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MyInstanceTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._myInstanceTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mySeriesTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MySeriesTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mySeriesTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._myStudyTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MyStudyTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._myStudyTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._myPatientTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MyPatientTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._myPatientTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(MyDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._myInstanceTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._myInstanceTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._myPatientTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._myPatientTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mySeriesTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mySeriesTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._myStudyTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._myStudyTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._myInstanceTableTableAdapter != null)) {
                    revertConnections.Add(this._myInstanceTableTableAdapter, this._myInstanceTableTableAdapter.Connection);
                    this._myInstanceTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._myInstanceTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._myInstanceTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._myInstanceTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._myInstanceTableTableAdapter.Adapter);
                    }
                }
                if ((this._myPatientTableTableAdapter != null)) {
                    revertConnections.Add(this._myPatientTableTableAdapter, this._myPatientTableTableAdapter.Connection);
                    this._myPatientTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._myPatientTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._myPatientTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._myPatientTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._myPatientTableTableAdapter.Adapter);
                    }
                }
                if ((this._mySeriesTableTableAdapter != null)) {
                    revertConnections.Add(this._mySeriesTableTableAdapter, this._mySeriesTableTableAdapter.Connection);
                    this._mySeriesTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mySeriesTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mySeriesTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mySeriesTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mySeriesTableTableAdapter.Adapter);
                    }
                }
                if ((this._myStudyTableTableAdapter != null)) {
                    revertConnections.Add(this._myStudyTableTableAdapter, this._myStudyTableTableAdapter.Connection);
                    this._myStudyTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._myStudyTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._myStudyTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._myStudyTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._myStudyTableTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._myInstanceTableTableAdapter != null)) {
                    this._myInstanceTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._myInstanceTableTableAdapter]));
                    this._myInstanceTableTableAdapter.Transaction = null;
                }
                if ((this._myPatientTableTableAdapter != null)) {
                    this._myPatientTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._myPatientTableTableAdapter]));
                    this._myPatientTableTableAdapter.Transaction = null;
                }
                if ((this._mySeriesTableTableAdapter != null)) {
                    this._mySeriesTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mySeriesTableTableAdapter]));
                    this._mySeriesTableTableAdapter.Transaction = null;
                }
                if ((this._myStudyTableTableAdapter != null)) {
                    this._myStudyTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._myStudyTableTableAdapter]));
                    this._myStudyTableTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591