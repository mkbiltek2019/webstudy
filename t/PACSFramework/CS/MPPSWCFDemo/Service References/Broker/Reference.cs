// *************************************************************
// Copyright (c) 1991-2019 LEAD Technologies, Inc.              
// All Rights Reserved.                                         
// *************************************************************
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MPPSWCFDemo.Broker {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CatalogEntity", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.DataAccessLayer.Catalog" +
        "")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.ImagingServiceRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.RequestedProcedure))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFRequestedProcedure))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.ReferencedStudySequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.RequestedProcedureCodeSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.Visit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFVisit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.ReferencedPatientSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.ScheduledProcedureStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFScheduledProcedureStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.ScheduledProtocolCodeSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.PPSInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFPPSInformation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.PPSDiscontinuationReasonCodeSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.PPSRelationship))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.PerformedProtocolCodeSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.PerformedSeriesSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.ProcedureCodeSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.ReferencedImageSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFReferencedImageSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.ReferencedNonImageCompositeSequence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.PatientInfoforUnscheduledPPS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.Patient))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFPatient))]
    public partial class CatalogEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImagingServiceRequest", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class ImagingServiceRequest : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccessionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FillerOrderNumber_ImagingServiceRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagingServiceRequestCommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlacerOrderNumber_ImagingServiceRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferringPhysicianFamilyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferringPhysicianGivenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferringPhysicianMiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferringPhysicianPrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferringPhysicianSuffixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestingPhysicianFamilyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestingPhysicianGivenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestingPhysicianMiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestingPhysicianPrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestingPhysicianSuffixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestingServiceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessionNumber {
            get {
                return this.AccessionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessionNumberField, value) != true)) {
                    this.AccessionNumberField = value;
                    this.RaisePropertyChanged("AccessionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FillerOrderNumber_ImagingServiceRequest {
            get {
                return this.FillerOrderNumber_ImagingServiceRequestField;
            }
            set {
                if ((object.ReferenceEquals(this.FillerOrderNumber_ImagingServiceRequestField, value) != true)) {
                    this.FillerOrderNumber_ImagingServiceRequestField = value;
                    this.RaisePropertyChanged("FillerOrderNumber_ImagingServiceRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagingServiceRequestComments {
            get {
                return this.ImagingServiceRequestCommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagingServiceRequestCommentsField, value) != true)) {
                    this.ImagingServiceRequestCommentsField = value;
                    this.RaisePropertyChanged("ImagingServiceRequestComments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlacerOrderNumber_ImagingServiceRequest {
            get {
                return this.PlacerOrderNumber_ImagingServiceRequestField;
            }
            set {
                if ((object.ReferenceEquals(this.PlacerOrderNumber_ImagingServiceRequestField, value) != true)) {
                    this.PlacerOrderNumber_ImagingServiceRequestField = value;
                    this.RaisePropertyChanged("PlacerOrderNumber_ImagingServiceRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferringPhysicianFamilyName {
            get {
                return this.ReferringPhysicianFamilyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferringPhysicianFamilyNameField, value) != true)) {
                    this.ReferringPhysicianFamilyNameField = value;
                    this.RaisePropertyChanged("ReferringPhysicianFamilyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferringPhysicianGivenName {
            get {
                return this.ReferringPhysicianGivenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferringPhysicianGivenNameField, value) != true)) {
                    this.ReferringPhysicianGivenNameField = value;
                    this.RaisePropertyChanged("ReferringPhysicianGivenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferringPhysicianMiddleName {
            get {
                return this.ReferringPhysicianMiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferringPhysicianMiddleNameField, value) != true)) {
                    this.ReferringPhysicianMiddleNameField = value;
                    this.RaisePropertyChanged("ReferringPhysicianMiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferringPhysicianPrefix {
            get {
                return this.ReferringPhysicianPrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferringPhysicianPrefixField, value) != true)) {
                    this.ReferringPhysicianPrefixField = value;
                    this.RaisePropertyChanged("ReferringPhysicianPrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferringPhysicianSuffix {
            get {
                return this.ReferringPhysicianSuffixField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferringPhysicianSuffixField, value) != true)) {
                    this.ReferringPhysicianSuffixField = value;
                    this.RaisePropertyChanged("ReferringPhysicianSuffix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestingPhysicianFamilyName {
            get {
                return this.RequestingPhysicianFamilyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestingPhysicianFamilyNameField, value) != true)) {
                    this.RequestingPhysicianFamilyNameField = value;
                    this.RaisePropertyChanged("RequestingPhysicianFamilyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestingPhysicianGivenName {
            get {
                return this.RequestingPhysicianGivenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestingPhysicianGivenNameField, value) != true)) {
                    this.RequestingPhysicianGivenNameField = value;
                    this.RaisePropertyChanged("RequestingPhysicianGivenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestingPhysicianMiddleName {
            get {
                return this.RequestingPhysicianMiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestingPhysicianMiddleNameField, value) != true)) {
                    this.RequestingPhysicianMiddleNameField = value;
                    this.RaisePropertyChanged("RequestingPhysicianMiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestingPhysicianPrefix {
            get {
                return this.RequestingPhysicianPrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestingPhysicianPrefixField, value) != true)) {
                    this.RequestingPhysicianPrefixField = value;
                    this.RaisePropertyChanged("RequestingPhysicianPrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestingPhysicianSuffix {
            get {
                return this.RequestingPhysicianSuffixField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestingPhysicianSuffixField, value) != true)) {
                    this.RequestingPhysicianSuffixField = value;
                    this.RaisePropertyChanged("RequestingPhysicianSuffix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestingService {
            get {
                return this.RequestingServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestingServiceField, value) != true)) {
                    this.RequestingServiceField = value;
                    this.RaisePropertyChanged("RequestingService");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestedProcedure", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFRequestedProcedure))]
    public partial class RequestedProcedure : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientTransportArrangementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestedProcedureCommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestedProcedureDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestedProcedureIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestedProcedurePriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StudyInstanceUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientTransportArrangements {
            get {
                return this.PatientTransportArrangementsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientTransportArrangementsField, value) != true)) {
                    this.PatientTransportArrangementsField = value;
                    this.RaisePropertyChanged("PatientTransportArrangements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestedProcedureComments {
            get {
                return this.RequestedProcedureCommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestedProcedureCommentsField, value) != true)) {
                    this.RequestedProcedureCommentsField = value;
                    this.RaisePropertyChanged("RequestedProcedureComments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestedProcedureDescription {
            get {
                return this.RequestedProcedureDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestedProcedureDescriptionField, value) != true)) {
                    this.RequestedProcedureDescriptionField = value;
                    this.RaisePropertyChanged("RequestedProcedureDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestedProcedureID {
            get {
                return this.RequestedProcedureIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestedProcedureIDField, value) != true)) {
                    this.RequestedProcedureIDField = value;
                    this.RaisePropertyChanged("RequestedProcedureID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestedProcedurePriority {
            get {
                return this.RequestedProcedurePriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestedProcedurePriorityField, value) != true)) {
                    this.RequestedProcedurePriorityField = value;
                    this.RaisePropertyChanged("RequestedProcedurePriority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudyInstanceUID {
            get {
                return this.StudyInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.StudyInstanceUIDField, value) != true)) {
                    this.StudyInstanceUIDField = value;
                    this.RaisePropertyChanged("StudyInstanceUID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WCFRequestedProcedure", Namespace="")]
    [System.SerializableAttribute()]
    public partial class WCFRequestedProcedure : MPPSWCFDemo.Broker.RequestedProcedure {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MPPSWCFDemo.Broker.ReferencedStudySequence> ReferencedStudySequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPPSWCFDemo.Broker.RequestedProcedureCodeSequence RequestedProcedureCodeSequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPPSWCFDemo.Broker.WCFVisit VisitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.ReferencedStudySequence> ReferencedStudySequence {
            get {
                return this.ReferencedStudySequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedStudySequenceField, value) != true)) {
                    this.ReferencedStudySequenceField = value;
                    this.RaisePropertyChanged("ReferencedStudySequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPPSWCFDemo.Broker.RequestedProcedureCodeSequence RequestedProcedureCodeSequence {
            get {
                return this.RequestedProcedureCodeSequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestedProcedureCodeSequenceField, value) != true)) {
                    this.RequestedProcedureCodeSequenceField = value;
                    this.RaisePropertyChanged("RequestedProcedureCodeSequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPPSWCFDemo.Broker.WCFVisit Visit {
            get {
                return this.VisitField;
            }
            set {
                if ((object.ReferenceEquals(this.VisitField, value) != true)) {
                    this.VisitField = value;
                    this.RaisePropertyChanged("Visit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReferencedStudySequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class ReferencedStudySequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferencedSOPClassUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferencedSOPInstanceUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNumber {
            get {
                return this.OrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNumberField, value) != true)) {
                    this.OrderNumberField = value;
                    this.RaisePropertyChanged("OrderNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferencedSOPClassUID {
            get {
                return this.ReferencedSOPClassUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedSOPClassUIDField, value) != true)) {
                    this.ReferencedSOPClassUIDField = value;
                    this.RaisePropertyChanged("ReferencedSOPClassUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferencedSOPInstanceUID {
            get {
                return this.ReferencedSOPInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedSOPInstanceUIDField, value) != true)) {
                    this.ReferencedSOPInstanceUIDField = value;
                    this.RaisePropertyChanged("ReferencedSOPInstanceUID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestedProcedureCodeSequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class RequestedProcedureCodeSequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeMeaningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeDesignatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeVersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeMeaning {
            get {
                return this.CodeMeaningField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeMeaningField, value) != true)) {
                    this.CodeMeaningField = value;
                    this.RaisePropertyChanged("CodeMeaning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeValue {
            get {
                return this.CodeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeValueField, value) != true)) {
                    this.CodeValueField = value;
                    this.RaisePropertyChanged("CodeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeDesignator {
            get {
                return this.CodingSchemeDesignatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeDesignatorField, value) != true)) {
                    this.CodingSchemeDesignatorField = value;
                    this.RaisePropertyChanged("CodingSchemeDesignator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeVersion {
            get {
                return this.CodingSchemeVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeVersionField, value) != true)) {
                    this.CodingSchemeVersionField = value;
                    this.RaisePropertyChanged("CodingSchemeVersion");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Visit", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFVisit))]
    public partial class Visit : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdmissionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentPatientLocationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdmissionID {
            get {
                return this.AdmissionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AdmissionIDField, value) != true)) {
                    this.AdmissionIDField = value;
                    this.RaisePropertyChanged("AdmissionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentPatientLocation {
            get {
                return this.CurrentPatientLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentPatientLocationField, value) != true)) {
                    this.CurrentPatientLocationField = value;
                    this.RaisePropertyChanged("CurrentPatientLocation");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WCFVisit", Namespace="")]
    [System.SerializableAttribute()]
    public partial class WCFVisit : MPPSWCFDemo.Broker.Visit {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPPSWCFDemo.Broker.ReferencedPatientSequence ReferencedPatientSequenceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPPSWCFDemo.Broker.ReferencedPatientSequence ReferencedPatientSequence {
            get {
                return this.ReferencedPatientSequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedPatientSequenceField, value) != true)) {
                    this.ReferencedPatientSequenceField = value;
                    this.RaisePropertyChanged("ReferencedPatientSequence");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReferencedPatientSequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class ReferencedPatientSequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferencedSOPClassUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferencedSOPInstanceUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferencedSOPClassUID {
            get {
                return this.ReferencedSOPClassUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedSOPClassUIDField, value) != true)) {
                    this.ReferencedSOPClassUIDField = value;
                    this.RaisePropertyChanged("ReferencedSOPClassUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferencedSOPInstanceUID {
            get {
                return this.ReferencedSOPInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedSOPInstanceUIDField, value) != true)) {
                    this.ReferencedSOPInstanceUIDField = value;
                    this.RaisePropertyChanged("ReferencedSOPInstanceUID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduledProcedureStep", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFScheduledProcedureStep))]
    public partial class ScheduledProcedureStep : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModalityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Pre_MedicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestedContrastAgentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledPerformingPhysicianNameFamilyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledPerformingPhysicianNameGivenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledPerformingPhysicianNameMiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledPerformingPhysicianNamePrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledPerformingPhysicianNameSuffixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledProcedureStepDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledProcedureStepIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledProcedureStepLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Leadtools.Dicom.Common.DataTypes.DateRange ScheduledProcedureStepStartDate_TimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Modality {
            get {
                return this.ModalityField;
            }
            set {
                if ((object.ReferenceEquals(this.ModalityField, value) != true)) {
                    this.ModalityField = value;
                    this.RaisePropertyChanged("Modality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pre_Medication {
            get {
                return this.Pre_MedicationField;
            }
            set {
                if ((object.ReferenceEquals(this.Pre_MedicationField, value) != true)) {
                    this.Pre_MedicationField = value;
                    this.RaisePropertyChanged("Pre_Medication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestedContrastAgent {
            get {
                return this.RequestedContrastAgentField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestedContrastAgentField, value) != true)) {
                    this.RequestedContrastAgentField = value;
                    this.RaisePropertyChanged("RequestedContrastAgent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledPerformingPhysicianNameFamilyName {
            get {
                return this.ScheduledPerformingPhysicianNameFamilyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledPerformingPhysicianNameFamilyNameField, value) != true)) {
                    this.ScheduledPerformingPhysicianNameFamilyNameField = value;
                    this.RaisePropertyChanged("ScheduledPerformingPhysicianNameFamilyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledPerformingPhysicianNameGivenName {
            get {
                return this.ScheduledPerformingPhysicianNameGivenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledPerformingPhysicianNameGivenNameField, value) != true)) {
                    this.ScheduledPerformingPhysicianNameGivenNameField = value;
                    this.RaisePropertyChanged("ScheduledPerformingPhysicianNameGivenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledPerformingPhysicianNameMiddleName {
            get {
                return this.ScheduledPerformingPhysicianNameMiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledPerformingPhysicianNameMiddleNameField, value) != true)) {
                    this.ScheduledPerformingPhysicianNameMiddleNameField = value;
                    this.RaisePropertyChanged("ScheduledPerformingPhysicianNameMiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledPerformingPhysicianNamePrefix {
            get {
                return this.ScheduledPerformingPhysicianNamePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledPerformingPhysicianNamePrefixField, value) != true)) {
                    this.ScheduledPerformingPhysicianNamePrefixField = value;
                    this.RaisePropertyChanged("ScheduledPerformingPhysicianNamePrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledPerformingPhysicianNameSuffix {
            get {
                return this.ScheduledPerformingPhysicianNameSuffixField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledPerformingPhysicianNameSuffixField, value) != true)) {
                    this.ScheduledPerformingPhysicianNameSuffixField = value;
                    this.RaisePropertyChanged("ScheduledPerformingPhysicianNameSuffix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledProcedureStepDescription {
            get {
                return this.ScheduledProcedureStepDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledProcedureStepDescriptionField, value) != true)) {
                    this.ScheduledProcedureStepDescriptionField = value;
                    this.RaisePropertyChanged("ScheduledProcedureStepDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledProcedureStepID {
            get {
                return this.ScheduledProcedureStepIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledProcedureStepIDField, value) != true)) {
                    this.ScheduledProcedureStepIDField = value;
                    this.RaisePropertyChanged("ScheduledProcedureStepID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledProcedureStepLocation {
            get {
                return this.ScheduledProcedureStepLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledProcedureStepLocationField, value) != true)) {
                    this.ScheduledProcedureStepLocationField = value;
                    this.RaisePropertyChanged("ScheduledProcedureStepLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Leadtools.Dicom.Common.DataTypes.DateRange ScheduledProcedureStepStartDate_Time {
            get {
                return this.ScheduledProcedureStepStartDate_TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledProcedureStepStartDate_TimeField, value) != true)) {
                    this.ScheduledProcedureStepStartDate_TimeField = value;
                    this.RaisePropertyChanged("ScheduledProcedureStepStartDate_Time");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WCFScheduledProcedureStep", Namespace="")]
    [System.SerializableAttribute()]
    public partial class WCFScheduledProcedureStep : MPPSWCFDemo.Broker.ScheduledProcedureStep {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MPPSWCFDemo.Broker.ScheduledProtocolCodeSequence> ScheduledProtocolCodeSequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> ScheduledStationAETitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> ScheduledStationNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.ScheduledProtocolCodeSequence> ScheduledProtocolCodeSequence {
            get {
                return this.ScheduledProtocolCodeSequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledProtocolCodeSequenceField, value) != true)) {
                    this.ScheduledProtocolCodeSequenceField = value;
                    this.RaisePropertyChanged("ScheduledProtocolCodeSequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> ScheduledStationAETitle {
            get {
                return this.ScheduledStationAETitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledStationAETitleField, value) != true)) {
                    this.ScheduledStationAETitleField = value;
                    this.RaisePropertyChanged("ScheduledStationAETitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> ScheduledStationName {
            get {
                return this.ScheduledStationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledStationNameField, value) != true)) {
                    this.ScheduledStationNameField = value;
                    this.RaisePropertyChanged("ScheduledStationName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduledProtocolCodeSequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class ScheduledProtocolCodeSequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeMeaningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeDesignatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeMeaning {
            get {
                return this.CodeMeaningField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeMeaningField, value) != true)) {
                    this.CodeMeaningField = value;
                    this.RaisePropertyChanged("CodeMeaning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeValue {
            get {
                return this.CodeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeValueField, value) != true)) {
                    this.CodeValueField = value;
                    this.RaisePropertyChanged("CodeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeDesignator {
            get {
                return this.CodingSchemeDesignatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeDesignatorField, value) != true)) {
                    this.CodingSchemeDesignatorField = value;
                    this.RaisePropertyChanged("CodingSchemeDesignator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeVersion {
            get {
                return this.CodingSchemeVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeVersionField, value) != true)) {
                    this.CodingSchemeVersionField = value;
                    this.RaisePropertyChanged("CodingSchemeVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNumber {
            get {
                return this.OrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNumberField, value) != true)) {
                    this.OrderNumberField = value;
                    this.RaisePropertyChanged("OrderNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PPSInformation", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFPPSInformation))]
    public partial class PPSInformation : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsonthePerformedProcedureStepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MPPSSOPInstanceUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModalityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PerformedLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PerformedProcedureStepDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Leadtools.Dicom.DicomDateRangeValue> PerformedProcedureStepEndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Leadtools.Dicom.DicomTimeRangeValue> PerformedProcedureStepEndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PerformedProcedureStepIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Leadtools.Dicom.DicomDateRangeValue> PerformedProcedureStepStartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Leadtools.Dicom.DicomTimeRangeValue> PerformedProcedureStepStartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PerformedProcedureStepStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PerformedProcedureTypeDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PerformedStationAETitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PerformedStationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StudyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StudyInstanceUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommentsonthePerformedProcedureStep {
            get {
                return this.CommentsonthePerformedProcedureStepField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsonthePerformedProcedureStepField, value) != true)) {
                    this.CommentsonthePerformedProcedureStepField = value;
                    this.RaisePropertyChanged("CommentsonthePerformedProcedureStep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MPPSSOPInstanceUID {
            get {
                return this.MPPSSOPInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MPPSSOPInstanceUIDField, value) != true)) {
                    this.MPPSSOPInstanceUIDField = value;
                    this.RaisePropertyChanged("MPPSSOPInstanceUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Modality {
            get {
                return this.ModalityField;
            }
            set {
                if ((object.ReferenceEquals(this.ModalityField, value) != true)) {
                    this.ModalityField = value;
                    this.RaisePropertyChanged("Modality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PerformedLocation {
            get {
                return this.PerformedLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformedLocationField, value) != true)) {
                    this.PerformedLocationField = value;
                    this.RaisePropertyChanged("PerformedLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PerformedProcedureStepDescription {
            get {
                return this.PerformedProcedureStepDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformedProcedureStepDescriptionField, value) != true)) {
                    this.PerformedProcedureStepDescriptionField = value;
                    this.RaisePropertyChanged("PerformedProcedureStepDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Leadtools.Dicom.DicomDateRangeValue> PerformedProcedureStepEndDate {
            get {
                return this.PerformedProcedureStepEndDateField;
            }
            set {
                if ((this.PerformedProcedureStepEndDateField.Equals(value) != true)) {
                    this.PerformedProcedureStepEndDateField = value;
                    this.RaisePropertyChanged("PerformedProcedureStepEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Leadtools.Dicom.DicomTimeRangeValue> PerformedProcedureStepEndTime {
            get {
                return this.PerformedProcedureStepEndTimeField;
            }
            set {
                if ((this.PerformedProcedureStepEndTimeField.Equals(value) != true)) {
                    this.PerformedProcedureStepEndTimeField = value;
                    this.RaisePropertyChanged("PerformedProcedureStepEndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PerformedProcedureStepID {
            get {
                return this.PerformedProcedureStepIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformedProcedureStepIDField, value) != true)) {
                    this.PerformedProcedureStepIDField = value;
                    this.RaisePropertyChanged("PerformedProcedureStepID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Leadtools.Dicom.DicomDateRangeValue> PerformedProcedureStepStartDate {
            get {
                return this.PerformedProcedureStepStartDateField;
            }
            set {
                if ((this.PerformedProcedureStepStartDateField.Equals(value) != true)) {
                    this.PerformedProcedureStepStartDateField = value;
                    this.RaisePropertyChanged("PerformedProcedureStepStartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Leadtools.Dicom.DicomTimeRangeValue> PerformedProcedureStepStartTime {
            get {
                return this.PerformedProcedureStepStartTimeField;
            }
            set {
                if ((this.PerformedProcedureStepStartTimeField.Equals(value) != true)) {
                    this.PerformedProcedureStepStartTimeField = value;
                    this.RaisePropertyChanged("PerformedProcedureStepStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PerformedProcedureStepStatus {
            get {
                return this.PerformedProcedureStepStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformedProcedureStepStatusField, value) != true)) {
                    this.PerformedProcedureStepStatusField = value;
                    this.RaisePropertyChanged("PerformedProcedureStepStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PerformedProcedureTypeDescription {
            get {
                return this.PerformedProcedureTypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformedProcedureTypeDescriptionField, value) != true)) {
                    this.PerformedProcedureTypeDescriptionField = value;
                    this.RaisePropertyChanged("PerformedProcedureTypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PerformedStationAETitle {
            get {
                return this.PerformedStationAETitleField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformedStationAETitleField, value) != true)) {
                    this.PerformedStationAETitleField = value;
                    this.RaisePropertyChanged("PerformedStationAETitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PerformedStationName {
            get {
                return this.PerformedStationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformedStationNameField, value) != true)) {
                    this.PerformedStationNameField = value;
                    this.RaisePropertyChanged("PerformedStationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudyID {
            get {
                return this.StudyIDField;
            }
            set {
                if ((object.ReferenceEquals(this.StudyIDField, value) != true)) {
                    this.StudyIDField = value;
                    this.RaisePropertyChanged("StudyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StudyInstanceUID {
            get {
                return this.StudyInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.StudyInstanceUIDField, value) != true)) {
                    this.StudyInstanceUIDField = value;
                    this.RaisePropertyChanged("StudyInstanceUID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WCFPPSInformation", Namespace="")]
    [System.SerializableAttribute()]
    public partial class WCFPPSInformation : MPPSWCFDemo.Broker.PPSInformation {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MPPSWCFDemo.Broker.PPSDiscontinuationReasonCodeSequence> PPSDiscontinuationReasonCodeSequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MPPSWCFDemo.Broker.PPSRelationship> PPSRelationShipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPPSWCFDemo.Broker.WCFPatient PatientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MPPSWCFDemo.Broker.PerformedProtocolCodeSequence> PerformedProtocolCodeSequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MPPSWCFDemo.Broker.PerformedSeriesSequence> PerformedSeriesSequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MPPSWCFDemo.Broker.ProcedureCodeSequence> ProcedureCodeSequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MPPSWCFDemo.Broker.WCFReferencedImageSequence> ReferencedImageSequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MPPSWCFDemo.Broker.ReferencedNonImageCompositeSequence> ReferencedNonImageCompositeSequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPPSWCFDemo.Broker.PatientInfoforUnscheduledPPS UnscheduledPatientField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.PPSDiscontinuationReasonCodeSequence> PPSDiscontinuationReasonCodeSequence {
            get {
                return this.PPSDiscontinuationReasonCodeSequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.PPSDiscontinuationReasonCodeSequenceField, value) != true)) {
                    this.PPSDiscontinuationReasonCodeSequenceField = value;
                    this.RaisePropertyChanged("PPSDiscontinuationReasonCodeSequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.PPSRelationship> PPSRelationShip {
            get {
                return this.PPSRelationShipField;
            }
            set {
                if ((object.ReferenceEquals(this.PPSRelationShipField, value) != true)) {
                    this.PPSRelationShipField = value;
                    this.RaisePropertyChanged("PPSRelationShip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPPSWCFDemo.Broker.WCFPatient Patient {
            get {
                return this.PatientField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientField, value) != true)) {
                    this.PatientField = value;
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.PerformedProtocolCodeSequence> PerformedProtocolCodeSequence {
            get {
                return this.PerformedProtocolCodeSequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformedProtocolCodeSequenceField, value) != true)) {
                    this.PerformedProtocolCodeSequenceField = value;
                    this.RaisePropertyChanged("PerformedProtocolCodeSequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.PerformedSeriesSequence> PerformedSeriesSequence {
            get {
                return this.PerformedSeriesSequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformedSeriesSequenceField, value) != true)) {
                    this.PerformedSeriesSequenceField = value;
                    this.RaisePropertyChanged("PerformedSeriesSequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.ProcedureCodeSequence> ProcedureCodeSequence {
            get {
                return this.ProcedureCodeSequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcedureCodeSequenceField, value) != true)) {
                    this.ProcedureCodeSequenceField = value;
                    this.RaisePropertyChanged("ProcedureCodeSequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.WCFReferencedImageSequence> ReferencedImageSequence {
            get {
                return this.ReferencedImageSequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedImageSequenceField, value) != true)) {
                    this.ReferencedImageSequenceField = value;
                    this.RaisePropertyChanged("ReferencedImageSequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.ReferencedNonImageCompositeSequence> ReferencedNonImageCompositeSequence {
            get {
                return this.ReferencedNonImageCompositeSequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedNonImageCompositeSequenceField, value) != true)) {
                    this.ReferencedNonImageCompositeSequenceField = value;
                    this.RaisePropertyChanged("ReferencedNonImageCompositeSequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPPSWCFDemo.Broker.PatientInfoforUnscheduledPPS UnscheduledPatient {
            get {
                return this.UnscheduledPatientField;
            }
            set {
                if ((object.ReferenceEquals(this.UnscheduledPatientField, value) != true)) {
                    this.UnscheduledPatientField = value;
                    this.RaisePropertyChanged("UnscheduledPatient");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PPSDiscontinuationReasonCodeSequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class PPSDiscontinuationReasonCodeSequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeMeaningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeDesignatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeMeaning {
            get {
                return this.CodeMeaningField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeMeaningField, value) != true)) {
                    this.CodeMeaningField = value;
                    this.RaisePropertyChanged("CodeMeaning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeValue {
            get {
                return this.CodeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeValueField, value) != true)) {
                    this.CodeValueField = value;
                    this.RaisePropertyChanged("CodeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeDesignator {
            get {
                return this.CodingSchemeDesignatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeDesignatorField, value) != true)) {
                    this.CodingSchemeDesignatorField = value;
                    this.RaisePropertyChanged("CodingSchemeDesignator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeVersion {
            get {
                return this.CodingSchemeVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeVersionField, value) != true)) {
                    this.CodingSchemeVersionField = value;
                    this.RaisePropertyChanged("CodingSchemeVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNumber {
            get {
                return this.OrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNumberField, value) != true)) {
                    this.OrderNumberField = value;
                    this.RaisePropertyChanged("OrderNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PPSRelationship", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class PPSRelationship : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItmeOrderNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledProcedureStepIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItmeOrderNumber {
            get {
                return this.ItmeOrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ItmeOrderNumberField, value) != true)) {
                    this.ItmeOrderNumberField = value;
                    this.RaisePropertyChanged("ItmeOrderNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledProcedureStepID {
            get {
                return this.ScheduledProcedureStepIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledProcedureStepIDField, value) != true)) {
                    this.ScheduledProcedureStepIDField = value;
                    this.RaisePropertyChanged("ScheduledProcedureStepID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformedProtocolCodeSequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class PerformedProtocolCodeSequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeMeaningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeDesignatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeMeaning {
            get {
                return this.CodeMeaningField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeMeaningField, value) != true)) {
                    this.CodeMeaningField = value;
                    this.RaisePropertyChanged("CodeMeaning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeValue {
            get {
                return this.CodeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeValueField, value) != true)) {
                    this.CodeValueField = value;
                    this.RaisePropertyChanged("CodeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeDesignator {
            get {
                return this.CodingSchemeDesignatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeDesignatorField, value) != true)) {
                    this.CodingSchemeDesignatorField = value;
                    this.RaisePropertyChanged("CodingSchemeDesignator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeVersion {
            get {
                return this.CodingSchemeVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeVersionField, value) != true)) {
                    this.CodingSchemeVersionField = value;
                    this.RaisePropertyChanged("CodingSchemeVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNumber {
            get {
                return this.OrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNumberField, value) != true)) {
                    this.OrderNumberField = value;
                    this.RaisePropertyChanged("OrderNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformedSeriesSequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class PerformedSeriesSequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PerformingPhysicianNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtocolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RetrieveAETitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeriesDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeriesInstanceUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatorName {
            get {
                return this.OperatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorNameField, value) != true)) {
                    this.OperatorNameField = value;
                    this.RaisePropertyChanged("OperatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNumber {
            get {
                return this.OrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNumberField, value) != true)) {
                    this.OrderNumberField = value;
                    this.RaisePropertyChanged("OrderNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PerformingPhysicianName {
            get {
                return this.PerformingPhysicianNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformingPhysicianNameField, value) != true)) {
                    this.PerformingPhysicianNameField = value;
                    this.RaisePropertyChanged("PerformingPhysicianName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtocolName {
            get {
                return this.ProtocolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolNameField, value) != true)) {
                    this.ProtocolNameField = value;
                    this.RaisePropertyChanged("ProtocolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RetrieveAETitle {
            get {
                return this.RetrieveAETitleField;
            }
            set {
                if ((object.ReferenceEquals(this.RetrieveAETitleField, value) != true)) {
                    this.RetrieveAETitleField = value;
                    this.RaisePropertyChanged("RetrieveAETitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeriesDescription {
            get {
                return this.SeriesDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.SeriesDescriptionField, value) != true)) {
                    this.SeriesDescriptionField = value;
                    this.RaisePropertyChanged("SeriesDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeriesInstanceUID {
            get {
                return this.SeriesInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SeriesInstanceUIDField, value) != true)) {
                    this.SeriesInstanceUIDField = value;
                    this.RaisePropertyChanged("SeriesInstanceUID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcedureCodeSequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class ProcedureCodeSequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeMeaningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeDesignatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodingSchemeVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeMeaning {
            get {
                return this.CodeMeaningField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeMeaningField, value) != true)) {
                    this.CodeMeaningField = value;
                    this.RaisePropertyChanged("CodeMeaning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeValue {
            get {
                return this.CodeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeValueField, value) != true)) {
                    this.CodeValueField = value;
                    this.RaisePropertyChanged("CodeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeDesignator {
            get {
                return this.CodingSchemeDesignatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeDesignatorField, value) != true)) {
                    this.CodingSchemeDesignatorField = value;
                    this.RaisePropertyChanged("CodingSchemeDesignator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodingSchemeVersion {
            get {
                return this.CodingSchemeVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CodingSchemeVersionField, value) != true)) {
                    this.CodingSchemeVersionField = value;
                    this.RaisePropertyChanged("CodingSchemeVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNumber {
            get {
                return this.OrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNumberField, value) != true)) {
                    this.OrderNumberField = value;
                    this.RaisePropertyChanged("OrderNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReferencedImageSequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFReferencedImageSequence))]
    public partial class ReferencedImageSequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferencedSOPClassUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferencedSOPInstanceUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNumber {
            get {
                return this.OrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNumberField, value) != true)) {
                    this.OrderNumberField = value;
                    this.RaisePropertyChanged("OrderNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferencedSOPClassUID {
            get {
                return this.ReferencedSOPClassUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedSOPClassUIDField, value) != true)) {
                    this.ReferencedSOPClassUIDField = value;
                    this.RaisePropertyChanged("ReferencedSOPClassUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferencedSOPInstanceUID {
            get {
                return this.ReferencedSOPInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedSOPInstanceUIDField, value) != true)) {
                    this.ReferencedSOPInstanceUIDField = value;
                    this.RaisePropertyChanged("ReferencedSOPInstanceUID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WCFReferencedImageSequence", Namespace="")]
    [System.SerializableAttribute()]
    public partial class WCFReferencedImageSequence : MPPSWCFDemo.Broker.ReferencedImageSequence {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeriesInstanceUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeriesInstanceUID {
            get {
                return this.SeriesInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SeriesInstanceUIDField, value) != true)) {
                    this.SeriesInstanceUIDField = value;
                    this.RaisePropertyChanged("SeriesInstanceUID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReferencedNonImageCompositeSequence", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class ReferencedNonImageCompositeSequence : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferencedSOPClassUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReferencedSOPInstanceUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeriesInstanceUIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderNumber {
            get {
                return this.OrderNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNumberField, value) != true)) {
                    this.OrderNumberField = value;
                    this.RaisePropertyChanged("OrderNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferencedSOPClassUID {
            get {
                return this.ReferencedSOPClassUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedSOPClassUIDField, value) != true)) {
                    this.ReferencedSOPClassUIDField = value;
                    this.RaisePropertyChanged("ReferencedSOPClassUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReferencedSOPInstanceUID {
            get {
                return this.ReferencedSOPInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencedSOPInstanceUIDField, value) != true)) {
                    this.ReferencedSOPInstanceUIDField = value;
                    this.RaisePropertyChanged("ReferencedSOPInstanceUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeriesInstanceUID {
            get {
                return this.SeriesInstanceUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SeriesInstanceUIDField, value) != true)) {
                    this.SeriesInstanceUIDField = value;
                    this.RaisePropertyChanged("SeriesInstanceUID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientInfoforUnscheduledPPS", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" +
        "r.MatchingParameters")]
    [System.SerializableAttribute()]
    public partial class PatientInfoforUnscheduledPPS : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IssuerofPatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Leadtools.Dicom.DicomDateRangeValue> PatientBirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientSexField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssuerofPatientID {
            get {
                return this.IssuerofPatientIDField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuerofPatientIDField, value) != true)) {
                    this.IssuerofPatientIDField = value;
                    this.RaisePropertyChanged("IssuerofPatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Leadtools.Dicom.DicomDateRangeValue> PatientBirthDate {
            get {
                return this.PatientBirthDateField;
            }
            set {
                if ((this.PatientBirthDateField.Equals(value) != true)) {
                    this.PatientBirthDateField = value;
                    this.RaisePropertyChanged("PatientBirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientIDField, value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientName {
            get {
                return this.PatientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameField, value) != true)) {
                    this.PatientNameField = value;
                    this.RaisePropertyChanged("PatientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientSex {
            get {
                return this.PatientSexField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientSexField, value) != true)) {
                    this.PatientSexField = value;
                    this.RaisePropertyChanged("PatientSex");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MPPSWCFDemo.Broker.WCFPatient))]
    public partial class Patient : MPPSWCFDemo.Broker.CatalogEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalPatientHistoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfidentialityConstraintonPatientDataDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EthnicGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IssuerOfPatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Leadtools.Dicom.DicomDateRangeValue> LastMenstrualDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Leadtools.Dicom.DicomDateRangeValue> PatientBirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientCommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameFamilyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameGivenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameMiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNamePrefixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameSuffixField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientSexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientWeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PregnancyStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialNeedsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalPatientHistory {
            get {
                return this.AdditionalPatientHistoryField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalPatientHistoryField, value) != true)) {
                    this.AdditionalPatientHistoryField = value;
                    this.RaisePropertyChanged("AdditionalPatientHistory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfidentialityConstraintonPatientDataDescription {
            get {
                return this.ConfidentialityConstraintonPatientDataDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfidentialityConstraintonPatientDataDescriptionField, value) != true)) {
                    this.ConfidentialityConstraintonPatientDataDescriptionField = value;
                    this.RaisePropertyChanged("ConfidentialityConstraintonPatientDataDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EthnicGroup {
            get {
                return this.EthnicGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.EthnicGroupField, value) != true)) {
                    this.EthnicGroupField = value;
                    this.RaisePropertyChanged("EthnicGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssuerOfPatientID {
            get {
                return this.IssuerOfPatientIDField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuerOfPatientIDField, value) != true)) {
                    this.IssuerOfPatientIDField = value;
                    this.RaisePropertyChanged("IssuerOfPatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Leadtools.Dicom.DicomDateRangeValue> LastMenstrualDate {
            get {
                return this.LastMenstrualDateField;
            }
            set {
                if ((this.LastMenstrualDateField.Equals(value) != true)) {
                    this.LastMenstrualDateField = value;
                    this.RaisePropertyChanged("LastMenstrualDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Leadtools.Dicom.DicomDateRangeValue> PatientBirthDate {
            get {
                return this.PatientBirthDateField;
            }
            set {
                if ((this.PatientBirthDateField.Equals(value) != true)) {
                    this.PatientBirthDateField = value;
                    this.RaisePropertyChanged("PatientBirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientComments {
            get {
                return this.PatientCommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientCommentsField, value) != true)) {
                    this.PatientCommentsField = value;
                    this.RaisePropertyChanged("PatientComments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientIDField, value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientNameFamilyName {
            get {
                return this.PatientNameFamilyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameFamilyNameField, value) != true)) {
                    this.PatientNameFamilyNameField = value;
                    this.RaisePropertyChanged("PatientNameFamilyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientNameGivenName {
            get {
                return this.PatientNameGivenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameGivenNameField, value) != true)) {
                    this.PatientNameGivenNameField = value;
                    this.RaisePropertyChanged("PatientNameGivenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientNameMiddleName {
            get {
                return this.PatientNameMiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameMiddleNameField, value) != true)) {
                    this.PatientNameMiddleNameField = value;
                    this.RaisePropertyChanged("PatientNameMiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientNamePrefix {
            get {
                return this.PatientNamePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNamePrefixField, value) != true)) {
                    this.PatientNamePrefixField = value;
                    this.RaisePropertyChanged("PatientNamePrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientNameSuffix {
            get {
                return this.PatientNameSuffixField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameSuffixField, value) != true)) {
                    this.PatientNameSuffixField = value;
                    this.RaisePropertyChanged("PatientNameSuffix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientSex {
            get {
                return this.PatientSexField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientSexField, value) != true)) {
                    this.PatientSexField = value;
                    this.RaisePropertyChanged("PatientSex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientState {
            get {
                return this.PatientStateField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientStateField, value) != true)) {
                    this.PatientStateField = value;
                    this.RaisePropertyChanged("PatientState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientWeight {
            get {
                return this.PatientWeightField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientWeightField, value) != true)) {
                    this.PatientWeightField = value;
                    this.RaisePropertyChanged("PatientWeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PregnancyStatus {
            get {
                return this.PregnancyStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PregnancyStatusField, value) != true)) {
                    this.PregnancyStatusField = value;
                    this.RaisePropertyChanged("PregnancyStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialNeeds {
            get {
                return this.SpecialNeedsField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialNeedsField, value) != true)) {
                    this.SpecialNeedsField = value;
                    this.RaisePropertyChanged("SpecialNeeds");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WCFPatient", Namespace="")]
    [System.SerializableAttribute()]
    public partial class WCFPatient : MPPSWCFDemo.Broker.Patient {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> ContrastAllergiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> MedicalAlertsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> OtherPatientIDsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> ContrastAllergies {
            get {
                return this.ContrastAllergiesField;
            }
            set {
                if ((object.ReferenceEquals(this.ContrastAllergiesField, value) != true)) {
                    this.ContrastAllergiesField = value;
                    this.RaisePropertyChanged("ContrastAllergies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> MedicalAlerts {
            get {
                return this.MedicalAlertsField;
            }
            set {
                if ((object.ReferenceEquals(this.MedicalAlertsField, value) != true)) {
                    this.MedicalAlertsField = value;
                    this.RaisePropertyChanged("MedicalAlerts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> OtherPatientIDs {
            get {
                return this.OtherPatientIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherPatientIDsField, value) != true)) {
                    this.OtherPatientIDsField = value;
                    this.RaisePropertyChanged("OtherPatientIDs");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MPPSQuery", Namespace="")]
    [System.SerializableAttribute()]
    public partial class MPPSQuery : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccessionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPPSWCFDemo.Broker.WCFPPSInformation PPSInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPPSWCFDemo.Broker.WCFPatient PatientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestedProcedureIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScheduledProcedureIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessionNumber {
            get {
                return this.AccessionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessionNumberField, value) != true)) {
                    this.AccessionNumberField = value;
                    this.RaisePropertyChanged("AccessionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPPSWCFDemo.Broker.WCFPPSInformation PPSInfo {
            get {
                return this.PPSInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.PPSInfoField, value) != true)) {
                    this.PPSInfoField = value;
                    this.RaisePropertyChanged("PPSInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPPSWCFDemo.Broker.WCFPatient Patient {
            get {
                return this.PatientField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientField, value) != true)) {
                    this.PatientField = value;
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestedProcedureId {
            get {
                return this.RequestedProcedureIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestedProcedureIdField, value) != true)) {
                    this.RequestedProcedureIdField = value;
                    this.RaisePropertyChanged("RequestedProcedureId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScheduledProcedureId {
            get {
                return this.ScheduledProcedureIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduledProcedureIdField, value) != true)) {
                    this.ScheduledProcedureIdField = value;
                    this.RaisePropertyChanged("ScheduledProcedureId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
    [System.SerializableAttribute()]
    public partial class ApplicationFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Broker.IBrokerService")]
    public interface IBrokerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/PerformedProcedureStepExists", ReplyAction="http://tempuri.org/IBrokerService/PerformedProcedureStepExistsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/PerformedProcedureStepExistsApplicationFaultFau" +
            "lt", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        bool PerformedProcedureStepExists(string affectedSOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/PerformedProcedureStepExists", ReplyAction="http://tempuri.org/IBrokerService/PerformedProcedureStepExistsResponse")]
        System.IAsyncResult BeginPerformedProcedureStepExists(string affectedSOPInstanceUID, System.AsyncCallback callback, object asyncState);
        
        bool EndPerformedProcedureStepExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/AddPatient", ReplyAction="http://tempuri.org/IBrokerService/AddPatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/AddPatientApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void AddPatient(MPPSWCFDemo.Broker.WCFPatient patient);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/AddPatient", ReplyAction="http://tempuri.org/IBrokerService/AddPatientResponse")]
        System.IAsyncResult BeginAddPatient(MPPSWCFDemo.Broker.WCFPatient patient, System.AsyncCallback callback, object asyncState);
        
        void EndAddPatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/DeletePatient", ReplyAction="http://tempuri.org/IBrokerService/DeletePatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/DeletePatientApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void DeletePatient(string patientId, string issuerOfPatientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/DeletePatient", ReplyAction="http://tempuri.org/IBrokerService/DeletePatientResponse")]
        System.IAsyncResult BeginDeletePatient(string patientId, string issuerOfPatientID, System.AsyncCallback callback, object asyncState);
        
        void EndDeletePatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/UpdatePatient", ReplyAction="http://tempuri.org/IBrokerService/UpdatePatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/UpdatePatientApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void UpdatePatient(string origPatientId, string origIssuerOfPatientId, MPPSWCFDemo.Broker.WCFPatient patient);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/UpdatePatient", ReplyAction="http://tempuri.org/IBrokerService/UpdatePatientResponse")]
        System.IAsyncResult BeginUpdatePatient(string origPatientId, string origIssuerOfPatientId, MPPSWCFDemo.Broker.WCFPatient patient, System.AsyncCallback callback, object asyncState);
        
        void EndUpdatePatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/FindPatient", ReplyAction="http://tempuri.org/IBrokerService/FindPatientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/FindPatientApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        MPPSWCFDemo.Broker.WCFPatient FindPatient(string patientID, string issuerOfPatientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/FindPatient", ReplyAction="http://tempuri.org/IBrokerService/FindPatientResponse")]
        System.IAsyncResult BeginFindPatient(string patientID, string issuerOfPatientID, System.AsyncCallback callback, object asyncState);
        
        MPPSWCFDemo.Broker.WCFPatient EndFindPatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/GetPatientIDs", ReplyAction="http://tempuri.org/IBrokerService/GetPatientIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/GetPatientIDsApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        System.Collections.Generic.List<string> GetPatientIDs();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/GetPatientIDs", ReplyAction="http://tempuri.org/IBrokerService/GetPatientIDsResponse")]
        System.IAsyncResult BeginGetPatientIDs(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetPatientIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/AddImagingServiceRequest", ReplyAction="http://tempuri.org/IBrokerService/AddImagingServiceRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/AddImagingServiceRequestApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void AddImagingServiceRequest(string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/AddImagingServiceRequest", ReplyAction="http://tempuri.org/IBrokerService/AddImagingServiceRequestResponse")]
        System.IAsyncResult BeginAddImagingServiceRequest(string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest request, System.AsyncCallback callback, object asyncState);
        
        void EndAddImagingServiceRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/DeleteImagingServiceRequest", ReplyAction="http://tempuri.org/IBrokerService/DeleteImagingServiceRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/DeleteImagingServiceRequestApplicationFaultFaul" +
            "t", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void DeleteImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/DeleteImagingServiceRequest", ReplyAction="http://tempuri.org/IBrokerService/DeleteImagingServiceRequestResponse")]
        System.IAsyncResult BeginDeleteImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteImagingServiceRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/UpdateImagingServiceRequest", ReplyAction="http://tempuri.org/IBrokerService/UpdateImagingServiceRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/UpdateImagingServiceRequestApplicationFaultFaul" +
            "t", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void UpdateImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest entity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/UpdateImagingServiceRequest", ReplyAction="http://tempuri.org/IBrokerService/UpdateImagingServiceRequestResponse")]
        System.IAsyncResult BeginUpdateImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest entity, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateImagingServiceRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/FindImagingServiceRequest", ReplyAction="http://tempuri.org/IBrokerService/FindImagingServiceRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/FindImagingServiceRequestApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        MPPSWCFDemo.Broker.ImagingServiceRequest FindImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/FindImagingServiceRequest", ReplyAction="http://tempuri.org/IBrokerService/FindImagingServiceRequestResponse")]
        System.IAsyncResult BeginFindImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID, System.AsyncCallback callback, object asyncState);
        
        MPPSWCFDemo.Broker.ImagingServiceRequest EndFindImagingServiceRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/GetAccessionNumbers", ReplyAction="http://tempuri.org/IBrokerService/GetAccessionNumbersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/GetAccessionNumbersApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        System.Collections.Generic.List<string> GetAccessionNumbers(string patientID, string issuerOfPatientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/GetAccessionNumbers", ReplyAction="http://tempuri.org/IBrokerService/GetAccessionNumbersResponse")]
        System.IAsyncResult BeginGetAccessionNumbers(string patientID, string issuerOfPatientID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetAccessionNumbers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/AddRequestedProcedure", ReplyAction="http://tempuri.org/IBrokerService/AddRequestedProcedureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/AddRequestedProcedureApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void AddRequestedProcedure(string accessionNumber, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/AddRequestedProcedure", ReplyAction="http://tempuri.org/IBrokerService/AddRequestedProcedureResponse")]
        System.IAsyncResult BeginAddRequestedProcedure(string accessionNumber, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure, System.AsyncCallback callback, object asyncState);
        
        void EndAddRequestedProcedure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/DeleteRequestedProcedure", ReplyAction="http://tempuri.org/IBrokerService/DeleteRequestedProcedureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/DeleteRequestedProcedureApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void DeleteRequestedProcedure(string accessionNumber, string requestedProcedureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/DeleteRequestedProcedure", ReplyAction="http://tempuri.org/IBrokerService/DeleteRequestedProcedureResponse")]
        System.IAsyncResult BeginDeleteRequestedProcedure(string accessionNumber, string requestedProcedureID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteRequestedProcedure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/UpdateRequestedProcedure", ReplyAction="http://tempuri.org/IBrokerService/UpdateRequestedProcedureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/UpdateRequestedProcedureApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void UpdateRequestedProcedure(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/UpdateRequestedProcedure", ReplyAction="http://tempuri.org/IBrokerService/UpdateRequestedProcedureResponse")]
        System.IAsyncResult BeginUpdateRequestedProcedure(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateRequestedProcedure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/FindRequestedProcedure", ReplyAction="http://tempuri.org/IBrokerService/FindRequestedProcedureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/FindRequestedProcedureApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        MPPSWCFDemo.Broker.WCFRequestedProcedure FindRequestedProcedure(string accessionNumber, string requestedProcedureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/FindRequestedProcedure", ReplyAction="http://tempuri.org/IBrokerService/FindRequestedProcedureResponse")]
        System.IAsyncResult BeginFindRequestedProcedure(string accessionNumber, string requestedProcedureID, System.AsyncCallback callback, object asyncState);
        
        MPPSWCFDemo.Broker.WCFRequestedProcedure EndFindRequestedProcedure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/GetRequestedProcedureIDs", ReplyAction="http://tempuri.org/IBrokerService/GetRequestedProcedureIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/GetRequestedProcedureIDsApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        System.Collections.Generic.List<string> GetRequestedProcedureIDs(string accessionNumber);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/GetRequestedProcedureIDs", ReplyAction="http://tempuri.org/IBrokerService/GetRequestedProcedureIDsResponse")]
        System.IAsyncResult BeginGetRequestedProcedureIDs(string accessionNumber, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetRequestedProcedureIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/AddScheduledProcedureStep", ReplyAction="http://tempuri.org/IBrokerService/AddScheduledProcedureStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/AddScheduledProcedureStepApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void AddScheduledProcedureStep(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/AddScheduledProcedureStep", ReplyAction="http://tempuri.org/IBrokerService/AddScheduledProcedureStepResponse")]
        System.IAsyncResult BeginAddScheduledProcedureStep(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep, System.AsyncCallback callback, object asyncState);
        
        void EndAddScheduledProcedureStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStep", ReplyAction="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStepApplicationFaultFau" +
            "lt", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void UpdateScheduledProcedureStep(string scheduledProcedureStepID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStep", ReplyAction="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStepResponse")]
        System.IAsyncResult BeginUpdateScheduledProcedureStep(string scheduledProcedureStepID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateScheduledProcedureStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStep", ReplyAction="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStepApplicationFaultFau" +
            "lt", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void DeleteScheduledProcedureStep(string scheduledProcedureStepID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStep", ReplyAction="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStepResponse")]
        System.IAsyncResult BeginDeleteScheduledProcedureStep(string scheduledProcedureStepID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteScheduledProcedureStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/FindScheduledProcedureStep", ReplyAction="http://tempuri.org/IBrokerService/FindScheduledProcedureStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/FindScheduledProcedureStepApplicationFaultFault" +
            "", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        MPPSWCFDemo.Broker.WCFScheduledProcedureStep FindScheduledProcedureStep(string scheduledProcedureStepID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/FindScheduledProcedureStep", ReplyAction="http://tempuri.org/IBrokerService/FindScheduledProcedureStepResponse")]
        System.IAsyncResult BeginFindScheduledProcedureStep(string scheduledProcedureStepID, System.AsyncCallback callback, object asyncState);
        
        MPPSWCFDemo.Broker.WCFScheduledProcedureStep EndFindScheduledProcedureStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDs", ReplyAction="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDsApplicationFaultFau" +
            "lt", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        System.Collections.Generic.List<string> GetScheduledProcedureStepIDs(string accessionNumber, string requestedProcedureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDs", ReplyAction="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDsResponse")]
        System.IAsyncResult BeginGetScheduledProcedureStepIDs(string accessionNumber, string requestedProcedureID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetScheduledProcedureStepIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/AddVisit", ReplyAction="http://tempuri.org/IBrokerService/AddVisitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/AddVisitApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void AddVisit(MPPSWCFDemo.Broker.WCFVisit visit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/AddVisit", ReplyAction="http://tempuri.org/IBrokerService/AddVisitResponse")]
        System.IAsyncResult BeginAddVisit(MPPSWCFDemo.Broker.WCFVisit visit, System.AsyncCallback callback, object asyncState);
        
        void EndAddVisit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/UpdateVisit", ReplyAction="http://tempuri.org/IBrokerService/UpdateVisitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/UpdateVisitApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void UpdateVisit(string admissionID, MPPSWCFDemo.Broker.WCFVisit visit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/UpdateVisit", ReplyAction="http://tempuri.org/IBrokerService/UpdateVisitResponse")]
        System.IAsyncResult BeginUpdateVisit(string admissionID, MPPSWCFDemo.Broker.WCFVisit visit, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateVisit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/DeleteVisit", ReplyAction="http://tempuri.org/IBrokerService/DeleteVisitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/DeleteVisitApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void DeleteVisit(string admissionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/DeleteVisit", ReplyAction="http://tempuri.org/IBrokerService/DeleteVisitResponse")]
        System.IAsyncResult BeginDeleteVisit(string admissionID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteVisit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/FindVisit", ReplyAction="http://tempuri.org/IBrokerService/FindVisitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/FindVisitApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        MPPSWCFDemo.Broker.WCFVisit FindVisit(string admissionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/FindVisit", ReplyAction="http://tempuri.org/IBrokerService/FindVisitResponse")]
        System.IAsyncResult BeginFindVisit(string admissionID, System.AsyncCallback callback, object asyncState);
        
        MPPSWCFDemo.Broker.WCFVisit EndFindVisit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/GetAdmissionIDs", ReplyAction="http://tempuri.org/IBrokerService/GetAdmissionIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/GetAdmissionIDsApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        System.Collections.Generic.List<string> GetAdmissionIDs();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/GetAdmissionIDs", ReplyAction="http://tempuri.org/IBrokerService/GetAdmissionIDsResponse")]
        System.IAsyncResult BeginGetAdmissionIDs(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetAdmissionIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/AddMPPS", ReplyAction="http://tempuri.org/IBrokerService/AddMPPSResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/AddMPPSApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void AddMPPS(MPPSWCFDemo.Broker.WCFPPSInformation mpps);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/AddMPPS", ReplyAction="http://tempuri.org/IBrokerService/AddMPPSResponse")]
        System.IAsyncResult BeginAddMPPS(MPPSWCFDemo.Broker.WCFPPSInformation mpps, System.AsyncCallback callback, object asyncState);
        
        void EndAddMPPS(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/DeleteMPPS", ReplyAction="http://tempuri.org/IBrokerService/DeleteMPPSResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/DeleteMPPSApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void DeleteMPPS(string mppsSOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/DeleteMPPS", ReplyAction="http://tempuri.org/IBrokerService/DeleteMPPSResponse")]
        System.IAsyncResult BeginDeleteMPPS(string mppsSOPInstanceUID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteMPPS(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/UpdateMPPS", ReplyAction="http://tempuri.org/IBrokerService/UpdateMPPSResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/UpdateMPPSApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void UpdateMPPS(string mppsSOPInstanceUID, MPPSWCFDemo.Broker.WCFPPSInformation mpps);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/UpdateMPPS", ReplyAction="http://tempuri.org/IBrokerService/UpdateMPPSResponse")]
        System.IAsyncResult BeginUpdateMPPS(string mppsSOPInstanceUID, MPPSWCFDemo.Broker.WCFPPSInformation mpps, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMPPS(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/FindMPPS", ReplyAction="http://tempuri.org/IBrokerService/FindMPPSResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/FindMPPSApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        MPPSWCFDemo.Broker.WCFPPSInformation FindMPPS(string mppsSOPInstanceUID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/FindMPPS", ReplyAction="http://tempuri.org/IBrokerService/FindMPPSResponse")]
        System.IAsyncResult BeginFindMPPS(string mppsSOPInstanceUID, System.AsyncCallback callback, object asyncState);
        
        MPPSWCFDemo.Broker.WCFPPSInformation EndFindMPPS(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/QueryMPPS", ReplyAction="http://tempuri.org/IBrokerService/QueryMPPSResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/QueryMPPSApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        System.Collections.Generic.List<MPPSWCFDemo.Broker.WCFPPSInformation> QueryMPPS(MPPSWCFDemo.Broker.MPPSQuery query);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/QueryMPPS", ReplyAction="http://tempuri.org/IBrokerService/QueryMPPSResponse")]
        System.IAsyncResult BeginQueryMPPS(MPPSWCFDemo.Broker.MPPSQuery query, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<MPPSWCFDemo.Broker.WCFPPSInformation> EndQueryMPPS(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/HandleUnscheduledMPPS", ReplyAction="http://tempuri.org/IBrokerService/HandleUnscheduledMPPSResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/HandleUnscheduledMPPSApplicationFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        void HandleUnscheduledMPPS(string mppsSOPInstanceUID, string scheduledProcedureStepID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/HandleUnscheduledMPPS", ReplyAction="http://tempuri.org/IBrokerService/HandleUnscheduledMPPSResponse")]
        System.IAsyncResult BeginHandleUnscheduledMPPS(string mppsSOPInstanceUID, string scheduledProcedureStepID, System.AsyncCallback callback, object asyncState);
        
        void EndHandleUnscheduledMPPS(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDs", ReplyAction="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(MPPSWCFDemo.Broker.ApplicationFault), Action="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDsApplica" +
            "tionFaultFault", Name="ApplicationFault", Namespace="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")]
        System.Collections.Generic.List<string> GetUnscheduledPerformedProcedureStepUIDs();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDs", ReplyAction="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDsRespons" +
            "e")]
        System.IAsyncResult BeginGetUnscheduledPerformedProcedureStepUIDs(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetUnscheduledPerformedProcedureStepUIDs(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IBrokerServiceChannel : MPPSWCFDemo.Broker.IBrokerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class PerformedProcedureStepExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PerformedProcedureStepExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class FindPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MPPSWCFDemo.Broker.WCFPatient Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MPPSWCFDemo.Broker.WCFPatient)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetPatientIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPatientIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class FindImagingServiceRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindImagingServiceRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MPPSWCFDemo.Broker.ImagingServiceRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MPPSWCFDemo.Broker.ImagingServiceRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAccessionNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccessionNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class FindRequestedProcedureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindRequestedProcedureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MPPSWCFDemo.Broker.WCFRequestedProcedure Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MPPSWCFDemo.Broker.WCFRequestedProcedure)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetRequestedProcedureIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRequestedProcedureIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class FindScheduledProcedureStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindScheduledProcedureStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MPPSWCFDemo.Broker.WCFScheduledProcedureStep Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MPPSWCFDemo.Broker.WCFScheduledProcedureStep)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetScheduledProcedureStepIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScheduledProcedureStepIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class FindVisitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindVisitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MPPSWCFDemo.Broker.WCFVisit Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MPPSWCFDemo.Broker.WCFVisit)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAdmissionIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAdmissionIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class FindMPPSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindMPPSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MPPSWCFDemo.Broker.WCFPPSInformation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MPPSWCFDemo.Broker.WCFPPSInformation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class QueryMPPSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryMPPSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.WCFPPSInformation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<MPPSWCFDemo.Broker.WCFPPSInformation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUnscheduledPerformedProcedureStepUIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUnscheduledPerformedProcedureStepUIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class BrokerServiceClient : System.ServiceModel.ClientBase<MPPSWCFDemo.Broker.IBrokerService>, MPPSWCFDemo.Broker.IBrokerService {
        
        private BeginOperationDelegate onBeginPerformedProcedureStepExistsDelegate;
        
        private EndOperationDelegate onEndPerformedProcedureStepExistsDelegate;
        
        private System.Threading.SendOrPostCallback onPerformedProcedureStepExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddPatientDelegate;
        
        private EndOperationDelegate onEndAddPatientDelegate;
        
        private System.Threading.SendOrPostCallback onAddPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeletePatientDelegate;
        
        private EndOperationDelegate onEndDeletePatientDelegate;
        
        private System.Threading.SendOrPostCallback onDeletePatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePatientDelegate;
        
        private EndOperationDelegate onEndUpdatePatientDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindPatientDelegate;
        
        private EndOperationDelegate onEndFindPatientDelegate;
        
        private System.Threading.SendOrPostCallback onFindPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPatientIDsDelegate;
        
        private EndOperationDelegate onEndGetPatientIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPatientIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddImagingServiceRequestDelegate;
        
        private EndOperationDelegate onEndAddImagingServiceRequestDelegate;
        
        private System.Threading.SendOrPostCallback onAddImagingServiceRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteImagingServiceRequestDelegate;
        
        private EndOperationDelegate onEndDeleteImagingServiceRequestDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteImagingServiceRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateImagingServiceRequestDelegate;
        
        private EndOperationDelegate onEndUpdateImagingServiceRequestDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateImagingServiceRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindImagingServiceRequestDelegate;
        
        private EndOperationDelegate onEndFindImagingServiceRequestDelegate;
        
        private System.Threading.SendOrPostCallback onFindImagingServiceRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccessionNumbersDelegate;
        
        private EndOperationDelegate onEndGetAccessionNumbersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccessionNumbersCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddRequestedProcedureDelegate;
        
        private EndOperationDelegate onEndAddRequestedProcedureDelegate;
        
        private System.Threading.SendOrPostCallback onAddRequestedProcedureCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRequestedProcedureDelegate;
        
        private EndOperationDelegate onEndDeleteRequestedProcedureDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRequestedProcedureCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateRequestedProcedureDelegate;
        
        private EndOperationDelegate onEndUpdateRequestedProcedureDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateRequestedProcedureCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindRequestedProcedureDelegate;
        
        private EndOperationDelegate onEndFindRequestedProcedureDelegate;
        
        private System.Threading.SendOrPostCallback onFindRequestedProcedureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRequestedProcedureIDsDelegate;
        
        private EndOperationDelegate onEndGetRequestedProcedureIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRequestedProcedureIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddScheduledProcedureStepDelegate;
        
        private EndOperationDelegate onEndAddScheduledProcedureStepDelegate;
        
        private System.Threading.SendOrPostCallback onAddScheduledProcedureStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateScheduledProcedureStepDelegate;
        
        private EndOperationDelegate onEndUpdateScheduledProcedureStepDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateScheduledProcedureStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteScheduledProcedureStepDelegate;
        
        private EndOperationDelegate onEndDeleteScheduledProcedureStepDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteScheduledProcedureStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindScheduledProcedureStepDelegate;
        
        private EndOperationDelegate onEndFindScheduledProcedureStepDelegate;
        
        private System.Threading.SendOrPostCallback onFindScheduledProcedureStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScheduledProcedureStepIDsDelegate;
        
        private EndOperationDelegate onEndGetScheduledProcedureStepIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetScheduledProcedureStepIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddVisitDelegate;
        
        private EndOperationDelegate onEndAddVisitDelegate;
        
        private System.Threading.SendOrPostCallback onAddVisitCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateVisitDelegate;
        
        private EndOperationDelegate onEndUpdateVisitDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateVisitCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteVisitDelegate;
        
        private EndOperationDelegate onEndDeleteVisitDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteVisitCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindVisitDelegate;
        
        private EndOperationDelegate onEndFindVisitDelegate;
        
        private System.Threading.SendOrPostCallback onFindVisitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAdmissionIDsDelegate;
        
        private EndOperationDelegate onEndGetAdmissionIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAdmissionIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMPPSDelegate;
        
        private EndOperationDelegate onEndAddMPPSDelegate;
        
        private System.Threading.SendOrPostCallback onAddMPPSCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteMPPSDelegate;
        
        private EndOperationDelegate onEndDeleteMPPSDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteMPPSCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMPPSDelegate;
        
        private EndOperationDelegate onEndUpdateMPPSDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMPPSCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindMPPSDelegate;
        
        private EndOperationDelegate onEndFindMPPSDelegate;
        
        private System.Threading.SendOrPostCallback onFindMPPSCompletedDelegate;
        
        private BeginOperationDelegate onBeginQueryMPPSDelegate;
        
        private EndOperationDelegate onEndQueryMPPSDelegate;
        
        private System.Threading.SendOrPostCallback onQueryMPPSCompletedDelegate;
        
        private BeginOperationDelegate onBeginHandleUnscheduledMPPSDelegate;
        
        private EndOperationDelegate onEndHandleUnscheduledMPPSDelegate;
        
        private System.Threading.SendOrPostCallback onHandleUnscheduledMPPSCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnscheduledPerformedProcedureStepUIDsDelegate;
        
        private EndOperationDelegate onEndGetUnscheduledPerformedProcedureStepUIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnscheduledPerformedProcedureStepUIDsCompletedDelegate;
        
        public BrokerServiceClient() {
        }
        
        public BrokerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BrokerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrokerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrokerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<PerformedProcedureStepExistsCompletedEventArgs> PerformedProcedureStepExistsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddPatientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeletePatientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdatePatientCompleted;
        
        public event System.EventHandler<FindPatientCompletedEventArgs> FindPatientCompleted;
        
        public event System.EventHandler<GetPatientIDsCompletedEventArgs> GetPatientIDsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddImagingServiceRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteImagingServiceRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateImagingServiceRequestCompleted;
        
        public event System.EventHandler<FindImagingServiceRequestCompletedEventArgs> FindImagingServiceRequestCompleted;
        
        public event System.EventHandler<GetAccessionNumbersCompletedEventArgs> GetAccessionNumbersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddRequestedProcedureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteRequestedProcedureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateRequestedProcedureCompleted;
        
        public event System.EventHandler<FindRequestedProcedureCompletedEventArgs> FindRequestedProcedureCompleted;
        
        public event System.EventHandler<GetRequestedProcedureIDsCompletedEventArgs> GetRequestedProcedureIDsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddScheduledProcedureStepCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateScheduledProcedureStepCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteScheduledProcedureStepCompleted;
        
        public event System.EventHandler<FindScheduledProcedureStepCompletedEventArgs> FindScheduledProcedureStepCompleted;
        
        public event System.EventHandler<GetScheduledProcedureStepIDsCompletedEventArgs> GetScheduledProcedureStepIDsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddVisitCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateVisitCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteVisitCompleted;
        
        public event System.EventHandler<FindVisitCompletedEventArgs> FindVisitCompleted;
        
        public event System.EventHandler<GetAdmissionIDsCompletedEventArgs> GetAdmissionIDsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddMPPSCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteMPPSCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMPPSCompleted;
        
        public event System.EventHandler<FindMPPSCompletedEventArgs> FindMPPSCompleted;
        
        public event System.EventHandler<QueryMPPSCompletedEventArgs> QueryMPPSCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> HandleUnscheduledMPPSCompleted;
        
        public event System.EventHandler<GetUnscheduledPerformedProcedureStepUIDsCompletedEventArgs> GetUnscheduledPerformedProcedureStepUIDsCompleted;
        
        public bool PerformedProcedureStepExists(string affectedSOPInstanceUID) {
            return base.Channel.PerformedProcedureStepExists(affectedSOPInstanceUID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPerformedProcedureStepExists(string affectedSOPInstanceUID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPerformedProcedureStepExists(affectedSOPInstanceUID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPerformedProcedureStepExists(System.IAsyncResult result) {
            return base.Channel.EndPerformedProcedureStepExists(result);
        }
        
        private System.IAsyncResult OnBeginPerformedProcedureStepExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string affectedSOPInstanceUID = ((string)(inValues[0]));
            return this.BeginPerformedProcedureStepExists(affectedSOPInstanceUID, callback, asyncState);
        }
        
        private object[] OnEndPerformedProcedureStepExists(System.IAsyncResult result) {
            bool retVal = this.EndPerformedProcedureStepExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPerformedProcedureStepExistsCompleted(object state) {
            if ((this.PerformedProcedureStepExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PerformedProcedureStepExistsCompleted(this, new PerformedProcedureStepExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PerformedProcedureStepExistsAsync(string affectedSOPInstanceUID) {
            this.PerformedProcedureStepExistsAsync(affectedSOPInstanceUID, null);
        }
        
        public void PerformedProcedureStepExistsAsync(string affectedSOPInstanceUID, object userState) {
            if ((this.onBeginPerformedProcedureStepExistsDelegate == null)) {
                this.onBeginPerformedProcedureStepExistsDelegate = new BeginOperationDelegate(this.OnBeginPerformedProcedureStepExists);
            }
            if ((this.onEndPerformedProcedureStepExistsDelegate == null)) {
                this.onEndPerformedProcedureStepExistsDelegate = new EndOperationDelegate(this.OnEndPerformedProcedureStepExists);
            }
            if ((this.onPerformedProcedureStepExistsCompletedDelegate == null)) {
                this.onPerformedProcedureStepExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPerformedProcedureStepExistsCompleted);
            }
            base.InvokeAsync(this.onBeginPerformedProcedureStepExistsDelegate, new object[] {
                        affectedSOPInstanceUID}, this.onEndPerformedProcedureStepExistsDelegate, this.onPerformedProcedureStepExistsCompletedDelegate, userState);
        }
        
        public void AddPatient(MPPSWCFDemo.Broker.WCFPatient patient) {
            base.Channel.AddPatient(patient);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddPatient(MPPSWCFDemo.Broker.WCFPatient patient, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddPatient(patient, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddPatient(System.IAsyncResult result) {
            base.Channel.EndAddPatient(result);
        }
        
        private System.IAsyncResult OnBeginAddPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MPPSWCFDemo.Broker.WCFPatient patient = ((MPPSWCFDemo.Broker.WCFPatient)(inValues[0]));
            return this.BeginAddPatient(patient, callback, asyncState);
        }
        
        private object[] OnEndAddPatient(System.IAsyncResult result) {
            this.EndAddPatient(result);
            return null;
        }
        
        private void OnAddPatientCompleted(object state) {
            if ((this.AddPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddPatientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddPatientAsync(MPPSWCFDemo.Broker.WCFPatient patient) {
            this.AddPatientAsync(patient, null);
        }
        
        public void AddPatientAsync(MPPSWCFDemo.Broker.WCFPatient patient, object userState) {
            if ((this.onBeginAddPatientDelegate == null)) {
                this.onBeginAddPatientDelegate = new BeginOperationDelegate(this.OnBeginAddPatient);
            }
            if ((this.onEndAddPatientDelegate == null)) {
                this.onEndAddPatientDelegate = new EndOperationDelegate(this.OnEndAddPatient);
            }
            if ((this.onAddPatientCompletedDelegate == null)) {
                this.onAddPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPatientCompleted);
            }
            base.InvokeAsync(this.onBeginAddPatientDelegate, new object[] {
                        patient}, this.onEndAddPatientDelegate, this.onAddPatientCompletedDelegate, userState);
        }
        
        public void DeletePatient(string patientId, string issuerOfPatientID) {
            base.Channel.DeletePatient(patientId, issuerOfPatientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeletePatient(string patientId, string issuerOfPatientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeletePatient(patientId, issuerOfPatientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeletePatient(System.IAsyncResult result) {
            base.Channel.EndDeletePatient(result);
        }
        
        private System.IAsyncResult OnBeginDeletePatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string patientId = ((string)(inValues[0]));
            string issuerOfPatientID = ((string)(inValues[1]));
            return this.BeginDeletePatient(patientId, issuerOfPatientID, callback, asyncState);
        }
        
        private object[] OnEndDeletePatient(System.IAsyncResult result) {
            this.EndDeletePatient(result);
            return null;
        }
        
        private void OnDeletePatientCompleted(object state) {
            if ((this.DeletePatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeletePatientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeletePatientAsync(string patientId, string issuerOfPatientID) {
            this.DeletePatientAsync(patientId, issuerOfPatientID, null);
        }
        
        public void DeletePatientAsync(string patientId, string issuerOfPatientID, object userState) {
            if ((this.onBeginDeletePatientDelegate == null)) {
                this.onBeginDeletePatientDelegate = new BeginOperationDelegate(this.OnBeginDeletePatient);
            }
            if ((this.onEndDeletePatientDelegate == null)) {
                this.onEndDeletePatientDelegate = new EndOperationDelegate(this.OnEndDeletePatient);
            }
            if ((this.onDeletePatientCompletedDelegate == null)) {
                this.onDeletePatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeletePatientCompleted);
            }
            base.InvokeAsync(this.onBeginDeletePatientDelegate, new object[] {
                        patientId,
                        issuerOfPatientID}, this.onEndDeletePatientDelegate, this.onDeletePatientCompletedDelegate, userState);
        }
        
        public void UpdatePatient(string origPatientId, string origIssuerOfPatientId, MPPSWCFDemo.Broker.WCFPatient patient) {
            base.Channel.UpdatePatient(origPatientId, origIssuerOfPatientId, patient);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdatePatient(string origPatientId, string origIssuerOfPatientId, MPPSWCFDemo.Broker.WCFPatient patient, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePatient(origPatientId, origIssuerOfPatientId, patient, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdatePatient(System.IAsyncResult result) {
            base.Channel.EndUpdatePatient(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string origPatientId = ((string)(inValues[0]));
            string origIssuerOfPatientId = ((string)(inValues[1]));
            MPPSWCFDemo.Broker.WCFPatient patient = ((MPPSWCFDemo.Broker.WCFPatient)(inValues[2]));
            return this.BeginUpdatePatient(origPatientId, origIssuerOfPatientId, patient, callback, asyncState);
        }
        
        private object[] OnEndUpdatePatient(System.IAsyncResult result) {
            this.EndUpdatePatient(result);
            return null;
        }
        
        private void OnUpdatePatientCompleted(object state) {
            if ((this.UpdatePatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePatientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePatientAsync(string origPatientId, string origIssuerOfPatientId, MPPSWCFDemo.Broker.WCFPatient patient) {
            this.UpdatePatientAsync(origPatientId, origIssuerOfPatientId, patient, null);
        }
        
        public void UpdatePatientAsync(string origPatientId, string origIssuerOfPatientId, MPPSWCFDemo.Broker.WCFPatient patient, object userState) {
            if ((this.onBeginUpdatePatientDelegate == null)) {
                this.onBeginUpdatePatientDelegate = new BeginOperationDelegate(this.OnBeginUpdatePatient);
            }
            if ((this.onEndUpdatePatientDelegate == null)) {
                this.onEndUpdatePatientDelegate = new EndOperationDelegate(this.OnEndUpdatePatient);
            }
            if ((this.onUpdatePatientCompletedDelegate == null)) {
                this.onUpdatePatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePatientCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePatientDelegate, new object[] {
                        origPatientId,
                        origIssuerOfPatientId,
                        patient}, this.onEndUpdatePatientDelegate, this.onUpdatePatientCompletedDelegate, userState);
        }
        
        public MPPSWCFDemo.Broker.WCFPatient FindPatient(string patientID, string issuerOfPatientID) {
            return base.Channel.FindPatient(patientID, issuerOfPatientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindPatient(string patientID, string issuerOfPatientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindPatient(patientID, issuerOfPatientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MPPSWCFDemo.Broker.WCFPatient EndFindPatient(System.IAsyncResult result) {
            return base.Channel.EndFindPatient(result);
        }
        
        private System.IAsyncResult OnBeginFindPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string patientID = ((string)(inValues[0]));
            string issuerOfPatientID = ((string)(inValues[1]));
            return this.BeginFindPatient(patientID, issuerOfPatientID, callback, asyncState);
        }
        
        private object[] OnEndFindPatient(System.IAsyncResult result) {
            MPPSWCFDemo.Broker.WCFPatient retVal = this.EndFindPatient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindPatientCompleted(object state) {
            if ((this.FindPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindPatientCompleted(this, new FindPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindPatientAsync(string patientID, string issuerOfPatientID) {
            this.FindPatientAsync(patientID, issuerOfPatientID, null);
        }
        
        public void FindPatientAsync(string patientID, string issuerOfPatientID, object userState) {
            if ((this.onBeginFindPatientDelegate == null)) {
                this.onBeginFindPatientDelegate = new BeginOperationDelegate(this.OnBeginFindPatient);
            }
            if ((this.onEndFindPatientDelegate == null)) {
                this.onEndFindPatientDelegate = new EndOperationDelegate(this.OnEndFindPatient);
            }
            if ((this.onFindPatientCompletedDelegate == null)) {
                this.onFindPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindPatientCompleted);
            }
            base.InvokeAsync(this.onBeginFindPatientDelegate, new object[] {
                        patientID,
                        issuerOfPatientID}, this.onEndFindPatientDelegate, this.onFindPatientCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetPatientIDs() {
            return base.Channel.GetPatientIDs();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPatientIDs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPatientIDs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetPatientIDs(System.IAsyncResult result) {
            return base.Channel.EndGetPatientIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetPatientIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetPatientIDs(callback, asyncState);
        }
        
        private object[] OnEndGetPatientIDs(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetPatientIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPatientIDsCompleted(object state) {
            if ((this.GetPatientIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPatientIDsCompleted(this, new GetPatientIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPatientIDsAsync() {
            this.GetPatientIDsAsync(null);
        }
        
        public void GetPatientIDsAsync(object userState) {
            if ((this.onBeginGetPatientIDsDelegate == null)) {
                this.onBeginGetPatientIDsDelegate = new BeginOperationDelegate(this.OnBeginGetPatientIDs);
            }
            if ((this.onEndGetPatientIDsDelegate == null)) {
                this.onEndGetPatientIDsDelegate = new EndOperationDelegate(this.OnEndGetPatientIDs);
            }
            if ((this.onGetPatientIDsCompletedDelegate == null)) {
                this.onGetPatientIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPatientIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPatientIDsDelegate, null, this.onEndGetPatientIDsDelegate, this.onGetPatientIDsCompletedDelegate, userState);
        }
        
        public void AddImagingServiceRequest(string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest request) {
            base.Channel.AddImagingServiceRequest(patientID, issuerOfPatientID, request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddImagingServiceRequest(string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddImagingServiceRequest(patientID, issuerOfPatientID, request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddImagingServiceRequest(System.IAsyncResult result) {
            base.Channel.EndAddImagingServiceRequest(result);
        }
        
        private System.IAsyncResult OnBeginAddImagingServiceRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string patientID = ((string)(inValues[0]));
            string issuerOfPatientID = ((string)(inValues[1]));
            MPPSWCFDemo.Broker.ImagingServiceRequest request = ((MPPSWCFDemo.Broker.ImagingServiceRequest)(inValues[2]));
            return this.BeginAddImagingServiceRequest(patientID, issuerOfPatientID, request, callback, asyncState);
        }
        
        private object[] OnEndAddImagingServiceRequest(System.IAsyncResult result) {
            this.EndAddImagingServiceRequest(result);
            return null;
        }
        
        private void OnAddImagingServiceRequestCompleted(object state) {
            if ((this.AddImagingServiceRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddImagingServiceRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddImagingServiceRequestAsync(string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest request) {
            this.AddImagingServiceRequestAsync(patientID, issuerOfPatientID, request, null);
        }
        
        public void AddImagingServiceRequestAsync(string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest request, object userState) {
            if ((this.onBeginAddImagingServiceRequestDelegate == null)) {
                this.onBeginAddImagingServiceRequestDelegate = new BeginOperationDelegate(this.OnBeginAddImagingServiceRequest);
            }
            if ((this.onEndAddImagingServiceRequestDelegate == null)) {
                this.onEndAddImagingServiceRequestDelegate = new EndOperationDelegate(this.OnEndAddImagingServiceRequest);
            }
            if ((this.onAddImagingServiceRequestCompletedDelegate == null)) {
                this.onAddImagingServiceRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddImagingServiceRequestCompleted);
            }
            base.InvokeAsync(this.onBeginAddImagingServiceRequestDelegate, new object[] {
                        patientID,
                        issuerOfPatientID,
                        request}, this.onEndAddImagingServiceRequestDelegate, this.onAddImagingServiceRequestCompletedDelegate, userState);
        }
        
        public void DeleteImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID) {
            base.Channel.DeleteImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteImagingServiceRequest(System.IAsyncResult result) {
            base.Channel.EndDeleteImagingServiceRequest(result);
        }
        
        private System.IAsyncResult OnBeginDeleteImagingServiceRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            string patientID = ((string)(inValues[1]));
            string issuerOfPatientID = ((string)(inValues[2]));
            return this.BeginDeleteImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, callback, asyncState);
        }
        
        private object[] OnEndDeleteImagingServiceRequest(System.IAsyncResult result) {
            this.EndDeleteImagingServiceRequest(result);
            return null;
        }
        
        private void OnDeleteImagingServiceRequestCompleted(object state) {
            if ((this.DeleteImagingServiceRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteImagingServiceRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteImagingServiceRequestAsync(string accessionNumber, string patientID, string issuerOfPatientID) {
            this.DeleteImagingServiceRequestAsync(accessionNumber, patientID, issuerOfPatientID, null);
        }
        
        public void DeleteImagingServiceRequestAsync(string accessionNumber, string patientID, string issuerOfPatientID, object userState) {
            if ((this.onBeginDeleteImagingServiceRequestDelegate == null)) {
                this.onBeginDeleteImagingServiceRequestDelegate = new BeginOperationDelegate(this.OnBeginDeleteImagingServiceRequest);
            }
            if ((this.onEndDeleteImagingServiceRequestDelegate == null)) {
                this.onEndDeleteImagingServiceRequestDelegate = new EndOperationDelegate(this.OnEndDeleteImagingServiceRequest);
            }
            if ((this.onDeleteImagingServiceRequestCompletedDelegate == null)) {
                this.onDeleteImagingServiceRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteImagingServiceRequestCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteImagingServiceRequestDelegate, new object[] {
                        accessionNumber,
                        patientID,
                        issuerOfPatientID}, this.onEndDeleteImagingServiceRequestDelegate, this.onDeleteImagingServiceRequestCompletedDelegate, userState);
        }
        
        public void UpdateImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest entity) {
            base.Channel.UpdateImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, entity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest entity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, entity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateImagingServiceRequest(System.IAsyncResult result) {
            base.Channel.EndUpdateImagingServiceRequest(result);
        }
        
        private System.IAsyncResult OnBeginUpdateImagingServiceRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            string patientID = ((string)(inValues[1]));
            string issuerOfPatientID = ((string)(inValues[2]));
            MPPSWCFDemo.Broker.ImagingServiceRequest entity = ((MPPSWCFDemo.Broker.ImagingServiceRequest)(inValues[3]));
            return this.BeginUpdateImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, entity, callback, asyncState);
        }
        
        private object[] OnEndUpdateImagingServiceRequest(System.IAsyncResult result) {
            this.EndUpdateImagingServiceRequest(result);
            return null;
        }
        
        private void OnUpdateImagingServiceRequestCompleted(object state) {
            if ((this.UpdateImagingServiceRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateImagingServiceRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateImagingServiceRequestAsync(string accessionNumber, string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest entity) {
            this.UpdateImagingServiceRequestAsync(accessionNumber, patientID, issuerOfPatientID, entity, null);
        }
        
        public void UpdateImagingServiceRequestAsync(string accessionNumber, string patientID, string issuerOfPatientID, MPPSWCFDemo.Broker.ImagingServiceRequest entity, object userState) {
            if ((this.onBeginUpdateImagingServiceRequestDelegate == null)) {
                this.onBeginUpdateImagingServiceRequestDelegate = new BeginOperationDelegate(this.OnBeginUpdateImagingServiceRequest);
            }
            if ((this.onEndUpdateImagingServiceRequestDelegate == null)) {
                this.onEndUpdateImagingServiceRequestDelegate = new EndOperationDelegate(this.OnEndUpdateImagingServiceRequest);
            }
            if ((this.onUpdateImagingServiceRequestCompletedDelegate == null)) {
                this.onUpdateImagingServiceRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateImagingServiceRequestCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateImagingServiceRequestDelegate, new object[] {
                        accessionNumber,
                        patientID,
                        issuerOfPatientID,
                        entity}, this.onEndUpdateImagingServiceRequestDelegate, this.onUpdateImagingServiceRequestCompletedDelegate, userState);
        }
        
        public MPPSWCFDemo.Broker.ImagingServiceRequest FindImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID) {
            return base.Channel.FindImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindImagingServiceRequest(string accessionNumber, string patientID, string issuerOfPatientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MPPSWCFDemo.Broker.ImagingServiceRequest EndFindImagingServiceRequest(System.IAsyncResult result) {
            return base.Channel.EndFindImagingServiceRequest(result);
        }
        
        private System.IAsyncResult OnBeginFindImagingServiceRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            string patientID = ((string)(inValues[1]));
            string issuerOfPatientID = ((string)(inValues[2]));
            return this.BeginFindImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, callback, asyncState);
        }
        
        private object[] OnEndFindImagingServiceRequest(System.IAsyncResult result) {
            MPPSWCFDemo.Broker.ImagingServiceRequest retVal = this.EndFindImagingServiceRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindImagingServiceRequestCompleted(object state) {
            if ((this.FindImagingServiceRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindImagingServiceRequestCompleted(this, new FindImagingServiceRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindImagingServiceRequestAsync(string accessionNumber, string patientID, string issuerOfPatientID) {
            this.FindImagingServiceRequestAsync(accessionNumber, patientID, issuerOfPatientID, null);
        }
        
        public void FindImagingServiceRequestAsync(string accessionNumber, string patientID, string issuerOfPatientID, object userState) {
            if ((this.onBeginFindImagingServiceRequestDelegate == null)) {
                this.onBeginFindImagingServiceRequestDelegate = new BeginOperationDelegate(this.OnBeginFindImagingServiceRequest);
            }
            if ((this.onEndFindImagingServiceRequestDelegate == null)) {
                this.onEndFindImagingServiceRequestDelegate = new EndOperationDelegate(this.OnEndFindImagingServiceRequest);
            }
            if ((this.onFindImagingServiceRequestCompletedDelegate == null)) {
                this.onFindImagingServiceRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindImagingServiceRequestCompleted);
            }
            base.InvokeAsync(this.onBeginFindImagingServiceRequestDelegate, new object[] {
                        accessionNumber,
                        patientID,
                        issuerOfPatientID}, this.onEndFindImagingServiceRequestDelegate, this.onFindImagingServiceRequestCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetAccessionNumbers(string patientID, string issuerOfPatientID) {
            return base.Channel.GetAccessionNumbers(patientID, issuerOfPatientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccessionNumbers(string patientID, string issuerOfPatientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccessionNumbers(patientID, issuerOfPatientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetAccessionNumbers(System.IAsyncResult result) {
            return base.Channel.EndGetAccessionNumbers(result);
        }
        
        private System.IAsyncResult OnBeginGetAccessionNumbers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string patientID = ((string)(inValues[0]));
            string issuerOfPatientID = ((string)(inValues[1]));
            return this.BeginGetAccessionNumbers(patientID, issuerOfPatientID, callback, asyncState);
        }
        
        private object[] OnEndGetAccessionNumbers(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetAccessionNumbers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccessionNumbersCompleted(object state) {
            if ((this.GetAccessionNumbersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccessionNumbersCompleted(this, new GetAccessionNumbersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccessionNumbersAsync(string patientID, string issuerOfPatientID) {
            this.GetAccessionNumbersAsync(patientID, issuerOfPatientID, null);
        }
        
        public void GetAccessionNumbersAsync(string patientID, string issuerOfPatientID, object userState) {
            if ((this.onBeginGetAccessionNumbersDelegate == null)) {
                this.onBeginGetAccessionNumbersDelegate = new BeginOperationDelegate(this.OnBeginGetAccessionNumbers);
            }
            if ((this.onEndGetAccessionNumbersDelegate == null)) {
                this.onEndGetAccessionNumbersDelegate = new EndOperationDelegate(this.OnEndGetAccessionNumbers);
            }
            if ((this.onGetAccessionNumbersCompletedDelegate == null)) {
                this.onGetAccessionNumbersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccessionNumbersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccessionNumbersDelegate, new object[] {
                        patientID,
                        issuerOfPatientID}, this.onEndGetAccessionNumbersDelegate, this.onGetAccessionNumbersCompletedDelegate, userState);
        }
        
        public void AddRequestedProcedure(string accessionNumber, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure) {
            base.Channel.AddRequestedProcedure(accessionNumber, procedure);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddRequestedProcedure(string accessionNumber, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRequestedProcedure(accessionNumber, procedure, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddRequestedProcedure(System.IAsyncResult result) {
            base.Channel.EndAddRequestedProcedure(result);
        }
        
        private System.IAsyncResult OnBeginAddRequestedProcedure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            MPPSWCFDemo.Broker.WCFRequestedProcedure procedure = ((MPPSWCFDemo.Broker.WCFRequestedProcedure)(inValues[1]));
            return this.BeginAddRequestedProcedure(accessionNumber, procedure, callback, asyncState);
        }
        
        private object[] OnEndAddRequestedProcedure(System.IAsyncResult result) {
            this.EndAddRequestedProcedure(result);
            return null;
        }
        
        private void OnAddRequestedProcedureCompleted(object state) {
            if ((this.AddRequestedProcedureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddRequestedProcedureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddRequestedProcedureAsync(string accessionNumber, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure) {
            this.AddRequestedProcedureAsync(accessionNumber, procedure, null);
        }
        
        public void AddRequestedProcedureAsync(string accessionNumber, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure, object userState) {
            if ((this.onBeginAddRequestedProcedureDelegate == null)) {
                this.onBeginAddRequestedProcedureDelegate = new BeginOperationDelegate(this.OnBeginAddRequestedProcedure);
            }
            if ((this.onEndAddRequestedProcedureDelegate == null)) {
                this.onEndAddRequestedProcedureDelegate = new EndOperationDelegate(this.OnEndAddRequestedProcedure);
            }
            if ((this.onAddRequestedProcedureCompletedDelegate == null)) {
                this.onAddRequestedProcedureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddRequestedProcedureCompleted);
            }
            base.InvokeAsync(this.onBeginAddRequestedProcedureDelegate, new object[] {
                        accessionNumber,
                        procedure}, this.onEndAddRequestedProcedureDelegate, this.onAddRequestedProcedureCompletedDelegate, userState);
        }
        
        public void DeleteRequestedProcedure(string accessionNumber, string requestedProcedureID) {
            base.Channel.DeleteRequestedProcedure(accessionNumber, requestedProcedureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteRequestedProcedure(string accessionNumber, string requestedProcedureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRequestedProcedure(accessionNumber, requestedProcedureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteRequestedProcedure(System.IAsyncResult result) {
            base.Channel.EndDeleteRequestedProcedure(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRequestedProcedure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            string requestedProcedureID = ((string)(inValues[1]));
            return this.BeginDeleteRequestedProcedure(accessionNumber, requestedProcedureID, callback, asyncState);
        }
        
        private object[] OnEndDeleteRequestedProcedure(System.IAsyncResult result) {
            this.EndDeleteRequestedProcedure(result);
            return null;
        }
        
        private void OnDeleteRequestedProcedureCompleted(object state) {
            if ((this.DeleteRequestedProcedureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRequestedProcedureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRequestedProcedureAsync(string accessionNumber, string requestedProcedureID) {
            this.DeleteRequestedProcedureAsync(accessionNumber, requestedProcedureID, null);
        }
        
        public void DeleteRequestedProcedureAsync(string accessionNumber, string requestedProcedureID, object userState) {
            if ((this.onBeginDeleteRequestedProcedureDelegate == null)) {
                this.onBeginDeleteRequestedProcedureDelegate = new BeginOperationDelegate(this.OnBeginDeleteRequestedProcedure);
            }
            if ((this.onEndDeleteRequestedProcedureDelegate == null)) {
                this.onEndDeleteRequestedProcedureDelegate = new EndOperationDelegate(this.OnEndDeleteRequestedProcedure);
            }
            if ((this.onDeleteRequestedProcedureCompletedDelegate == null)) {
                this.onDeleteRequestedProcedureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRequestedProcedureCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRequestedProcedureDelegate, new object[] {
                        accessionNumber,
                        requestedProcedureID}, this.onEndDeleteRequestedProcedureDelegate, this.onDeleteRequestedProcedureCompletedDelegate, userState);
        }
        
        public void UpdateRequestedProcedure(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure) {
            base.Channel.UpdateRequestedProcedure(accessionNumber, requestedProcedureID, procedure);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateRequestedProcedure(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateRequestedProcedure(accessionNumber, requestedProcedureID, procedure, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateRequestedProcedure(System.IAsyncResult result) {
            base.Channel.EndUpdateRequestedProcedure(result);
        }
        
        private System.IAsyncResult OnBeginUpdateRequestedProcedure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            string requestedProcedureID = ((string)(inValues[1]));
            MPPSWCFDemo.Broker.WCFRequestedProcedure procedure = ((MPPSWCFDemo.Broker.WCFRequestedProcedure)(inValues[2]));
            return this.BeginUpdateRequestedProcedure(accessionNumber, requestedProcedureID, procedure, callback, asyncState);
        }
        
        private object[] OnEndUpdateRequestedProcedure(System.IAsyncResult result) {
            this.EndUpdateRequestedProcedure(result);
            return null;
        }
        
        private void OnUpdateRequestedProcedureCompleted(object state) {
            if ((this.UpdateRequestedProcedureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateRequestedProcedureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateRequestedProcedureAsync(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure) {
            this.UpdateRequestedProcedureAsync(accessionNumber, requestedProcedureID, procedure, null);
        }
        
        public void UpdateRequestedProcedureAsync(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFRequestedProcedure procedure, object userState) {
            if ((this.onBeginUpdateRequestedProcedureDelegate == null)) {
                this.onBeginUpdateRequestedProcedureDelegate = new BeginOperationDelegate(this.OnBeginUpdateRequestedProcedure);
            }
            if ((this.onEndUpdateRequestedProcedureDelegate == null)) {
                this.onEndUpdateRequestedProcedureDelegate = new EndOperationDelegate(this.OnEndUpdateRequestedProcedure);
            }
            if ((this.onUpdateRequestedProcedureCompletedDelegate == null)) {
                this.onUpdateRequestedProcedureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateRequestedProcedureCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateRequestedProcedureDelegate, new object[] {
                        accessionNumber,
                        requestedProcedureID,
                        procedure}, this.onEndUpdateRequestedProcedureDelegate, this.onUpdateRequestedProcedureCompletedDelegate, userState);
        }
        
        public MPPSWCFDemo.Broker.WCFRequestedProcedure FindRequestedProcedure(string accessionNumber, string requestedProcedureID) {
            return base.Channel.FindRequestedProcedure(accessionNumber, requestedProcedureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindRequestedProcedure(string accessionNumber, string requestedProcedureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindRequestedProcedure(accessionNumber, requestedProcedureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MPPSWCFDemo.Broker.WCFRequestedProcedure EndFindRequestedProcedure(System.IAsyncResult result) {
            return base.Channel.EndFindRequestedProcedure(result);
        }
        
        private System.IAsyncResult OnBeginFindRequestedProcedure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            string requestedProcedureID = ((string)(inValues[1]));
            return this.BeginFindRequestedProcedure(accessionNumber, requestedProcedureID, callback, asyncState);
        }
        
        private object[] OnEndFindRequestedProcedure(System.IAsyncResult result) {
            MPPSWCFDemo.Broker.WCFRequestedProcedure retVal = this.EndFindRequestedProcedure(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindRequestedProcedureCompleted(object state) {
            if ((this.FindRequestedProcedureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindRequestedProcedureCompleted(this, new FindRequestedProcedureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindRequestedProcedureAsync(string accessionNumber, string requestedProcedureID) {
            this.FindRequestedProcedureAsync(accessionNumber, requestedProcedureID, null);
        }
        
        public void FindRequestedProcedureAsync(string accessionNumber, string requestedProcedureID, object userState) {
            if ((this.onBeginFindRequestedProcedureDelegate == null)) {
                this.onBeginFindRequestedProcedureDelegate = new BeginOperationDelegate(this.OnBeginFindRequestedProcedure);
            }
            if ((this.onEndFindRequestedProcedureDelegate == null)) {
                this.onEndFindRequestedProcedureDelegate = new EndOperationDelegate(this.OnEndFindRequestedProcedure);
            }
            if ((this.onFindRequestedProcedureCompletedDelegate == null)) {
                this.onFindRequestedProcedureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindRequestedProcedureCompleted);
            }
            base.InvokeAsync(this.onBeginFindRequestedProcedureDelegate, new object[] {
                        accessionNumber,
                        requestedProcedureID}, this.onEndFindRequestedProcedureDelegate, this.onFindRequestedProcedureCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetRequestedProcedureIDs(string accessionNumber) {
            return base.Channel.GetRequestedProcedureIDs(accessionNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRequestedProcedureIDs(string accessionNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRequestedProcedureIDs(accessionNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetRequestedProcedureIDs(System.IAsyncResult result) {
            return base.Channel.EndGetRequestedProcedureIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetRequestedProcedureIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            return this.BeginGetRequestedProcedureIDs(accessionNumber, callback, asyncState);
        }
        
        private object[] OnEndGetRequestedProcedureIDs(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetRequestedProcedureIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRequestedProcedureIDsCompleted(object state) {
            if ((this.GetRequestedProcedureIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRequestedProcedureIDsCompleted(this, new GetRequestedProcedureIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRequestedProcedureIDsAsync(string accessionNumber) {
            this.GetRequestedProcedureIDsAsync(accessionNumber, null);
        }
        
        public void GetRequestedProcedureIDsAsync(string accessionNumber, object userState) {
            if ((this.onBeginGetRequestedProcedureIDsDelegate == null)) {
                this.onBeginGetRequestedProcedureIDsDelegate = new BeginOperationDelegate(this.OnBeginGetRequestedProcedureIDs);
            }
            if ((this.onEndGetRequestedProcedureIDsDelegate == null)) {
                this.onEndGetRequestedProcedureIDsDelegate = new EndOperationDelegate(this.OnEndGetRequestedProcedureIDs);
            }
            if ((this.onGetRequestedProcedureIDsCompletedDelegate == null)) {
                this.onGetRequestedProcedureIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRequestedProcedureIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRequestedProcedureIDsDelegate, new object[] {
                        accessionNumber}, this.onEndGetRequestedProcedureIDsDelegate, this.onGetRequestedProcedureIDsCompletedDelegate, userState);
        }
        
        public void AddScheduledProcedureStep(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep) {
            base.Channel.AddScheduledProcedureStep(accessionNumber, requestedProcedureID, procedureStep);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddScheduledProcedureStep(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddScheduledProcedureStep(accessionNumber, requestedProcedureID, procedureStep, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddScheduledProcedureStep(System.IAsyncResult result) {
            base.Channel.EndAddScheduledProcedureStep(result);
        }
        
        private System.IAsyncResult OnBeginAddScheduledProcedureStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            string requestedProcedureID = ((string)(inValues[1]));
            MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep = ((MPPSWCFDemo.Broker.WCFScheduledProcedureStep)(inValues[2]));
            return this.BeginAddScheduledProcedureStep(accessionNumber, requestedProcedureID, procedureStep, callback, asyncState);
        }
        
        private object[] OnEndAddScheduledProcedureStep(System.IAsyncResult result) {
            this.EndAddScheduledProcedureStep(result);
            return null;
        }
        
        private void OnAddScheduledProcedureStepCompleted(object state) {
            if ((this.AddScheduledProcedureStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddScheduledProcedureStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddScheduledProcedureStepAsync(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep) {
            this.AddScheduledProcedureStepAsync(accessionNumber, requestedProcedureID, procedureStep, null);
        }
        
        public void AddScheduledProcedureStepAsync(string accessionNumber, string requestedProcedureID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep, object userState) {
            if ((this.onBeginAddScheduledProcedureStepDelegate == null)) {
                this.onBeginAddScheduledProcedureStepDelegate = new BeginOperationDelegate(this.OnBeginAddScheduledProcedureStep);
            }
            if ((this.onEndAddScheduledProcedureStepDelegate == null)) {
                this.onEndAddScheduledProcedureStepDelegate = new EndOperationDelegate(this.OnEndAddScheduledProcedureStep);
            }
            if ((this.onAddScheduledProcedureStepCompletedDelegate == null)) {
                this.onAddScheduledProcedureStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddScheduledProcedureStepCompleted);
            }
            base.InvokeAsync(this.onBeginAddScheduledProcedureStepDelegate, new object[] {
                        accessionNumber,
                        requestedProcedureID,
                        procedureStep}, this.onEndAddScheduledProcedureStepDelegate, this.onAddScheduledProcedureStepCompletedDelegate, userState);
        }
        
        public void UpdateScheduledProcedureStep(string scheduledProcedureStepID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep) {
            base.Channel.UpdateScheduledProcedureStep(scheduledProcedureStepID, procedureStep);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateScheduledProcedureStep(string scheduledProcedureStepID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateScheduledProcedureStep(scheduledProcedureStepID, procedureStep, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateScheduledProcedureStep(System.IAsyncResult result) {
            base.Channel.EndUpdateScheduledProcedureStep(result);
        }
        
        private System.IAsyncResult OnBeginUpdateScheduledProcedureStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string scheduledProcedureStepID = ((string)(inValues[0]));
            MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep = ((MPPSWCFDemo.Broker.WCFScheduledProcedureStep)(inValues[1]));
            return this.BeginUpdateScheduledProcedureStep(scheduledProcedureStepID, procedureStep, callback, asyncState);
        }
        
        private object[] OnEndUpdateScheduledProcedureStep(System.IAsyncResult result) {
            this.EndUpdateScheduledProcedureStep(result);
            return null;
        }
        
        private void OnUpdateScheduledProcedureStepCompleted(object state) {
            if ((this.UpdateScheduledProcedureStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateScheduledProcedureStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateScheduledProcedureStepAsync(string scheduledProcedureStepID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep) {
            this.UpdateScheduledProcedureStepAsync(scheduledProcedureStepID, procedureStep, null);
        }
        
        public void UpdateScheduledProcedureStepAsync(string scheduledProcedureStepID, MPPSWCFDemo.Broker.WCFScheduledProcedureStep procedureStep, object userState) {
            if ((this.onBeginUpdateScheduledProcedureStepDelegate == null)) {
                this.onBeginUpdateScheduledProcedureStepDelegate = new BeginOperationDelegate(this.OnBeginUpdateScheduledProcedureStep);
            }
            if ((this.onEndUpdateScheduledProcedureStepDelegate == null)) {
                this.onEndUpdateScheduledProcedureStepDelegate = new EndOperationDelegate(this.OnEndUpdateScheduledProcedureStep);
            }
            if ((this.onUpdateScheduledProcedureStepCompletedDelegate == null)) {
                this.onUpdateScheduledProcedureStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateScheduledProcedureStepCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateScheduledProcedureStepDelegate, new object[] {
                        scheduledProcedureStepID,
                        procedureStep}, this.onEndUpdateScheduledProcedureStepDelegate, this.onUpdateScheduledProcedureStepCompletedDelegate, userState);
        }
        
        public void DeleteScheduledProcedureStep(string scheduledProcedureStepID) {
            base.Channel.DeleteScheduledProcedureStep(scheduledProcedureStepID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteScheduledProcedureStep(string scheduledProcedureStepID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteScheduledProcedureStep(scheduledProcedureStepID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteScheduledProcedureStep(System.IAsyncResult result) {
            base.Channel.EndDeleteScheduledProcedureStep(result);
        }
        
        private System.IAsyncResult OnBeginDeleteScheduledProcedureStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string scheduledProcedureStepID = ((string)(inValues[0]));
            return this.BeginDeleteScheduledProcedureStep(scheduledProcedureStepID, callback, asyncState);
        }
        
        private object[] OnEndDeleteScheduledProcedureStep(System.IAsyncResult result) {
            this.EndDeleteScheduledProcedureStep(result);
            return null;
        }
        
        private void OnDeleteScheduledProcedureStepCompleted(object state) {
            if ((this.DeleteScheduledProcedureStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteScheduledProcedureStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteScheduledProcedureStepAsync(string scheduledProcedureStepID) {
            this.DeleteScheduledProcedureStepAsync(scheduledProcedureStepID, null);
        }
        
        public void DeleteScheduledProcedureStepAsync(string scheduledProcedureStepID, object userState) {
            if ((this.onBeginDeleteScheduledProcedureStepDelegate == null)) {
                this.onBeginDeleteScheduledProcedureStepDelegate = new BeginOperationDelegate(this.OnBeginDeleteScheduledProcedureStep);
            }
            if ((this.onEndDeleteScheduledProcedureStepDelegate == null)) {
                this.onEndDeleteScheduledProcedureStepDelegate = new EndOperationDelegate(this.OnEndDeleteScheduledProcedureStep);
            }
            if ((this.onDeleteScheduledProcedureStepCompletedDelegate == null)) {
                this.onDeleteScheduledProcedureStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteScheduledProcedureStepCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteScheduledProcedureStepDelegate, new object[] {
                        scheduledProcedureStepID}, this.onEndDeleteScheduledProcedureStepDelegate, this.onDeleteScheduledProcedureStepCompletedDelegate, userState);
        }
        
        public MPPSWCFDemo.Broker.WCFScheduledProcedureStep FindScheduledProcedureStep(string scheduledProcedureStepID) {
            return base.Channel.FindScheduledProcedureStep(scheduledProcedureStepID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindScheduledProcedureStep(string scheduledProcedureStepID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindScheduledProcedureStep(scheduledProcedureStepID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MPPSWCFDemo.Broker.WCFScheduledProcedureStep EndFindScheduledProcedureStep(System.IAsyncResult result) {
            return base.Channel.EndFindScheduledProcedureStep(result);
        }
        
        private System.IAsyncResult OnBeginFindScheduledProcedureStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string scheduledProcedureStepID = ((string)(inValues[0]));
            return this.BeginFindScheduledProcedureStep(scheduledProcedureStepID, callback, asyncState);
        }
        
        private object[] OnEndFindScheduledProcedureStep(System.IAsyncResult result) {
            MPPSWCFDemo.Broker.WCFScheduledProcedureStep retVal = this.EndFindScheduledProcedureStep(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindScheduledProcedureStepCompleted(object state) {
            if ((this.FindScheduledProcedureStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindScheduledProcedureStepCompleted(this, new FindScheduledProcedureStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindScheduledProcedureStepAsync(string scheduledProcedureStepID) {
            this.FindScheduledProcedureStepAsync(scheduledProcedureStepID, null);
        }
        
        public void FindScheduledProcedureStepAsync(string scheduledProcedureStepID, object userState) {
            if ((this.onBeginFindScheduledProcedureStepDelegate == null)) {
                this.onBeginFindScheduledProcedureStepDelegate = new BeginOperationDelegate(this.OnBeginFindScheduledProcedureStep);
            }
            if ((this.onEndFindScheduledProcedureStepDelegate == null)) {
                this.onEndFindScheduledProcedureStepDelegate = new EndOperationDelegate(this.OnEndFindScheduledProcedureStep);
            }
            if ((this.onFindScheduledProcedureStepCompletedDelegate == null)) {
                this.onFindScheduledProcedureStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindScheduledProcedureStepCompleted);
            }
            base.InvokeAsync(this.onBeginFindScheduledProcedureStepDelegate, new object[] {
                        scheduledProcedureStepID}, this.onEndFindScheduledProcedureStepDelegate, this.onFindScheduledProcedureStepCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetScheduledProcedureStepIDs(string accessionNumber, string requestedProcedureID) {
            return base.Channel.GetScheduledProcedureStepIDs(accessionNumber, requestedProcedureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScheduledProcedureStepIDs(string accessionNumber, string requestedProcedureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScheduledProcedureStepIDs(accessionNumber, requestedProcedureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetScheduledProcedureStepIDs(System.IAsyncResult result) {
            return base.Channel.EndGetScheduledProcedureStepIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetScheduledProcedureStepIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accessionNumber = ((string)(inValues[0]));
            string requestedProcedureID = ((string)(inValues[1]));
            return this.BeginGetScheduledProcedureStepIDs(accessionNumber, requestedProcedureID, callback, asyncState);
        }
        
        private object[] OnEndGetScheduledProcedureStepIDs(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetScheduledProcedureStepIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScheduledProcedureStepIDsCompleted(object state) {
            if ((this.GetScheduledProcedureStepIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScheduledProcedureStepIDsCompleted(this, new GetScheduledProcedureStepIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScheduledProcedureStepIDsAsync(string accessionNumber, string requestedProcedureID) {
            this.GetScheduledProcedureStepIDsAsync(accessionNumber, requestedProcedureID, null);
        }
        
        public void GetScheduledProcedureStepIDsAsync(string accessionNumber, string requestedProcedureID, object userState) {
            if ((this.onBeginGetScheduledProcedureStepIDsDelegate == null)) {
                this.onBeginGetScheduledProcedureStepIDsDelegate = new BeginOperationDelegate(this.OnBeginGetScheduledProcedureStepIDs);
            }
            if ((this.onEndGetScheduledProcedureStepIDsDelegate == null)) {
                this.onEndGetScheduledProcedureStepIDsDelegate = new EndOperationDelegate(this.OnEndGetScheduledProcedureStepIDs);
            }
            if ((this.onGetScheduledProcedureStepIDsCompletedDelegate == null)) {
                this.onGetScheduledProcedureStepIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScheduledProcedureStepIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetScheduledProcedureStepIDsDelegate, new object[] {
                        accessionNumber,
                        requestedProcedureID}, this.onEndGetScheduledProcedureStepIDsDelegate, this.onGetScheduledProcedureStepIDsCompletedDelegate, userState);
        }
        
        public void AddVisit(MPPSWCFDemo.Broker.WCFVisit visit) {
            base.Channel.AddVisit(visit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddVisit(MPPSWCFDemo.Broker.WCFVisit visit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddVisit(visit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddVisit(System.IAsyncResult result) {
            base.Channel.EndAddVisit(result);
        }
        
        private System.IAsyncResult OnBeginAddVisit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MPPSWCFDemo.Broker.WCFVisit visit = ((MPPSWCFDemo.Broker.WCFVisit)(inValues[0]));
            return this.BeginAddVisit(visit, callback, asyncState);
        }
        
        private object[] OnEndAddVisit(System.IAsyncResult result) {
            this.EndAddVisit(result);
            return null;
        }
        
        private void OnAddVisitCompleted(object state) {
            if ((this.AddVisitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddVisitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddVisitAsync(MPPSWCFDemo.Broker.WCFVisit visit) {
            this.AddVisitAsync(visit, null);
        }
        
        public void AddVisitAsync(MPPSWCFDemo.Broker.WCFVisit visit, object userState) {
            if ((this.onBeginAddVisitDelegate == null)) {
                this.onBeginAddVisitDelegate = new BeginOperationDelegate(this.OnBeginAddVisit);
            }
            if ((this.onEndAddVisitDelegate == null)) {
                this.onEndAddVisitDelegate = new EndOperationDelegate(this.OnEndAddVisit);
            }
            if ((this.onAddVisitCompletedDelegate == null)) {
                this.onAddVisitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddVisitCompleted);
            }
            base.InvokeAsync(this.onBeginAddVisitDelegate, new object[] {
                        visit}, this.onEndAddVisitDelegate, this.onAddVisitCompletedDelegate, userState);
        }
        
        public void UpdateVisit(string admissionID, MPPSWCFDemo.Broker.WCFVisit visit) {
            base.Channel.UpdateVisit(admissionID, visit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateVisit(string admissionID, MPPSWCFDemo.Broker.WCFVisit visit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateVisit(admissionID, visit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateVisit(System.IAsyncResult result) {
            base.Channel.EndUpdateVisit(result);
        }
        
        private System.IAsyncResult OnBeginUpdateVisit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string admissionID = ((string)(inValues[0]));
            MPPSWCFDemo.Broker.WCFVisit visit = ((MPPSWCFDemo.Broker.WCFVisit)(inValues[1]));
            return this.BeginUpdateVisit(admissionID, visit, callback, asyncState);
        }
        
        private object[] OnEndUpdateVisit(System.IAsyncResult result) {
            this.EndUpdateVisit(result);
            return null;
        }
        
        private void OnUpdateVisitCompleted(object state) {
            if ((this.UpdateVisitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateVisitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateVisitAsync(string admissionID, MPPSWCFDemo.Broker.WCFVisit visit) {
            this.UpdateVisitAsync(admissionID, visit, null);
        }
        
        public void UpdateVisitAsync(string admissionID, MPPSWCFDemo.Broker.WCFVisit visit, object userState) {
            if ((this.onBeginUpdateVisitDelegate == null)) {
                this.onBeginUpdateVisitDelegate = new BeginOperationDelegate(this.OnBeginUpdateVisit);
            }
            if ((this.onEndUpdateVisitDelegate == null)) {
                this.onEndUpdateVisitDelegate = new EndOperationDelegate(this.OnEndUpdateVisit);
            }
            if ((this.onUpdateVisitCompletedDelegate == null)) {
                this.onUpdateVisitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateVisitCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateVisitDelegate, new object[] {
                        admissionID,
                        visit}, this.onEndUpdateVisitDelegate, this.onUpdateVisitCompletedDelegate, userState);
        }
        
        public void DeleteVisit(string admissionID) {
            base.Channel.DeleteVisit(admissionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteVisit(string admissionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteVisit(admissionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteVisit(System.IAsyncResult result) {
            base.Channel.EndDeleteVisit(result);
        }
        
        private System.IAsyncResult OnBeginDeleteVisit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string admissionID = ((string)(inValues[0]));
            return this.BeginDeleteVisit(admissionID, callback, asyncState);
        }
        
        private object[] OnEndDeleteVisit(System.IAsyncResult result) {
            this.EndDeleteVisit(result);
            return null;
        }
        
        private void OnDeleteVisitCompleted(object state) {
            if ((this.DeleteVisitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteVisitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteVisitAsync(string admissionID) {
            this.DeleteVisitAsync(admissionID, null);
        }
        
        public void DeleteVisitAsync(string admissionID, object userState) {
            if ((this.onBeginDeleteVisitDelegate == null)) {
                this.onBeginDeleteVisitDelegate = new BeginOperationDelegate(this.OnBeginDeleteVisit);
            }
            if ((this.onEndDeleteVisitDelegate == null)) {
                this.onEndDeleteVisitDelegate = new EndOperationDelegate(this.OnEndDeleteVisit);
            }
            if ((this.onDeleteVisitCompletedDelegate == null)) {
                this.onDeleteVisitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteVisitCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteVisitDelegate, new object[] {
                        admissionID}, this.onEndDeleteVisitDelegate, this.onDeleteVisitCompletedDelegate, userState);
        }
        
        public MPPSWCFDemo.Broker.WCFVisit FindVisit(string admissionID) {
            return base.Channel.FindVisit(admissionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindVisit(string admissionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindVisit(admissionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MPPSWCFDemo.Broker.WCFVisit EndFindVisit(System.IAsyncResult result) {
            return base.Channel.EndFindVisit(result);
        }
        
        private System.IAsyncResult OnBeginFindVisit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string admissionID = ((string)(inValues[0]));
            return this.BeginFindVisit(admissionID, callback, asyncState);
        }
        
        private object[] OnEndFindVisit(System.IAsyncResult result) {
            MPPSWCFDemo.Broker.WCFVisit retVal = this.EndFindVisit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindVisitCompleted(object state) {
            if ((this.FindVisitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindVisitCompleted(this, new FindVisitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindVisitAsync(string admissionID) {
            this.FindVisitAsync(admissionID, null);
        }
        
        public void FindVisitAsync(string admissionID, object userState) {
            if ((this.onBeginFindVisitDelegate == null)) {
                this.onBeginFindVisitDelegate = new BeginOperationDelegate(this.OnBeginFindVisit);
            }
            if ((this.onEndFindVisitDelegate == null)) {
                this.onEndFindVisitDelegate = new EndOperationDelegate(this.OnEndFindVisit);
            }
            if ((this.onFindVisitCompletedDelegate == null)) {
                this.onFindVisitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindVisitCompleted);
            }
            base.InvokeAsync(this.onBeginFindVisitDelegate, new object[] {
                        admissionID}, this.onEndFindVisitDelegate, this.onFindVisitCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetAdmissionIDs() {
            return base.Channel.GetAdmissionIDs();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAdmissionIDs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAdmissionIDs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetAdmissionIDs(System.IAsyncResult result) {
            return base.Channel.EndGetAdmissionIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetAdmissionIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAdmissionIDs(callback, asyncState);
        }
        
        private object[] OnEndGetAdmissionIDs(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetAdmissionIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAdmissionIDsCompleted(object state) {
            if ((this.GetAdmissionIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAdmissionIDsCompleted(this, new GetAdmissionIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAdmissionIDsAsync() {
            this.GetAdmissionIDsAsync(null);
        }
        
        public void GetAdmissionIDsAsync(object userState) {
            if ((this.onBeginGetAdmissionIDsDelegate == null)) {
                this.onBeginGetAdmissionIDsDelegate = new BeginOperationDelegate(this.OnBeginGetAdmissionIDs);
            }
            if ((this.onEndGetAdmissionIDsDelegate == null)) {
                this.onEndGetAdmissionIDsDelegate = new EndOperationDelegate(this.OnEndGetAdmissionIDs);
            }
            if ((this.onGetAdmissionIDsCompletedDelegate == null)) {
                this.onGetAdmissionIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAdmissionIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAdmissionIDsDelegate, null, this.onEndGetAdmissionIDsDelegate, this.onGetAdmissionIDsCompletedDelegate, userState);
        }
        
        public void AddMPPS(MPPSWCFDemo.Broker.WCFPPSInformation mpps) {
            base.Channel.AddMPPS(mpps);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddMPPS(MPPSWCFDemo.Broker.WCFPPSInformation mpps, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMPPS(mpps, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddMPPS(System.IAsyncResult result) {
            base.Channel.EndAddMPPS(result);
        }
        
        private System.IAsyncResult OnBeginAddMPPS(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MPPSWCFDemo.Broker.WCFPPSInformation mpps = ((MPPSWCFDemo.Broker.WCFPPSInformation)(inValues[0]));
            return this.BeginAddMPPS(mpps, callback, asyncState);
        }
        
        private object[] OnEndAddMPPS(System.IAsyncResult result) {
            this.EndAddMPPS(result);
            return null;
        }
        
        private void OnAddMPPSCompleted(object state) {
            if ((this.AddMPPSCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMPPSCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMPPSAsync(MPPSWCFDemo.Broker.WCFPPSInformation mpps) {
            this.AddMPPSAsync(mpps, null);
        }
        
        public void AddMPPSAsync(MPPSWCFDemo.Broker.WCFPPSInformation mpps, object userState) {
            if ((this.onBeginAddMPPSDelegate == null)) {
                this.onBeginAddMPPSDelegate = new BeginOperationDelegate(this.OnBeginAddMPPS);
            }
            if ((this.onEndAddMPPSDelegate == null)) {
                this.onEndAddMPPSDelegate = new EndOperationDelegate(this.OnEndAddMPPS);
            }
            if ((this.onAddMPPSCompletedDelegate == null)) {
                this.onAddMPPSCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMPPSCompleted);
            }
            base.InvokeAsync(this.onBeginAddMPPSDelegate, new object[] {
                        mpps}, this.onEndAddMPPSDelegate, this.onAddMPPSCompletedDelegate, userState);
        }
        
        public void DeleteMPPS(string mppsSOPInstanceUID) {
            base.Channel.DeleteMPPS(mppsSOPInstanceUID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteMPPS(string mppsSOPInstanceUID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteMPPS(mppsSOPInstanceUID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteMPPS(System.IAsyncResult result) {
            base.Channel.EndDeleteMPPS(result);
        }
        
        private System.IAsyncResult OnBeginDeleteMPPS(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string mppsSOPInstanceUID = ((string)(inValues[0]));
            return this.BeginDeleteMPPS(mppsSOPInstanceUID, callback, asyncState);
        }
        
        private object[] OnEndDeleteMPPS(System.IAsyncResult result) {
            this.EndDeleteMPPS(result);
            return null;
        }
        
        private void OnDeleteMPPSCompleted(object state) {
            if ((this.DeleteMPPSCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteMPPSCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteMPPSAsync(string mppsSOPInstanceUID) {
            this.DeleteMPPSAsync(mppsSOPInstanceUID, null);
        }
        
        public void DeleteMPPSAsync(string mppsSOPInstanceUID, object userState) {
            if ((this.onBeginDeleteMPPSDelegate == null)) {
                this.onBeginDeleteMPPSDelegate = new BeginOperationDelegate(this.OnBeginDeleteMPPS);
            }
            if ((this.onEndDeleteMPPSDelegate == null)) {
                this.onEndDeleteMPPSDelegate = new EndOperationDelegate(this.OnEndDeleteMPPS);
            }
            if ((this.onDeleteMPPSCompletedDelegate == null)) {
                this.onDeleteMPPSCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteMPPSCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteMPPSDelegate, new object[] {
                        mppsSOPInstanceUID}, this.onEndDeleteMPPSDelegate, this.onDeleteMPPSCompletedDelegate, userState);
        }
        
        public void UpdateMPPS(string mppsSOPInstanceUID, MPPSWCFDemo.Broker.WCFPPSInformation mpps) {
            base.Channel.UpdateMPPS(mppsSOPInstanceUID, mpps);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMPPS(string mppsSOPInstanceUID, MPPSWCFDemo.Broker.WCFPPSInformation mpps, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMPPS(mppsSOPInstanceUID, mpps, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMPPS(System.IAsyncResult result) {
            base.Channel.EndUpdateMPPS(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMPPS(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string mppsSOPInstanceUID = ((string)(inValues[0]));
            MPPSWCFDemo.Broker.WCFPPSInformation mpps = ((MPPSWCFDemo.Broker.WCFPPSInformation)(inValues[1]));
            return this.BeginUpdateMPPS(mppsSOPInstanceUID, mpps, callback, asyncState);
        }
        
        private object[] OnEndUpdateMPPS(System.IAsyncResult result) {
            this.EndUpdateMPPS(result);
            return null;
        }
        
        private void OnUpdateMPPSCompleted(object state) {
            if ((this.UpdateMPPSCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMPPSCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMPPSAsync(string mppsSOPInstanceUID, MPPSWCFDemo.Broker.WCFPPSInformation mpps) {
            this.UpdateMPPSAsync(mppsSOPInstanceUID, mpps, null);
        }
        
        public void UpdateMPPSAsync(string mppsSOPInstanceUID, MPPSWCFDemo.Broker.WCFPPSInformation mpps, object userState) {
            if ((this.onBeginUpdateMPPSDelegate == null)) {
                this.onBeginUpdateMPPSDelegate = new BeginOperationDelegate(this.OnBeginUpdateMPPS);
            }
            if ((this.onEndUpdateMPPSDelegate == null)) {
                this.onEndUpdateMPPSDelegate = new EndOperationDelegate(this.OnEndUpdateMPPS);
            }
            if ((this.onUpdateMPPSCompletedDelegate == null)) {
                this.onUpdateMPPSCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMPPSCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMPPSDelegate, new object[] {
                        mppsSOPInstanceUID,
                        mpps}, this.onEndUpdateMPPSDelegate, this.onUpdateMPPSCompletedDelegate, userState);
        }
        
        public MPPSWCFDemo.Broker.WCFPPSInformation FindMPPS(string mppsSOPInstanceUID) {
            return base.Channel.FindMPPS(mppsSOPInstanceUID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFindMPPS(string mppsSOPInstanceUID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindMPPS(mppsSOPInstanceUID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MPPSWCFDemo.Broker.WCFPPSInformation EndFindMPPS(System.IAsyncResult result) {
            return base.Channel.EndFindMPPS(result);
        }
        
        private System.IAsyncResult OnBeginFindMPPS(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string mppsSOPInstanceUID = ((string)(inValues[0]));
            return this.BeginFindMPPS(mppsSOPInstanceUID, callback, asyncState);
        }
        
        private object[] OnEndFindMPPS(System.IAsyncResult result) {
            MPPSWCFDemo.Broker.WCFPPSInformation retVal = this.EndFindMPPS(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindMPPSCompleted(object state) {
            if ((this.FindMPPSCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindMPPSCompleted(this, new FindMPPSCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindMPPSAsync(string mppsSOPInstanceUID) {
            this.FindMPPSAsync(mppsSOPInstanceUID, null);
        }
        
        public void FindMPPSAsync(string mppsSOPInstanceUID, object userState) {
            if ((this.onBeginFindMPPSDelegate == null)) {
                this.onBeginFindMPPSDelegate = new BeginOperationDelegate(this.OnBeginFindMPPS);
            }
            if ((this.onEndFindMPPSDelegate == null)) {
                this.onEndFindMPPSDelegate = new EndOperationDelegate(this.OnEndFindMPPS);
            }
            if ((this.onFindMPPSCompletedDelegate == null)) {
                this.onFindMPPSCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindMPPSCompleted);
            }
            base.InvokeAsync(this.onBeginFindMPPSDelegate, new object[] {
                        mppsSOPInstanceUID}, this.onEndFindMPPSDelegate, this.onFindMPPSCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.WCFPPSInformation> QueryMPPS(MPPSWCFDemo.Broker.MPPSQuery query) {
            return base.Channel.QueryMPPS(query);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginQueryMPPS(MPPSWCFDemo.Broker.MPPSQuery query, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryMPPS(query, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<MPPSWCFDemo.Broker.WCFPPSInformation> EndQueryMPPS(System.IAsyncResult result) {
            return base.Channel.EndQueryMPPS(result);
        }
        
        private System.IAsyncResult OnBeginQueryMPPS(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MPPSWCFDemo.Broker.MPPSQuery query = ((MPPSWCFDemo.Broker.MPPSQuery)(inValues[0]));
            return this.BeginQueryMPPS(query, callback, asyncState);
        }
        
        private object[] OnEndQueryMPPS(System.IAsyncResult result) {
            System.Collections.Generic.List<MPPSWCFDemo.Broker.WCFPPSInformation> retVal = this.EndQueryMPPS(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryMPPSCompleted(object state) {
            if ((this.QueryMPPSCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryMPPSCompleted(this, new QueryMPPSCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryMPPSAsync(MPPSWCFDemo.Broker.MPPSQuery query) {
            this.QueryMPPSAsync(query, null);
        }
        
        public void QueryMPPSAsync(MPPSWCFDemo.Broker.MPPSQuery query, object userState) {
            if ((this.onBeginQueryMPPSDelegate == null)) {
                this.onBeginQueryMPPSDelegate = new BeginOperationDelegate(this.OnBeginQueryMPPS);
            }
            if ((this.onEndQueryMPPSDelegate == null)) {
                this.onEndQueryMPPSDelegate = new EndOperationDelegate(this.OnEndQueryMPPS);
            }
            if ((this.onQueryMPPSCompletedDelegate == null)) {
                this.onQueryMPPSCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryMPPSCompleted);
            }
            base.InvokeAsync(this.onBeginQueryMPPSDelegate, new object[] {
                        query}, this.onEndQueryMPPSDelegate, this.onQueryMPPSCompletedDelegate, userState);
        }
        
        public void HandleUnscheduledMPPS(string mppsSOPInstanceUID, string scheduledProcedureStepID) {
            base.Channel.HandleUnscheduledMPPS(mppsSOPInstanceUID, scheduledProcedureStepID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHandleUnscheduledMPPS(string mppsSOPInstanceUID, string scheduledProcedureStepID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHandleUnscheduledMPPS(mppsSOPInstanceUID, scheduledProcedureStepID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndHandleUnscheduledMPPS(System.IAsyncResult result) {
            base.Channel.EndHandleUnscheduledMPPS(result);
        }
        
        private System.IAsyncResult OnBeginHandleUnscheduledMPPS(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string mppsSOPInstanceUID = ((string)(inValues[0]));
            string scheduledProcedureStepID = ((string)(inValues[1]));
            return this.BeginHandleUnscheduledMPPS(mppsSOPInstanceUID, scheduledProcedureStepID, callback, asyncState);
        }
        
        private object[] OnEndHandleUnscheduledMPPS(System.IAsyncResult result) {
            this.EndHandleUnscheduledMPPS(result);
            return null;
        }
        
        private void OnHandleUnscheduledMPPSCompleted(object state) {
            if ((this.HandleUnscheduledMPPSCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HandleUnscheduledMPPSCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HandleUnscheduledMPPSAsync(string mppsSOPInstanceUID, string scheduledProcedureStepID) {
            this.HandleUnscheduledMPPSAsync(mppsSOPInstanceUID, scheduledProcedureStepID, null);
        }
        
        public void HandleUnscheduledMPPSAsync(string mppsSOPInstanceUID, string scheduledProcedureStepID, object userState) {
            if ((this.onBeginHandleUnscheduledMPPSDelegate == null)) {
                this.onBeginHandleUnscheduledMPPSDelegate = new BeginOperationDelegate(this.OnBeginHandleUnscheduledMPPS);
            }
            if ((this.onEndHandleUnscheduledMPPSDelegate == null)) {
                this.onEndHandleUnscheduledMPPSDelegate = new EndOperationDelegate(this.OnEndHandleUnscheduledMPPS);
            }
            if ((this.onHandleUnscheduledMPPSCompletedDelegate == null)) {
                this.onHandleUnscheduledMPPSCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHandleUnscheduledMPPSCompleted);
            }
            base.InvokeAsync(this.onBeginHandleUnscheduledMPPSDelegate, new object[] {
                        mppsSOPInstanceUID,
                        scheduledProcedureStepID}, this.onEndHandleUnscheduledMPPSDelegate, this.onHandleUnscheduledMPPSCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetUnscheduledPerformedProcedureStepUIDs() {
            return base.Channel.GetUnscheduledPerformedProcedureStepUIDs();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUnscheduledPerformedProcedureStepUIDs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUnscheduledPerformedProcedureStepUIDs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetUnscheduledPerformedProcedureStepUIDs(System.IAsyncResult result) {
            return base.Channel.EndGetUnscheduledPerformedProcedureStepUIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetUnscheduledPerformedProcedureStepUIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetUnscheduledPerformedProcedureStepUIDs(callback, asyncState);
        }
        
        private object[] OnEndGetUnscheduledPerformedProcedureStepUIDs(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetUnscheduledPerformedProcedureStepUIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnscheduledPerformedProcedureStepUIDsCompleted(object state) {
            if ((this.GetUnscheduledPerformedProcedureStepUIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnscheduledPerformedProcedureStepUIDsCompleted(this, new GetUnscheduledPerformedProcedureStepUIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnscheduledPerformedProcedureStepUIDsAsync() {
            this.GetUnscheduledPerformedProcedureStepUIDsAsync(null);
        }
        
        public void GetUnscheduledPerformedProcedureStepUIDsAsync(object userState) {
            if ((this.onBeginGetUnscheduledPerformedProcedureStepUIDsDelegate == null)) {
                this.onBeginGetUnscheduledPerformedProcedureStepUIDsDelegate = new BeginOperationDelegate(this.OnBeginGetUnscheduledPerformedProcedureStepUIDs);
            }
            if ((this.onEndGetUnscheduledPerformedProcedureStepUIDsDelegate == null)) {
                this.onEndGetUnscheduledPerformedProcedureStepUIDsDelegate = new EndOperationDelegate(this.OnEndGetUnscheduledPerformedProcedureStepUIDs);
            }
            if ((this.onGetUnscheduledPerformedProcedureStepUIDsCompletedDelegate == null)) {
                this.onGetUnscheduledPerformedProcedureStepUIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnscheduledPerformedProcedureStepUIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnscheduledPerformedProcedureStepUIDsDelegate, null, this.onEndGetUnscheduledPerformedProcedureStepUIDsDelegate, this.onGetUnscheduledPerformedProcedureStepUIDsCompletedDelegate, userState);
        }
    }
}
