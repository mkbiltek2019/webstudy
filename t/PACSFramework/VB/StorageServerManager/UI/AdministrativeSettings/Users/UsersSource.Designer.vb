'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4961
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Namespace Leadtools.Demos.StorageServer.UI.AdministrativeSettings.Users

   '''<summary>
   '''Represents a strongly typed in-memory cache of data.
   '''</summary>
   <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
    Global.System.Serializable(), _
    Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
    Global.System.ComponentModel.ToolboxItem(True), _
    Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
    Global.System.Xml.Serialization.XmlRootAttribute("UsersSource"), _
    Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
   Partial Public Class UsersSource
      Inherits Global.System.Data.DataSet

      Private tableUsers As UsersDataTable

      Private tableUserPermissions As UserPermissionsDataTable

      Private tablePermissions As PermissionsDataTable

      Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Sub New()
         MyBase.New()
         Me.BeginInit()
         Me.InitClass()
         Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
         AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
         AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
         Me.EndInit()
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
         MyBase.New(info, context, False)
         If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
         End If
         Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
         If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Users")) Is Nothing) Then
               MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("UserPermissions")) Is Nothing) Then
               MyBase.Tables.Add(New UserPermissionsDataTable(ds.Tables("UserPermissions")))
            End If
            If (Not (ds.Tables("Permissions")) Is Nothing) Then
               MyBase.Tables.Add(New PermissionsDataTable(ds.Tables("Permissions")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
         Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
         End If
         Me.GetSerializationData(info, context)
         Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
         AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
         AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
       Global.System.ComponentModel.Browsable(False), _
       Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
      Public ReadOnly Property Users() As UsersDataTable
         Get
            Return Me.tableUsers
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
       Global.System.ComponentModel.Browsable(False), _
       Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
      Public ReadOnly Property UserPermissions() As UserPermissionsDataTable
         Get
            Return Me.tableUserPermissions
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
       Global.System.ComponentModel.Browsable(False), _
       Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
      Public ReadOnly Property Permissions() As PermissionsDataTable
         Get
            Return Me.tablePermissions
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
       Global.System.ComponentModel.BrowsableAttribute(True), _
       Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
      Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
         Get
            Return Me._schemaSerializationMode
         End Get
         Set(ByVal value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = Value
         End Set
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
       Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
      Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
         Get
            Return MyBase.Tables
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
       Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
      Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
         Get
            Return MyBase.Relations
         End Get
      End Property

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Sub InitializeDerivedDataSet()
         Me.BeginInit()
         Me.InitClass()
         Me.EndInit()
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Overrides Function Clone() As Global.System.Data.DataSet
         Dim cln As UsersSource = CType(MyBase.Clone, UsersSource)
         cln.InitVars()
         cln.SchemaSerializationMode = Me.SchemaSerializationMode
         Return cln
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Function ShouldSerializeTables() As Boolean
         Return False
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Function ShouldSerializeRelations() As Boolean
         Return False
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
         If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Users")) Is Nothing) Then
               MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("UserPermissions")) Is Nothing) Then
               MyBase.Tables.Add(New UserPermissionsDataTable(ds.Tables("UserPermissions")))
            End If
            If (Not (ds.Tables("Permissions")) Is Nothing) Then
               MyBase.Tables.Add(New PermissionsDataTable(ds.Tables("Permissions")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
         Else
            Me.ReadXml(reader)
            Me.InitVars()
         End If
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
         Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
         Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
         stream.Position = 0
         Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Friend Overloads Sub InitVars()
         Me.InitVars(True)
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Friend Overloads Sub InitVars(ByVal initTable As Boolean)
         Me.tableUsers = CType(MyBase.Tables("Users"), UsersDataTable)
         If (initTable = True) Then
            If (Not (Me.tableUsers) Is Nothing) Then
               Me.tableUsers.InitVars()
            End If
         End If
         Me.tableUserPermissions = CType(MyBase.Tables("UserPermissions"), UserPermissionsDataTable)
         If (initTable = True) Then
            If (Not (Me.tableUserPermissions) Is Nothing) Then
               Me.tableUserPermissions.InitVars()
            End If
         End If
         Me.tablePermissions = CType(MyBase.Tables("Permissions"), PermissionsDataTable)
         If (initTable = True) Then
            If (Not (Me.tablePermissions) Is Nothing) Then
               Me.tablePermissions.InitVars()
            End If
         End If
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Private Sub InitClass()
         Me.DataSetName = "UsersSource"
         Me.Prefix = ""
         Me.Namespace = "http://tempuri.org/Users.xsd"
         Me.EnforceConstraints = True
         Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
         Me.tableUsers = New UsersDataTable
         MyBase.Tables.Add(Me.tableUsers)
         Me.tableUserPermissions = New UserPermissionsDataTable
         MyBase.Tables.Add(Me.tableUserPermissions)
         Me.tablePermissions = New PermissionsDataTable
         MyBase.Tables.Add(Me.tablePermissions)
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Private Function ShouldSerializeUsers() As Boolean
         Return False
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Private Function ShouldSerializeUserPermissions() As Boolean
         Return False
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Private Function ShouldSerializePermissions() As Boolean
         Return False
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
         If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
         End If
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
      Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
         Dim ds As UsersSource = New UsersSource
         Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
         Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
         Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
         any.Namespace = ds.Namespace
         sequence.Items.Add(any)
         type.Particle = sequence
         Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
         If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
               Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
               dsSchema.Write(s1)
               Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
               Do While schemas.MoveNext
                  schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                  s2.SetLength(0)
                  schema.Write(s2)
                  If (s1.Length = s2.Length) Then
                     s1.Position = 0
                     s2.Position = 0

                     Do While ((s1.Position <> s1.Length) _
                                 AndAlso (s1.ReadByte = s2.ReadByte))


                     Loop
                     If (s1.Position = s1.Length) Then
                        Return type
                     End If
                  End If

               Loop
            Finally
               If (Not (s1) Is Nothing) Then
                  s1.Close()
               End If
               If (Not (s2) Is Nothing) Then
                  s2.Close()
               End If
            End Try
         End If
         xs.Add(dsSchema)
         Return type
      End Function

      Public Delegate Sub UsersRowChangeEventHandler(ByVal sender As Object, ByVal e As UsersRowChangeEvent)

      Public Delegate Sub UserPermissionsRowChangeEventHandler(ByVal sender As Object, ByVal e As UserPermissionsRowChangeEvent)

      Public Delegate Sub PermissionsRowChangeEventHandler(ByVal sender As Object, ByVal e As PermissionsRowChangeEvent)

      '''<summary>
      '''Represents the strongly named DataTable class.
      '''</summary>
      <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
       Global.System.Serializable(), _
       Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
      Partial Public Class UsersDataTable
         Inherits Global.System.Data.TypedTableBase(Of UsersRow)

         Private columnUserName As Global.System.Data.DataColumn

         Private columnIsAdmin As Global.System.Data.DataColumn

         Private columnNewPassword As Global.System.Data.DataColumn

         Private columnExpires As Global.System.Data.DataColumn

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub New()
            MyBase.New()
            Me.TableName = "Users"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
               Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
               Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
               Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
               Return Me.columnUserName
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property IsAdminColumn() As Global.System.Data.DataColumn
            Get
               Return Me.columnIsAdmin
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property NewPasswordColumn() As Global.System.Data.DataColumn
            Get
               Return Me.columnNewPassword
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property ExpiresColumn() As Global.System.Data.DataColumn
            Get
               Return Me.columnExpires
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
          Global.System.ComponentModel.Browsable(False)> _
         Public ReadOnly Property Count() As Integer
            Get
               Return Me.Rows.Count
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Default Public ReadOnly Property Item(ByVal index As Integer) As UsersRow
            Get
               Return CType(Me.Rows(index), UsersRow)
            End Get
         End Property

         Public Event UsersRowChanging As UsersRowChangeEventHandler

         Public Event UsersRowChanged As UsersRowChangeEventHandler

         Public Event UsersRowDeleting As UsersRowChangeEventHandler

         Public Event UsersRowDeleted As UsersRowChangeEventHandler

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Overloads Sub AddUsersRow(ByVal row As UsersRow)
            Me.Rows.Add(row)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Overloads Function AddUsersRow(ByVal UserName As String, ByVal IsAdmin As Boolean, ByVal NewPassword As System.Security.SecureString, ByVal Expires As Date) As UsersRow
            Dim rowUsersRow As UsersRow = CType(Me.NewRow, UsersRow)
            Dim columnValuesArray() As Object = New Object() {UserName, IsAdmin, NewPassword, Expires}
            rowUsersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUsersRow)
            Return rowUsersRow
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Function FindByUserName(ByVal UserName As String) As UsersRow
            Return CType(Me.Rows.Find(New Object() {UserName}), UsersRow)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UsersDataTable = CType(MyBase.Clone, UsersDataTable)
            cln.InitVars()
            Return cln
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UsersDataTable
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Friend Sub InitVars()
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnIsAdmin = MyBase.Columns("IsAdmin")
            Me.columnNewPassword = MyBase.Columns("NewPassword")
            Me.columnExpires = MyBase.Columns("Expires")
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Private Sub InitClass()
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnIsAdmin = New Global.System.Data.DataColumn("IsAdmin", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAdmin)
            Me.columnNewPassword = New Global.System.Data.DataColumn("NewPassword", GetType(Global.System.Security.SecureString), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewPassword)
            Me.columnExpires = New Global.System.Data.DataColumn("Expires", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpires)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("UsersKey", New Global.System.Data.DataColumn() {Me.columnUserName}, True))
            Me.columnUserName.AllowDBNull = False
            Me.columnUserName.Unique = True
            Me.columnIsAdmin.AllowDBNull = False
            Me.columnIsAdmin.DefaultValue = CType(False, Boolean)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Function NewUsersRow() As UsersRow
            Return CType(Me.NewRow, UsersRow)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UsersRow(builder)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UsersRow)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsersRowChangedEvent) Is Nothing) Then
               RaiseEvent UsersRowChanged(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsersRowChangingEvent) Is Nothing) Then
               RaiseEvent UsersRowChanging(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsersRowDeletedEvent) Is Nothing) Then
               RaiseEvent UsersRowDeleted(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsersRowDeletingEvent) Is Nothing) Then
               RaiseEvent UsersRowDeleting(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub RemoveUsersRow(ByVal row As UsersRow)
            Me.Rows.Remove(row)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As UsersSource = New UsersSource
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UsersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
               Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
               Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
               Try
                  Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                  dsSchema.Write(s1)
                  Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                  Do While schemas.MoveNext
                     schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                     s2.SetLength(0)
                     schema.Write(s2)
                     If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                           Return type
                        End If
                     End If

                  Loop
               Finally
                  If (Not (s1) Is Nothing) Then
                     s1.Close()
                  End If
                  If (Not (s2) Is Nothing) Then
                     s2.Close()
                  End If
               End Try
            End If
            xs.Add(dsSchema)
            Return type
         End Function
      End Class

      '''<summary>
      '''Represents the strongly named DataTable class.
      '''</summary>
      <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
       Global.System.Serializable(), _
       Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
      Partial Public Class UserPermissionsDataTable
         Inherits Global.System.Data.TypedTableBase(Of UserPermissionsRow)

         Private columnUserName As Global.System.Data.DataColumn

         Private columnPermission As Global.System.Data.DataColumn

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub New()
            MyBase.New()
            Me.TableName = "UserPermissions"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
               Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
               Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
               Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
               Return Me.columnUserName
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property PermissionColumn() As Global.System.Data.DataColumn
            Get
               Return Me.columnPermission
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
          Global.System.ComponentModel.Browsable(False)> _
         Public ReadOnly Property Count() As Integer
            Get
               Return Me.Rows.Count
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Default Public ReadOnly Property Item(ByVal index As Integer) As UserPermissionsRow
            Get
               Return CType(Me.Rows(index), UserPermissionsRow)
            End Get
         End Property

         Public Event UserPermissionsRowChanging As UserPermissionsRowChangeEventHandler

         Public Event UserPermissionsRowChanged As UserPermissionsRowChangeEventHandler

         Public Event UserPermissionsRowDeleting As UserPermissionsRowChangeEventHandler

         Public Event UserPermissionsRowDeleted As UserPermissionsRowChangeEventHandler

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Overloads Sub AddUserPermissionsRow(ByVal row As UserPermissionsRow)
            Me.Rows.Add(row)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Overloads Function AddUserPermissionsRow(ByVal UserName As String, ByVal Permission As String) As UserPermissionsRow
            Dim rowUserPermissionsRow As UserPermissionsRow = CType(Me.NewRow, UserPermissionsRow)
            Dim columnValuesArray() As Object = New Object() {UserName, Permission}
            rowUserPermissionsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUserPermissionsRow)
            Return rowUserPermissionsRow
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Function FindByUserNamePermission(ByVal UserName As String, ByVal Permission As String) As UserPermissionsRow
            Return CType(Me.Rows.Find(New Object() {UserName, Permission}), UserPermissionsRow)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UserPermissionsDataTable = CType(MyBase.Clone, UserPermissionsDataTable)
            cln.InitVars()
            Return cln
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UserPermissionsDataTable
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Friend Sub InitVars()
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnPermission = MyBase.Columns("Permission")
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Private Sub InitClass()
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnPermission = New Global.System.Data.DataColumn("Permission", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermission)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_UserNamePermission", New Global.System.Data.DataColumn() {Me.columnUserName, Me.columnPermission}, True))
            Me.columnUserName.AllowDBNull = False
            Me.columnUserName.MaxLength = 16
            Me.columnPermission.AllowDBNull = False
            Me.columnPermission.MaxLength = 50
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Function NewUserPermissionsRow() As UserPermissionsRow
            Return CType(Me.NewRow, UserPermissionsRow)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UserPermissionsRow(builder)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UserPermissionsRow)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserPermissionsRowChangedEvent) Is Nothing) Then
               RaiseEvent UserPermissionsRowChanged(Me, New UserPermissionsRowChangeEvent(CType(e.Row, UserPermissionsRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserPermissionsRowChangingEvent) Is Nothing) Then
               RaiseEvent UserPermissionsRowChanging(Me, New UserPermissionsRowChangeEvent(CType(e.Row, UserPermissionsRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserPermissionsRowDeletedEvent) Is Nothing) Then
               RaiseEvent UserPermissionsRowDeleted(Me, New UserPermissionsRowChangeEvent(CType(e.Row, UserPermissionsRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserPermissionsRowDeletingEvent) Is Nothing) Then
               RaiseEvent UserPermissionsRowDeleting(Me, New UserPermissionsRowChangeEvent(CType(e.Row, UserPermissionsRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub RemoveUserPermissionsRow(ByVal row As UserPermissionsRow)
            Me.Rows.Remove(row)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As UsersSource = New UsersSource
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UserPermissionsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
               Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
               Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
               Try
                  Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                  dsSchema.Write(s1)
                  Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                  Do While schemas.MoveNext
                     schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                     s2.SetLength(0)
                     schema.Write(s2)
                     If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                           Return type
                        End If
                     End If

                  Loop
               Finally
                  If (Not (s1) Is Nothing) Then
                     s1.Close()
                  End If
                  If (Not (s2) Is Nothing) Then
                     s2.Close()
                  End If
               End Try
            End If
            xs.Add(dsSchema)
            Return type
         End Function
      End Class

      '''<summary>
      '''Represents the strongly named DataTable class.
      '''</summary>
      <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
       Global.System.Serializable(), _
       Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
      Partial Public Class PermissionsDataTable
         Inherits Global.System.Data.TypedTableBase(Of PermissionsRow)

         Private columnPermission As Global.System.Data.DataColumn

         Private columnDescription As Global.System.Data.DataColumn

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub New()
            MyBase.New()
            Me.TableName = "Permissions"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
               Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
               Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
               Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property PermissionColumn() As Global.System.Data.DataColumn
            Get
               Return Me.columnPermission
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
               Return Me.columnDescription
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
          Global.System.ComponentModel.Browsable(False)> _
         Public ReadOnly Property Count() As Integer
            Get
               Return Me.Rows.Count
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Default Public ReadOnly Property Item(ByVal index As Integer) As PermissionsRow
            Get
               Return CType(Me.Rows(index), PermissionsRow)
            End Get
         End Property

         Public Event PermissionsRowChanging As PermissionsRowChangeEventHandler

         Public Event PermissionsRowChanged As PermissionsRowChangeEventHandler

         Public Event PermissionsRowDeleting As PermissionsRowChangeEventHandler

         Public Event PermissionsRowDeleted As PermissionsRowChangeEventHandler

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Overloads Sub AddPermissionsRow(ByVal row As PermissionsRow)
            Me.Rows.Add(row)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Overloads Function AddPermissionsRow(ByVal Permission As String, ByVal Description As String) As PermissionsRow
            Dim rowPermissionsRow As PermissionsRow = CType(Me.NewRow, PermissionsRow)
            Dim columnValuesArray() As Object = New Object() {Permission, Description}
            rowPermissionsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPermissionsRow)
            Return rowPermissionsRow
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Function FindByPermission(ByVal Permission As String) As PermissionsRow
            Return CType(Me.Rows.Find(New Object() {Permission}), PermissionsRow)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PermissionsDataTable = CType(MyBase.Clone, PermissionsDataTable)
            cln.InitVars()
            Return cln
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PermissionsDataTable
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Friend Sub InitVars()
            Me.columnPermission = MyBase.Columns("Permission")
            Me.columnDescription = MyBase.Columns("Description")
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Private Sub InitClass()
            Me.columnPermission = New Global.System.Data.DataColumn("Permission", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermission)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPermission}, True))
            Me.columnPermission.AllowDBNull = False
            Me.columnPermission.Unique = True
            Me.columnPermission.MaxLength = 50
            Me.columnDescription.MaxLength = 100
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Function NewPermissionsRow() As PermissionsRow
            Return CType(Me.NewRow, PermissionsRow)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PermissionsRow(builder)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PermissionsRow)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PermissionsRowChangedEvent) Is Nothing) Then
               RaiseEvent PermissionsRowChanged(Me, New PermissionsRowChangeEvent(CType(e.Row, PermissionsRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PermissionsRowChangingEvent) Is Nothing) Then
               RaiseEvent PermissionsRowChanging(Me, New PermissionsRowChangeEvent(CType(e.Row, PermissionsRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PermissionsRowDeletedEvent) Is Nothing) Then
               RaiseEvent PermissionsRowDeleted(Me, New PermissionsRowChangeEvent(CType(e.Row, PermissionsRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PermissionsRowDeletingEvent) Is Nothing) Then
               RaiseEvent PermissionsRowDeleting(Me, New PermissionsRowChangeEvent(CType(e.Row, PermissionsRow), e.Action))
            End If
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub RemovePermissionsRow(ByVal row As PermissionsRow)
            Me.Rows.Remove(row)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As UsersSource = New UsersSource
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PermissionsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
               Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
               Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
               Try
                  Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                  dsSchema.Write(s1)
                  Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                  Do While schemas.MoveNext
                     schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                     s2.SetLength(0)
                     schema.Write(s2)
                     If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                           Return type
                        End If
                     End If

                  Loop
               Finally
                  If (Not (s1) Is Nothing) Then
                     s1.Close()
                  End If
                  If (Not (s2) Is Nothing) Then
                     s2.Close()
                  End If
               End Try
            End If
            xs.Add(dsSchema)
            Return type
         End Function
      End Class

      '''<summary>
      '''Represents strongly named DataRow class.
      '''</summary>
      <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
      Partial Public Class UsersRow
         Inherits Global.System.Data.DataRow

         Private tableUsers As UsersDataTable

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsers = CType(Me.Table, UsersDataTable)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Property UserName() As String
            Get
               Return CType(Me(Me.tableUsers.UserNameColumn), String)
            End Get
            Set(ByVal value As String)
               Me(Me.tableUsers.UserNameColumn) = Value
            End Set
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Property IsAdmin() As Boolean
            Get
               Return CType(Me(Me.tableUsers.IsAdminColumn), Boolean)
            End Get
            Set(ByVal value As Boolean)
               Me(Me.tableUsers.IsAdminColumn) = Value
            End Set
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Property NewPassword() As System.Security.SecureString
            Get
               Try
                  Return CType(Me(Me.tableUsers.NewPasswordColumn), Global.System.Security.SecureString)
               Catch e As Global.System.InvalidCastException
                  Throw New Global.System.Data.StrongTypingException("The value for column 'NewPassword' in table 'Users' is DBNull.", e)
               End Try
            End Get
            Set(ByVal value As System.Security.SecureString)
               Me(Me.tableUsers.NewPasswordColumn) = Value
            End Set
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Property Expires() As Date
            Get
               Try
                  Return CType(Me(Me.tableUsers.ExpiresColumn), Date)
               Catch e As Global.System.InvalidCastException
                  Throw New Global.System.Data.StrongTypingException("The value for column 'Expires' in table 'Users' is DBNull.", e)
               End Try
            End Get
            Set(ByVal value As Date)
               Me(Me.tableUsers.ExpiresColumn) = Value
            End Set
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Function IsNewPasswordNull() As Boolean
            Return Me.IsNull(Me.tableUsers.NewPasswordColumn)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub SetNewPasswordNull()
            Me(Me.tableUsers.NewPasswordColumn) = Global.System.Convert.DBNull
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Function IsExpiresNull() As Boolean
            Return Me.IsNull(Me.tableUsers.ExpiresColumn)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub SetExpiresNull()
            Me(Me.tableUsers.ExpiresColumn) = Global.System.Convert.DBNull
         End Sub
      End Class

      '''<summary>
      '''Represents strongly named DataRow class.
      '''</summary>
      <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
      Partial Public Class UserPermissionsRow
         Inherits Global.System.Data.DataRow

         Private tableUserPermissions As UserPermissionsDataTable

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserPermissions = CType(Me.Table, UserPermissionsDataTable)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Property UserName() As String
            Get
               Return CType(Me(Me.tableUserPermissions.UserNameColumn), String)
            End Get
            Set(ByVal value As String)
               Me(Me.tableUserPermissions.UserNameColumn) = Value
            End Set
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Property Permission() As String
            Get
               Return CType(Me(Me.tableUserPermissions.PermissionColumn), String)
            End Get
            Set(ByVal value As String)
               Me(Me.tableUserPermissions.PermissionColumn) = Value
            End Set
         End Property
      End Class

      '''<summary>
      '''Represents strongly named DataRow class.
      '''</summary>
      <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
      Partial Public Class PermissionsRow
         Inherits Global.System.Data.DataRow

         Private tablePermissions As PermissionsDataTable

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePermissions = CType(Me.Table, PermissionsDataTable)
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Property Permission() As String
            Get
               Return CType(Me(Me.tablePermissions.PermissionColumn), String)
            End Get
            Set(ByVal value As String)
               Me(Me.tablePermissions.PermissionColumn) = Value
            End Set
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Property Description() As String
            Get
               Try
                  Return CType(Me(Me.tablePermissions.DescriptionColumn), String)
               Catch e As Global.System.InvalidCastException
                  Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Permissions' is DBNull.", e)
               End Try
            End Get
            Set(ByVal value As String)
               Me(Me.tablePermissions.DescriptionColumn) = Value
            End Set
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablePermissions.DescriptionColumn)
         End Function

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub SetDescriptionNull()
            Me(Me.tablePermissions.DescriptionColumn) = Global.System.Convert.DBNull
         End Sub
      End Class

      '''<summary>
      '''Row event argument class
      '''</summary>
      <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
      Public Class UsersRowChangeEvent
         Inherits Global.System.EventArgs

         Private eventRow As UsersRow

         Private eventAction As Global.System.Data.DataRowAction

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub New(ByVal row As UsersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property Row() As UsersRow
            Get
               Return Me.eventRow
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
               Return Me.eventAction
            End Get
         End Property
      End Class

      '''<summary>
      '''Row event argument class
      '''</summary>
      <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
      Public Class UserPermissionsRowChangeEvent
         Inherits Global.System.EventArgs

         Private eventRow As UserPermissionsRow

         Private eventAction As Global.System.Data.DataRowAction

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub New(ByVal row As UserPermissionsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property Row() As UserPermissionsRow
            Get
               Return Me.eventRow
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
               Return Me.eventAction
            End Get
         End Property
      End Class

      '''<summary>
      '''Row event argument class
      '''</summary>
      <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
      Public Class PermissionsRowChangeEvent
         Inherits Global.System.EventArgs

         Private eventRow As PermissionsRow

         Private eventAction As Global.System.Data.DataRowAction

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public Sub New(ByVal row As PermissionsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
         End Sub

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property Row() As PermissionsRow
            Get
               Return Me.eventRow
            End Get
         End Property

         <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
         Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
               Return Me.eventAction
            End Get
         End Property
      End Class
   End Class
End Namespace