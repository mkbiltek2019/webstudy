' *************************************************************
' Copyright (c) 1991-2019 LEAD Technologies, Inc.              
' All Rights Reserved.                                         
' *************************************************************
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4952
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Runtime.Serialization

Namespace ModalityWorklistWCFDemo.Broker

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="CatalogEntity", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.DataAccessLayer.Catalog" & _
       ""), _
    System.SerializableAttribute(), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.ImagingServiceRequest)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.RequestedProcedure)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFRequestedProcedure)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.ReferencedStudySequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.RequestedProcedureCodeSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.Visit)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFVisit)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.ReferencedPatientSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.ScheduledProcedureStep)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFScheduledProcedureStep)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.ScheduledProtocolCodeSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.PPSInformation)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFPPSInformation)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.PPSDiscontinuationReasonCodeSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.PPSRelationship)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.PerformedProtocolCodeSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.PerformedSeriesSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.ProcedureCodeSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.ReferencedImageSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFReferencedImageSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.ReferencedNonImageCompositeSequence)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.PatientInfoforUnscheduledPPS)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.Patient)), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFPatient))> _
   Partial Public Class CatalogEntity
      Inherits Object
      Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged

      <System.NonSerializedAttribute()> _
      Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject

      <Global.System.ComponentModel.BrowsableAttribute(False)> _
      Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
         Get
            Return Me.extensionDataField
         End Get
         Set(ByVal value As System.Runtime.Serialization.ExtensionDataObject)
            Me.extensionDataField = Value
         End Set
      End Property

      Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

      Protected Sub RaisePropertyChanged(ByVal propertyName As String)
         Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
         If (Not (propertyChanged) Is Nothing) Then
            propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
         End If
      End Sub
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="ImagingServiceRequest", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class ImagingServiceRequest
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private AccessionNumberField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private FillerOrderNumber_ImagingServiceRequestField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ImagingServiceRequestCommentsField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PlacerOrderNumber_ImagingServiceRequestField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferringPhysicianFamilyNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferringPhysicianGivenNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferringPhysicianMiddleNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferringPhysicianPrefixField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferringPhysicianSuffixField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestingPhysicianFamilyNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestingPhysicianGivenNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestingPhysicianMiddleNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestingPhysicianPrefixField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestingPhysicianSuffixField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestingServiceField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property AccessionNumber() As String
         Get
            Return Me.AccessionNumberField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.AccessionNumberField, Value) <> True) Then
               Me.AccessionNumberField = Value
               Me.RaisePropertyChanged("AccessionNumber")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property FillerOrderNumber_ImagingServiceRequest() As String
         Get
            Return Me.FillerOrderNumber_ImagingServiceRequestField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.FillerOrderNumber_ImagingServiceRequestField, Value) <> True) Then
               Me.FillerOrderNumber_ImagingServiceRequestField = Value
               Me.RaisePropertyChanged("FillerOrderNumber_ImagingServiceRequest")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ImagingServiceRequestComments() As String
         Get
            Return Me.ImagingServiceRequestCommentsField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ImagingServiceRequestCommentsField, Value) <> True) Then
               Me.ImagingServiceRequestCommentsField = Value
               Me.RaisePropertyChanged("ImagingServiceRequestComments")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PlacerOrderNumber_ImagingServiceRequest() As String
         Get
            Return Me.PlacerOrderNumber_ImagingServiceRequestField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PlacerOrderNumber_ImagingServiceRequestField, Value) <> True) Then
               Me.PlacerOrderNumber_ImagingServiceRequestField = Value
               Me.RaisePropertyChanged("PlacerOrderNumber_ImagingServiceRequest")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferringPhysicianFamilyName() As String
         Get
            Return Me.ReferringPhysicianFamilyNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferringPhysicianFamilyNameField, Value) <> True) Then
               Me.ReferringPhysicianFamilyNameField = Value
               Me.RaisePropertyChanged("ReferringPhysicianFamilyName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferringPhysicianGivenName() As String
         Get
            Return Me.ReferringPhysicianGivenNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferringPhysicianGivenNameField, Value) <> True) Then
               Me.ReferringPhysicianGivenNameField = Value
               Me.RaisePropertyChanged("ReferringPhysicianGivenName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferringPhysicianMiddleName() As String
         Get
            Return Me.ReferringPhysicianMiddleNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferringPhysicianMiddleNameField, Value) <> True) Then
               Me.ReferringPhysicianMiddleNameField = Value
               Me.RaisePropertyChanged("ReferringPhysicianMiddleName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferringPhysicianPrefix() As String
         Get
            Return Me.ReferringPhysicianPrefixField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferringPhysicianPrefixField, Value) <> True) Then
               Me.ReferringPhysicianPrefixField = Value
               Me.RaisePropertyChanged("ReferringPhysicianPrefix")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferringPhysicianSuffix() As String
         Get
            Return Me.ReferringPhysicianSuffixField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferringPhysicianSuffixField, Value) <> True) Then
               Me.ReferringPhysicianSuffixField = Value
               Me.RaisePropertyChanged("ReferringPhysicianSuffix")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestingPhysicianFamilyName() As String
         Get
            Return Me.RequestingPhysicianFamilyNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestingPhysicianFamilyNameField, Value) <> True) Then
               Me.RequestingPhysicianFamilyNameField = Value
               Me.RaisePropertyChanged("RequestingPhysicianFamilyName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestingPhysicianGivenName() As String
         Get
            Return Me.RequestingPhysicianGivenNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestingPhysicianGivenNameField, Value) <> True) Then
               Me.RequestingPhysicianGivenNameField = Value
               Me.RaisePropertyChanged("RequestingPhysicianGivenName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestingPhysicianMiddleName() As String
         Get
            Return Me.RequestingPhysicianMiddleNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestingPhysicianMiddleNameField, Value) <> True) Then
               Me.RequestingPhysicianMiddleNameField = Value
               Me.RaisePropertyChanged("RequestingPhysicianMiddleName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestingPhysicianPrefix() As String
         Get
            Return Me.RequestingPhysicianPrefixField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestingPhysicianPrefixField, Value) <> True) Then
               Me.RequestingPhysicianPrefixField = Value
               Me.RaisePropertyChanged("RequestingPhysicianPrefix")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestingPhysicianSuffix() As String
         Get
            Return Me.RequestingPhysicianSuffixField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestingPhysicianSuffixField, Value) <> True) Then
               Me.RequestingPhysicianSuffixField = Value
               Me.RaisePropertyChanged("RequestingPhysicianSuffix")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestingService() As String
         Get
            Return Me.RequestingServiceField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestingServiceField, Value) <> True) Then
               Me.RequestingServiceField = Value
               Me.RaisePropertyChanged("RequestingService")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="RequestedProcedure", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute(), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFRequestedProcedure))> _
   Partial Public Class RequestedProcedure
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientTransportArrangementsField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestedProcedureCommentsField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestedProcedureDescriptionField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestedProcedureIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestedProcedurePriorityField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private StudyInstanceUIDField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientTransportArrangements() As String
         Get
            Return Me.PatientTransportArrangementsField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientTransportArrangementsField, Value) <> True) Then
               Me.PatientTransportArrangementsField = Value
               Me.RaisePropertyChanged("PatientTransportArrangements")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestedProcedureComments() As String
         Get
            Return Me.RequestedProcedureCommentsField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestedProcedureCommentsField, Value) <> True) Then
               Me.RequestedProcedureCommentsField = Value
               Me.RaisePropertyChanged("RequestedProcedureComments")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestedProcedureDescription() As String
         Get
            Return Me.RequestedProcedureDescriptionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestedProcedureDescriptionField, Value) <> True) Then
               Me.RequestedProcedureDescriptionField = Value
               Me.RaisePropertyChanged("RequestedProcedureDescription")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestedProcedureID() As String
         Get
            Return Me.RequestedProcedureIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestedProcedureIDField, Value) <> True) Then
               Me.RequestedProcedureIDField = Value
               Me.RaisePropertyChanged("RequestedProcedureID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestedProcedurePriority() As String
         Get
            Return Me.RequestedProcedurePriorityField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestedProcedurePriorityField, Value) <> True) Then
               Me.RequestedProcedurePriorityField = Value
               Me.RaisePropertyChanged("RequestedProcedurePriority")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property StudyInstanceUID() As String
         Get
            Return Me.StudyInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.StudyInstanceUIDField, Value) <> True) Then
               Me.StudyInstanceUIDField = Value
               Me.RaisePropertyChanged("StudyInstanceUID")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="WCFRequestedProcedure", [Namespace]:=""), _
    System.SerializableAttribute()> _
   Partial Public Class WCFRequestedProcedure
      Inherits Broker.RequestedProcedure

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedStudySequenceField As System.Collections.Generic.List(Of Broker.ReferencedStudySequence)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestedProcedureCodeSequenceField As Broker.RequestedProcedureCodeSequence

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private VisitField As Broker.WCFVisit

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedStudySequence() As System.Collections.Generic.List(Of Broker.ReferencedStudySequence)
         Get
            Return Me.ReferencedStudySequenceField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of Broker.ReferencedStudySequence))
            If (Object.ReferenceEquals(Me.ReferencedStudySequenceField, Value) <> True) Then
               Me.ReferencedStudySequenceField = Value
               Me.RaisePropertyChanged("ReferencedStudySequence")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestedProcedureCodeSequence() As Broker.RequestedProcedureCodeSequence
         Get
            Return Me.RequestedProcedureCodeSequenceField
         End Get
         Set(ByVal value As Broker.RequestedProcedureCodeSequence)
            If (Object.ReferenceEquals(Me.RequestedProcedureCodeSequenceField, Value) <> True) Then
               Me.RequestedProcedureCodeSequenceField = Value
               Me.RaisePropertyChanged("RequestedProcedureCodeSequence")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property Visit() As Broker.WCFVisit
         Get
            Return Me.VisitField
         End Get
         Set(ByVal value As Broker.WCFVisit)
            If (Object.ReferenceEquals(Me.VisitField, Value) <> True) Then
               Me.VisitField = Value
               Me.RaisePropertyChanged("Visit")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="ReferencedStudySequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class ReferencedStudySequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedSOPClassUIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedSOPInstanceUIDField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedSOPClassUID() As String
         Get
            Return Me.ReferencedSOPClassUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferencedSOPClassUIDField, Value) <> True) Then
               Me.ReferencedSOPClassUIDField = Value
               Me.RaisePropertyChanged("ReferencedSOPClassUID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedSOPInstanceUID() As String
         Get
            Return Me.ReferencedSOPInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferencedSOPInstanceUIDField, Value) <> True) Then
               Me.ReferencedSOPInstanceUIDField = Value
               Me.RaisePropertyChanged("ReferencedSOPInstanceUID")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="RequestedProcedureCodeSequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class RequestedProcedureCodeSequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeMeaningField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeValueField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeDesignatorField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeVersionField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeMeaning() As String
         Get
            Return Me.CodeMeaningField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeMeaningField, Value) <> True) Then
               Me.CodeMeaningField = Value
               Me.RaisePropertyChanged("CodeMeaning")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeValue() As String
         Get
            Return Me.CodeValueField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeValueField, Value) <> True) Then
               Me.CodeValueField = Value
               Me.RaisePropertyChanged("CodeValue")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeDesignator() As String
         Get
            Return Me.CodingSchemeDesignatorField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeDesignatorField, Value) <> True) Then
               Me.CodingSchemeDesignatorField = Value
               Me.RaisePropertyChanged("CodingSchemeDesignator")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeVersion() As String
         Get
            Return Me.CodingSchemeVersionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeVersionField, Value) <> True) Then
               Me.CodingSchemeVersionField = Value
               Me.RaisePropertyChanged("CodingSchemeVersion")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="Visit", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute(), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFVisit))> _
   Partial Public Class Visit
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private AdmissionIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CurrentPatientLocationField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property AdmissionID() As String
         Get
            Return Me.AdmissionIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.AdmissionIDField, Value) <> True) Then
               Me.AdmissionIDField = Value
               Me.RaisePropertyChanged("AdmissionID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CurrentPatientLocation() As String
         Get
            Return Me.CurrentPatientLocationField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CurrentPatientLocationField, Value) <> True) Then
               Me.CurrentPatientLocationField = Value
               Me.RaisePropertyChanged("CurrentPatientLocation")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="WCFVisit", [Namespace]:=""), _
    System.SerializableAttribute()> _
   Partial Public Class WCFVisit
      Inherits Broker.Visit

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedPatientSequenceField As Broker.ReferencedPatientSequence

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedPatientSequence() As Broker.ReferencedPatientSequence
         Get
            Return Me.ReferencedPatientSequenceField
         End Get
         Set(ByVal value As Broker.ReferencedPatientSequence)
            If (Object.ReferenceEquals(Me.ReferencedPatientSequenceField, Value) <> True) Then
               Me.ReferencedPatientSequenceField = Value
               Me.RaisePropertyChanged("ReferencedPatientSequence")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="ReferencedPatientSequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class ReferencedPatientSequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedSOPClassUIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedSOPInstanceUIDField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedSOPClassUID() As String
         Get
            Return Me.ReferencedSOPClassUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferencedSOPClassUIDField, Value) <> True) Then
               Me.ReferencedSOPClassUIDField = Value
               Me.RaisePropertyChanged("ReferencedSOPClassUID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedSOPInstanceUID() As String
         Get
            Return Me.ReferencedSOPInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferencedSOPInstanceUIDField, Value) <> True) Then
               Me.ReferencedSOPInstanceUIDField = Value
               Me.RaisePropertyChanged("ReferencedSOPInstanceUID")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="ScheduledProcedureStep", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute(), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFScheduledProcedureStep))> _
   Partial Public Class ScheduledProcedureStep
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ModalityField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private Pre_MedicationField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestedContrastAgentField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledPerformingPhysicianNameFamilyNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledPerformingPhysicianNameGivenNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledPerformingPhysicianNameMiddleNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledPerformingPhysicianNamePrefixField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledPerformingPhysicianNameSuffixField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledProcedureStepDescriptionField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledProcedureStepIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledProcedureStepLocationField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledProcedureStepStartDate_TimeField As Leadtools.Dicom.Common.DataTypes.DateRange

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property Modality() As String
         Get
            Return Me.ModalityField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ModalityField, Value) <> True) Then
               Me.ModalityField = Value
               Me.RaisePropertyChanged("Modality")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property Pre_Medication() As String
         Get
            Return Me.Pre_MedicationField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.Pre_MedicationField, Value) <> True) Then
               Me.Pre_MedicationField = Value
               Me.RaisePropertyChanged("Pre_Medication")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestedContrastAgent() As String
         Get
            Return Me.RequestedContrastAgentField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestedContrastAgentField, Value) <> True) Then
               Me.RequestedContrastAgentField = Value
               Me.RaisePropertyChanged("RequestedContrastAgent")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledPerformingPhysicianNameFamilyName() As String
         Get
            Return Me.ScheduledPerformingPhysicianNameFamilyNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledPerformingPhysicianNameFamilyNameField, Value) <> True) Then
               Me.ScheduledPerformingPhysicianNameFamilyNameField = Value
               Me.RaisePropertyChanged("ScheduledPerformingPhysicianNameFamilyName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledPerformingPhysicianNameGivenName() As String
         Get
            Return Me.ScheduledPerformingPhysicianNameGivenNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledPerformingPhysicianNameGivenNameField, Value) <> True) Then
               Me.ScheduledPerformingPhysicianNameGivenNameField = Value
               Me.RaisePropertyChanged("ScheduledPerformingPhysicianNameGivenName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledPerformingPhysicianNameMiddleName() As String
         Get
            Return Me.ScheduledPerformingPhysicianNameMiddleNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledPerformingPhysicianNameMiddleNameField, Value) <> True) Then
               Me.ScheduledPerformingPhysicianNameMiddleNameField = Value
               Me.RaisePropertyChanged("ScheduledPerformingPhysicianNameMiddleName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledPerformingPhysicianNamePrefix() As String
         Get
            Return Me.ScheduledPerformingPhysicianNamePrefixField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledPerformingPhysicianNamePrefixField, Value) <> True) Then
               Me.ScheduledPerformingPhysicianNamePrefixField = Value
               Me.RaisePropertyChanged("ScheduledPerformingPhysicianNamePrefix")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledPerformingPhysicianNameSuffix() As String
         Get
            Return Me.ScheduledPerformingPhysicianNameSuffixField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledPerformingPhysicianNameSuffixField, Value) <> True) Then
               Me.ScheduledPerformingPhysicianNameSuffixField = Value
               Me.RaisePropertyChanged("ScheduledPerformingPhysicianNameSuffix")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledProcedureStepDescription() As String
         Get
            Return Me.ScheduledProcedureStepDescriptionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledProcedureStepDescriptionField, Value) <> True) Then
               Me.ScheduledProcedureStepDescriptionField = Value
               Me.RaisePropertyChanged("ScheduledProcedureStepDescription")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledProcedureStepID() As String
         Get
            Return Me.ScheduledProcedureStepIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledProcedureStepIDField, Value) <> True) Then
               Me.ScheduledProcedureStepIDField = Value
               Me.RaisePropertyChanged("ScheduledProcedureStepID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledProcedureStepLocation() As String
         Get
            Return Me.ScheduledProcedureStepLocationField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledProcedureStepLocationField, Value) <> True) Then
               Me.ScheduledProcedureStepLocationField = Value
               Me.RaisePropertyChanged("ScheduledProcedureStepLocation")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledProcedureStepStartDate_Time() As Leadtools.Dicom.Common.DataTypes.DateRange
         Get
            Return Me.ScheduledProcedureStepStartDate_TimeField
         End Get
         Set(ByVal value As Leadtools.Dicom.Common.DataTypes.DateRange)
            If (Object.ReferenceEquals(Me.ScheduledProcedureStepStartDate_TimeField, Value) <> True) Then
               Me.ScheduledProcedureStepStartDate_TimeField = Value
               Me.RaisePropertyChanged("ScheduledProcedureStepStartDate_Time")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="WCFScheduledProcedureStep", [Namespace]:=""), _
    System.SerializableAttribute()> _
   Partial Public Class WCFScheduledProcedureStep
      Inherits Broker.ScheduledProcedureStep

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledProtocolCodeSequenceField As System.Collections.Generic.List(Of Broker.ScheduledProtocolCodeSequence)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledStationAETitleField As System.Collections.Generic.List(Of String)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledStationNameField As System.Collections.Generic.List(Of String)

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledProtocolCodeSequence() As System.Collections.Generic.List(Of Broker.ScheduledProtocolCodeSequence)
         Get
            Return Me.ScheduledProtocolCodeSequenceField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of Broker.ScheduledProtocolCodeSequence))
            If (Object.ReferenceEquals(Me.ScheduledProtocolCodeSequenceField, Value) <> True) Then
               Me.ScheduledProtocolCodeSequenceField = Value
               Me.RaisePropertyChanged("ScheduledProtocolCodeSequence")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledStationAETitle() As System.Collections.Generic.List(Of String)
         Get
            Return Me.ScheduledStationAETitleField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of String))
            If (Object.ReferenceEquals(Me.ScheduledStationAETitleField, Value) <> True) Then
               Me.ScheduledStationAETitleField = Value
               Me.RaisePropertyChanged("ScheduledStationAETitle")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledStationName() As System.Collections.Generic.List(Of String)
         Get
            Return Me.ScheduledStationNameField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of String))
            If (Object.ReferenceEquals(Me.ScheduledStationNameField, Value) <> True) Then
               Me.ScheduledStationNameField = Value
               Me.RaisePropertyChanged("ScheduledStationName")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="ScheduledProtocolCodeSequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class ScheduledProtocolCodeSequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeMeaningField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeValueField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeDesignatorField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeVersionField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeMeaning() As String
         Get
            Return Me.CodeMeaningField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeMeaningField, Value) <> True) Then
               Me.CodeMeaningField = Value
               Me.RaisePropertyChanged("CodeMeaning")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeValue() As String
         Get
            Return Me.CodeValueField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeValueField, Value) <> True) Then
               Me.CodeValueField = Value
               Me.RaisePropertyChanged("CodeValue")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeDesignator() As String
         Get
            Return Me.CodingSchemeDesignatorField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeDesignatorField, Value) <> True) Then
               Me.CodingSchemeDesignatorField = Value
               Me.RaisePropertyChanged("CodingSchemeDesignator")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeVersion() As String
         Get
            Return Me.CodingSchemeVersionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeVersionField, Value) <> True) Then
               Me.CodingSchemeVersionField = Value
               Me.RaisePropertyChanged("CodingSchemeVersion")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="PPSInformation", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute(), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFPPSInformation))> _
   Partial Public Class PPSInformation
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CommentsonthePerformedProcedureStepField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private MPPSSOPInstanceUIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ModalityField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedLocationField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedProcedureStepDescriptionField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedProcedureStepEndDateField As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedProcedureStepEndTimeField As System.Nullable(Of Leadtools.Dicom.DicomTimeRangeValue)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedProcedureStepIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedProcedureStepStartDateField As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedProcedureStepStartTimeField As System.Nullable(Of Leadtools.Dicom.DicomTimeRangeValue)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedProcedureStepStatusField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedProcedureTypeDescriptionField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedStationAETitleField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedStationNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private StudyIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private StudyInstanceUIDField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CommentsonthePerformedProcedureStep() As String
         Get
            Return Me.CommentsonthePerformedProcedureStepField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CommentsonthePerformedProcedureStepField, Value) <> True) Then
               Me.CommentsonthePerformedProcedureStepField = Value
               Me.RaisePropertyChanged("CommentsonthePerformedProcedureStep")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property MPPSSOPInstanceUID() As String
         Get
            Return Me.MPPSSOPInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.MPPSSOPInstanceUIDField, Value) <> True) Then
               Me.MPPSSOPInstanceUIDField = Value
               Me.RaisePropertyChanged("MPPSSOPInstanceUID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property Modality() As String
         Get
            Return Me.ModalityField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ModalityField, Value) <> True) Then
               Me.ModalityField = Value
               Me.RaisePropertyChanged("Modality")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedLocation() As String
         Get
            Return Me.PerformedLocationField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PerformedLocationField, Value) <> True) Then
               Me.PerformedLocationField = Value
               Me.RaisePropertyChanged("PerformedLocation")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedProcedureStepDescription() As String
         Get
            Return Me.PerformedProcedureStepDescriptionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PerformedProcedureStepDescriptionField, Value) <> True) Then
               Me.PerformedProcedureStepDescriptionField = Value
               Me.RaisePropertyChanged("PerformedProcedureStepDescription")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedProcedureStepEndDate() As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)
         Get
            Return Me.PerformedProcedureStepEndDateField
         End Get
         Set(ByVal value As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue))
            If (Me.PerformedProcedureStepEndDateField.Equals(Value) <> True) Then
               Me.PerformedProcedureStepEndDateField = Value
               Me.RaisePropertyChanged("PerformedProcedureStepEndDate")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedProcedureStepEndTime() As System.Nullable(Of Leadtools.Dicom.DicomTimeRangeValue)
         Get
            Return Me.PerformedProcedureStepEndTimeField
         End Get
         Set(ByVal value As System.Nullable(Of Leadtools.Dicom.DicomTimeRangeValue))
            If (Me.PerformedProcedureStepEndTimeField.Equals(Value) <> True) Then
               Me.PerformedProcedureStepEndTimeField = Value
               Me.RaisePropertyChanged("PerformedProcedureStepEndTime")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedProcedureStepID() As String
         Get
            Return Me.PerformedProcedureStepIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PerformedProcedureStepIDField, Value) <> True) Then
               Me.PerformedProcedureStepIDField = Value
               Me.RaisePropertyChanged("PerformedProcedureStepID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedProcedureStepStartDate() As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)
         Get
            Return Me.PerformedProcedureStepStartDateField
         End Get
         Set(ByVal value As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue))
            If (Me.PerformedProcedureStepStartDateField.Equals(Value) <> True) Then
               Me.PerformedProcedureStepStartDateField = Value
               Me.RaisePropertyChanged("PerformedProcedureStepStartDate")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedProcedureStepStartTime() As System.Nullable(Of Leadtools.Dicom.DicomTimeRangeValue)
         Get
            Return Me.PerformedProcedureStepStartTimeField
         End Get
         Set(ByVal value As System.Nullable(Of Leadtools.Dicom.DicomTimeRangeValue))
            If (Me.PerformedProcedureStepStartTimeField.Equals(Value) <> True) Then
               Me.PerformedProcedureStepStartTimeField = Value
               Me.RaisePropertyChanged("PerformedProcedureStepStartTime")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedProcedureStepStatus() As String
         Get
            Return Me.PerformedProcedureStepStatusField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PerformedProcedureStepStatusField, Value) <> True) Then
               Me.PerformedProcedureStepStatusField = Value
               Me.RaisePropertyChanged("PerformedProcedureStepStatus")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedProcedureTypeDescription() As String
         Get
            Return Me.PerformedProcedureTypeDescriptionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PerformedProcedureTypeDescriptionField, Value) <> True) Then
               Me.PerformedProcedureTypeDescriptionField = Value
               Me.RaisePropertyChanged("PerformedProcedureTypeDescription")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedStationAETitle() As String
         Get
            Return Me.PerformedStationAETitleField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PerformedStationAETitleField, Value) <> True) Then
               Me.PerformedStationAETitleField = Value
               Me.RaisePropertyChanged("PerformedStationAETitle")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedStationName() As String
         Get
            Return Me.PerformedStationNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PerformedStationNameField, Value) <> True) Then
               Me.PerformedStationNameField = Value
               Me.RaisePropertyChanged("PerformedStationName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property StudyID() As String
         Get
            Return Me.StudyIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.StudyIDField, Value) <> True) Then
               Me.StudyIDField = Value
               Me.RaisePropertyChanged("StudyID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property StudyInstanceUID() As String
         Get
            Return Me.StudyInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.StudyInstanceUIDField, Value) <> True) Then
               Me.StudyInstanceUIDField = Value
               Me.RaisePropertyChanged("StudyInstanceUID")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="WCFPPSInformation", [Namespace]:=""), _
    System.SerializableAttribute()> _
   Partial Public Class WCFPPSInformation
      Inherits Broker.PPSInformation

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PPSDiscontinuationReasonCodeSequenceField As System.Collections.Generic.List(Of Broker.PPSDiscontinuationReasonCodeSequence)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PPSRelationShipField As System.Collections.Generic.List(Of Broker.PPSRelationship)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientField As Broker.WCFPatient

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedProtocolCodeSequenceField As System.Collections.Generic.List(Of Broker.PerformedProtocolCodeSequence)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformedSeriesSequenceField As System.Collections.Generic.List(Of Broker.PerformedSeriesSequence)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ProcedureCodeSequenceField As System.Collections.Generic.List(Of Broker.ProcedureCodeSequence)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedImageSequenceField As System.Collections.Generic.List(Of Broker.WCFReferencedImageSequence)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedNonImageCompositeSequenceField As System.Collections.Generic.List(Of Broker.ReferencedNonImageCompositeSequence)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private UnscheduledPatientField As Broker.PatientInfoforUnscheduledPPS

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PPSDiscontinuationReasonCodeSequence() As System.Collections.Generic.List(Of Broker.PPSDiscontinuationReasonCodeSequence)
         Get
            Return Me.PPSDiscontinuationReasonCodeSequenceField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of Broker.PPSDiscontinuationReasonCodeSequence))
            If (Object.ReferenceEquals(Me.PPSDiscontinuationReasonCodeSequenceField, Value) <> True) Then
               Me.PPSDiscontinuationReasonCodeSequenceField = Value
               Me.RaisePropertyChanged("PPSDiscontinuationReasonCodeSequence")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PPSRelationShip() As System.Collections.Generic.List(Of Broker.PPSRelationship)
         Get
            Return Me.PPSRelationShipField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of Broker.PPSRelationship))
            If (Object.ReferenceEquals(Me.PPSRelationShipField, Value) <> True) Then
               Me.PPSRelationShipField = Value
               Me.RaisePropertyChanged("PPSRelationShip")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property Patient() As Broker.WCFPatient
         Get
            Return Me.PatientField
         End Get
         Set(ByVal value As Broker.WCFPatient)
            If (Object.ReferenceEquals(Me.PatientField, Value) <> True) Then
               Me.PatientField = Value
               Me.RaisePropertyChanged("Patient")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedProtocolCodeSequence() As System.Collections.Generic.List(Of Broker.PerformedProtocolCodeSequence)
         Get
            Return Me.PerformedProtocolCodeSequenceField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of Broker.PerformedProtocolCodeSequence))
            If (Object.ReferenceEquals(Me.PerformedProtocolCodeSequenceField, Value) <> True) Then
               Me.PerformedProtocolCodeSequenceField = Value
               Me.RaisePropertyChanged("PerformedProtocolCodeSequence")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformedSeriesSequence() As System.Collections.Generic.List(Of Broker.PerformedSeriesSequence)
         Get
            Return Me.PerformedSeriesSequenceField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of Broker.PerformedSeriesSequence))
            If (Object.ReferenceEquals(Me.PerformedSeriesSequenceField, Value) <> True) Then
               Me.PerformedSeriesSequenceField = Value
               Me.RaisePropertyChanged("PerformedSeriesSequence")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ProcedureCodeSequence() As System.Collections.Generic.List(Of Broker.ProcedureCodeSequence)
         Get
            Return Me.ProcedureCodeSequenceField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of Broker.ProcedureCodeSequence))
            If (Object.ReferenceEquals(Me.ProcedureCodeSequenceField, Value) <> True) Then
               Me.ProcedureCodeSequenceField = Value
               Me.RaisePropertyChanged("ProcedureCodeSequence")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedImageSequence() As System.Collections.Generic.List(Of Broker.WCFReferencedImageSequence)
         Get
            Return Me.ReferencedImageSequenceField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of Broker.WCFReferencedImageSequence))
            If (Object.ReferenceEquals(Me.ReferencedImageSequenceField, Value) <> True) Then
               Me.ReferencedImageSequenceField = Value
               Me.RaisePropertyChanged("ReferencedImageSequence")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedNonImageCompositeSequence() As System.Collections.Generic.List(Of Broker.ReferencedNonImageCompositeSequence)
         Get
            Return Me.ReferencedNonImageCompositeSequenceField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of Broker.ReferencedNonImageCompositeSequence))
            If (Object.ReferenceEquals(Me.ReferencedNonImageCompositeSequenceField, Value) <> True) Then
               Me.ReferencedNonImageCompositeSequenceField = Value
               Me.RaisePropertyChanged("ReferencedNonImageCompositeSequence")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property UnscheduledPatient() As Broker.PatientInfoforUnscheduledPPS
         Get
            Return Me.UnscheduledPatientField
         End Get
         Set(ByVal value As Broker.PatientInfoforUnscheduledPPS)
            If (Object.ReferenceEquals(Me.UnscheduledPatientField, Value) <> True) Then
               Me.UnscheduledPatientField = Value
               Me.RaisePropertyChanged("UnscheduledPatient")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="PPSDiscontinuationReasonCodeSequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class PPSDiscontinuationReasonCodeSequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeMeaningField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeValueField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeDesignatorField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeVersionField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private OrderNumberField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeMeaning() As String
         Get
            Return Me.CodeMeaningField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeMeaningField, Value) <> True) Then
               Me.CodeMeaningField = Value
               Me.RaisePropertyChanged("CodeMeaning")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeValue() As String
         Get
            Return Me.CodeValueField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeValueField, Value) <> True) Then
               Me.CodeValueField = Value
               Me.RaisePropertyChanged("CodeValue")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeDesignator() As String
         Get
            Return Me.CodingSchemeDesignatorField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeDesignatorField, Value) <> True) Then
               Me.CodingSchemeDesignatorField = Value
               Me.RaisePropertyChanged("CodingSchemeDesignator")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeVersion() As String
         Get
            Return Me.CodingSchemeVersionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeVersionField, Value) <> True) Then
               Me.CodingSchemeVersionField = Value
               Me.RaisePropertyChanged("CodingSchemeVersion")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property OrderNumber() As String
         Get
            Return Me.OrderNumberField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.OrderNumberField, Value) <> True) Then
               Me.OrderNumberField = Value
               Me.RaisePropertyChanged("OrderNumber")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="PPSRelationship", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class PPSRelationship
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ItmeOrderNumberField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledProcedureStepIDField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ItmeOrderNumber() As String
         Get
            Return Me.ItmeOrderNumberField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ItmeOrderNumberField, Value) <> True) Then
               Me.ItmeOrderNumberField = Value
               Me.RaisePropertyChanged("ItmeOrderNumber")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledProcedureStepID() As String
         Get
            Return Me.ScheduledProcedureStepIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledProcedureStepIDField, Value) <> True) Then
               Me.ScheduledProcedureStepIDField = Value
               Me.RaisePropertyChanged("ScheduledProcedureStepID")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="PerformedProtocolCodeSequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class PerformedProtocolCodeSequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeMeaningField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeValueField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeDesignatorField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeVersionField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private OrderNumberField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeMeaning() As String
         Get
            Return Me.CodeMeaningField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeMeaningField, Value) <> True) Then
               Me.CodeMeaningField = Value
               Me.RaisePropertyChanged("CodeMeaning")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeValue() As String
         Get
            Return Me.CodeValueField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeValueField, Value) <> True) Then
               Me.CodeValueField = Value
               Me.RaisePropertyChanged("CodeValue")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeDesignator() As String
         Get
            Return Me.CodingSchemeDesignatorField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeDesignatorField, Value) <> True) Then
               Me.CodingSchemeDesignatorField = Value
               Me.RaisePropertyChanged("CodingSchemeDesignator")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeVersion() As String
         Get
            Return Me.CodingSchemeVersionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeVersionField, Value) <> True) Then
               Me.CodingSchemeVersionField = Value
               Me.RaisePropertyChanged("CodingSchemeVersion")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property OrderNumber() As String
         Get
            Return Me.OrderNumberField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.OrderNumberField, Value) <> True) Then
               Me.OrderNumberField = Value
               Me.RaisePropertyChanged("OrderNumber")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="PerformedSeriesSequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class PerformedSeriesSequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private OperatorNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private OrderNumberField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PerformingPhysicianNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ProtocolNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RetrieveAETitleField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private SeriesDescriptionField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private SeriesInstanceUIDField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property OperatorName() As String
         Get
            Return Me.OperatorNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.OperatorNameField, Value) <> True) Then
               Me.OperatorNameField = Value
               Me.RaisePropertyChanged("OperatorName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property OrderNumber() As String
         Get
            Return Me.OrderNumberField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.OrderNumberField, Value) <> True) Then
               Me.OrderNumberField = Value
               Me.RaisePropertyChanged("OrderNumber")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PerformingPhysicianName() As String
         Get
            Return Me.PerformingPhysicianNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PerformingPhysicianNameField, Value) <> True) Then
               Me.PerformingPhysicianNameField = Value
               Me.RaisePropertyChanged("PerformingPhysicianName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ProtocolName() As String
         Get
            Return Me.ProtocolNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ProtocolNameField, Value) <> True) Then
               Me.ProtocolNameField = Value
               Me.RaisePropertyChanged("ProtocolName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RetrieveAETitle() As String
         Get
            Return Me.RetrieveAETitleField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RetrieveAETitleField, Value) <> True) Then
               Me.RetrieveAETitleField = Value
               Me.RaisePropertyChanged("RetrieveAETitle")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property SeriesDescription() As String
         Get
            Return Me.SeriesDescriptionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.SeriesDescriptionField, Value) <> True) Then
               Me.SeriesDescriptionField = Value
               Me.RaisePropertyChanged("SeriesDescription")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property SeriesInstanceUID() As String
         Get
            Return Me.SeriesInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.SeriesInstanceUIDField, Value) <> True) Then
               Me.SeriesInstanceUIDField = Value
               Me.RaisePropertyChanged("SeriesInstanceUID")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="ProcedureCodeSequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class ProcedureCodeSequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeMeaningField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodeValueField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeDesignatorField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private CodingSchemeVersionField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private OrderNumberField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeMeaning() As String
         Get
            Return Me.CodeMeaningField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeMeaningField, Value) <> True) Then
               Me.CodeMeaningField = Value
               Me.RaisePropertyChanged("CodeMeaning")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodeValue() As String
         Get
            Return Me.CodeValueField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodeValueField, Value) <> True) Then
               Me.CodeValueField = Value
               Me.RaisePropertyChanged("CodeValue")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeDesignator() As String
         Get
            Return Me.CodingSchemeDesignatorField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeDesignatorField, Value) <> True) Then
               Me.CodingSchemeDesignatorField = Value
               Me.RaisePropertyChanged("CodingSchemeDesignator")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property CodingSchemeVersion() As String
         Get
            Return Me.CodingSchemeVersionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.CodingSchemeVersionField, Value) <> True) Then
               Me.CodingSchemeVersionField = Value
               Me.RaisePropertyChanged("CodingSchemeVersion")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property OrderNumber() As String
         Get
            Return Me.OrderNumberField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.OrderNumberField, Value) <> True) Then
               Me.OrderNumberField = Value
               Me.RaisePropertyChanged("OrderNumber")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="ReferencedImageSequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute(), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFReferencedImageSequence))> _
   Partial Public Class ReferencedImageSequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private OrderNumberField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedSOPClassUIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedSOPInstanceUIDField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property OrderNumber() As String
         Get
            Return Me.OrderNumberField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.OrderNumberField, Value) <> True) Then
               Me.OrderNumberField = Value
               Me.RaisePropertyChanged("OrderNumber")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedSOPClassUID() As String
         Get
            Return Me.ReferencedSOPClassUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferencedSOPClassUIDField, Value) <> True) Then
               Me.ReferencedSOPClassUIDField = Value
               Me.RaisePropertyChanged("ReferencedSOPClassUID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedSOPInstanceUID() As String
         Get
            Return Me.ReferencedSOPInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferencedSOPInstanceUIDField, Value) <> True) Then
               Me.ReferencedSOPInstanceUIDField = Value
               Me.RaisePropertyChanged("ReferencedSOPInstanceUID")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="WCFReferencedImageSequence", [Namespace]:=""), _
    System.SerializableAttribute()> _
   Partial Public Class WCFReferencedImageSequence
      Inherits Broker.ReferencedImageSequence

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private SeriesInstanceUIDField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property SeriesInstanceUID() As String
         Get
            Return Me.SeriesInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.SeriesInstanceUIDField, Value) <> True) Then
               Me.SeriesInstanceUIDField = Value
               Me.RaisePropertyChanged("SeriesInstanceUID")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="ReferencedNonImageCompositeSequence", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class ReferencedNonImageCompositeSequence
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private OrderNumberField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedSOPClassUIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ReferencedSOPInstanceUIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private SeriesInstanceUIDField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property OrderNumber() As String
         Get
            Return Me.OrderNumberField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.OrderNumberField, Value) <> True) Then
               Me.OrderNumberField = Value
               Me.RaisePropertyChanged("OrderNumber")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedSOPClassUID() As String
         Get
            Return Me.ReferencedSOPClassUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferencedSOPClassUIDField, Value) <> True) Then
               Me.ReferencedSOPClassUIDField = Value
               Me.RaisePropertyChanged("ReferencedSOPClassUID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ReferencedSOPInstanceUID() As String
         Get
            Return Me.ReferencedSOPInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ReferencedSOPInstanceUIDField, Value) <> True) Then
               Me.ReferencedSOPInstanceUIDField = Value
               Me.RaisePropertyChanged("ReferencedSOPInstanceUID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property SeriesInstanceUID() As String
         Get
            Return Me.SeriesInstanceUIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.SeriesInstanceUIDField, Value) <> True) Then
               Me.SeriesInstanceUIDField = Value
               Me.RaisePropertyChanged("SeriesInstanceUID")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="PatientInfoforUnscheduledPPS", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.DataAccessLaye" & _
       "r.MatchingParameters"), _
    System.SerializableAttribute()> _
   Partial Public Class PatientInfoforUnscheduledPPS
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private IssuerofPatientIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientBirthDateField As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientSexField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property IssuerofPatientID() As String
         Get
            Return Me.IssuerofPatientIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.IssuerofPatientIDField, Value) <> True) Then
               Me.IssuerofPatientIDField = Value
               Me.RaisePropertyChanged("IssuerofPatientID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientBirthDate() As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)
         Get
            Return Me.PatientBirthDateField
         End Get
         Set(ByVal value As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue))
            If (Me.PatientBirthDateField.Equals(Value) <> True) Then
               Me.PatientBirthDateField = Value
               Me.RaisePropertyChanged("PatientBirthDate")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientID() As String
         Get
            Return Me.PatientIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientIDField, Value) <> True) Then
               Me.PatientIDField = Value
               Me.RaisePropertyChanged("PatientID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientName() As String
         Get
            Return Me.PatientNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientNameField, Value) <> True) Then
               Me.PatientNameField = Value
               Me.RaisePropertyChanged("PatientName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientSex() As String
         Get
            Return Me.PatientSexField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientSexField, Value) <> True) Then
               Me.PatientSexField = Value
               Me.RaisePropertyChanged("PatientSex")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="Patient", [Namespace]:=""), _
    System.SerializableAttribute(), _
    System.Runtime.Serialization.KnownTypeAttribute(GetType(Broker.WCFPatient))> _
   Partial Public Class Patient
      Inherits Broker.CatalogEntity

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private AdditionalPatientHistoryField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ConfidentialityConstraintonPatientDataDescriptionField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private EthnicGroupField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private IssuerOfPatientIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private LastMenstrualDateField As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientBirthDateField As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientCommentsField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientIDField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientNameFamilyNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientNameGivenNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientNameMiddleNameField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientNamePrefixField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientNameSuffixField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientSexField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientStateField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientWeightField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PregnancyStatusField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private SpecialNeedsField As String

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property AdditionalPatientHistory() As String
         Get
            Return Me.AdditionalPatientHistoryField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.AdditionalPatientHistoryField, Value) <> True) Then
               Me.AdditionalPatientHistoryField = Value
               Me.RaisePropertyChanged("AdditionalPatientHistory")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ConfidentialityConstraintonPatientDataDescription() As String
         Get
            Return Me.ConfidentialityConstraintonPatientDataDescriptionField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ConfidentialityConstraintonPatientDataDescriptionField, Value) <> True) Then
               Me.ConfidentialityConstraintonPatientDataDescriptionField = Value
               Me.RaisePropertyChanged("ConfidentialityConstraintonPatientDataDescription")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property EthnicGroup() As String
         Get
            Return Me.EthnicGroupField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.EthnicGroupField, Value) <> True) Then
               Me.EthnicGroupField = Value
               Me.RaisePropertyChanged("EthnicGroup")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property IssuerOfPatientID() As String
         Get
            Return Me.IssuerOfPatientIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.IssuerOfPatientIDField, Value) <> True) Then
               Me.IssuerOfPatientIDField = Value
               Me.RaisePropertyChanged("IssuerOfPatientID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property LastMenstrualDate() As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)
         Get
            Return Me.LastMenstrualDateField
         End Get
         Set(ByVal value As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue))
            If (Me.LastMenstrualDateField.Equals(Value) <> True) Then
               Me.LastMenstrualDateField = Value
               Me.RaisePropertyChanged("LastMenstrualDate")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientBirthDate() As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue)
         Get
            Return Me.PatientBirthDateField
         End Get
         Set(ByVal value As System.Nullable(Of Leadtools.Dicom.DicomDateRangeValue))
            If (Me.PatientBirthDateField.Equals(Value) <> True) Then
               Me.PatientBirthDateField = Value
               Me.RaisePropertyChanged("PatientBirthDate")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientComments() As String
         Get
            Return Me.PatientCommentsField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientCommentsField, Value) <> True) Then
               Me.PatientCommentsField = Value
               Me.RaisePropertyChanged("PatientComments")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientID() As String
         Get
            Return Me.PatientIDField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientIDField, Value) <> True) Then
               Me.PatientIDField = Value
               Me.RaisePropertyChanged("PatientID")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientNameFamilyName() As String
         Get
            Return Me.PatientNameFamilyNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientNameFamilyNameField, Value) <> True) Then
               Me.PatientNameFamilyNameField = Value
               Me.RaisePropertyChanged("PatientNameFamilyName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientNameGivenName() As String
         Get
            Return Me.PatientNameGivenNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientNameGivenNameField, Value) <> True) Then
               Me.PatientNameGivenNameField = Value
               Me.RaisePropertyChanged("PatientNameGivenName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientNameMiddleName() As String
         Get
            Return Me.PatientNameMiddleNameField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientNameMiddleNameField, Value) <> True) Then
               Me.PatientNameMiddleNameField = Value
               Me.RaisePropertyChanged("PatientNameMiddleName")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientNamePrefix() As String
         Get
            Return Me.PatientNamePrefixField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientNamePrefixField, Value) <> True) Then
               Me.PatientNamePrefixField = Value
               Me.RaisePropertyChanged("PatientNamePrefix")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientNameSuffix() As String
         Get
            Return Me.PatientNameSuffixField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientNameSuffixField, Value) <> True) Then
               Me.PatientNameSuffixField = Value
               Me.RaisePropertyChanged("PatientNameSuffix")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientSex() As String
         Get
            Return Me.PatientSexField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientSexField, Value) <> True) Then
               Me.PatientSexField = Value
               Me.RaisePropertyChanged("PatientSex")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientState() As String
         Get
            Return Me.PatientStateField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientStateField, Value) <> True) Then
               Me.PatientStateField = Value
               Me.RaisePropertyChanged("PatientState")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PatientWeight() As String
         Get
            Return Me.PatientWeightField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PatientWeightField, Value) <> True) Then
               Me.PatientWeightField = Value
               Me.RaisePropertyChanged("PatientWeight")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PregnancyStatus() As String
         Get
            Return Me.PregnancyStatusField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.PregnancyStatusField, Value) <> True) Then
               Me.PregnancyStatusField = Value
               Me.RaisePropertyChanged("PregnancyStatus")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property SpecialNeeds() As String
         Get
            Return Me.SpecialNeedsField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.SpecialNeedsField, Value) <> True) Then
               Me.SpecialNeedsField = Value
               Me.RaisePropertyChanged("SpecialNeeds")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="WCFPatient", [Namespace]:=""), _
    System.SerializableAttribute()> _
   Partial Public Class WCFPatient
      Inherits Broker.Patient

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ContrastAllergiesField As System.Collections.Generic.List(Of String)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private MedicalAlertsField As System.Collections.Generic.List(Of String)

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private OtherPatientIDsField As System.Collections.Generic.List(Of String)

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ContrastAllergies() As System.Collections.Generic.List(Of String)
         Get
            Return Me.ContrastAllergiesField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of String))
            If (Object.ReferenceEquals(Me.ContrastAllergiesField, Value) <> True) Then
               Me.ContrastAllergiesField = Value
               Me.RaisePropertyChanged("ContrastAllergies")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property MedicalAlerts() As System.Collections.Generic.List(Of String)
         Get
            Return Me.MedicalAlertsField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of String))
            If (Object.ReferenceEquals(Me.MedicalAlertsField, Value) <> True) Then
               Me.MedicalAlertsField = Value
               Me.RaisePropertyChanged("MedicalAlerts")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property OtherPatientIDs() As System.Collections.Generic.List(Of String)
         Get
            Return Me.OtherPatientIDsField
         End Get
         Set(ByVal value As System.Collections.Generic.List(Of String))
            If (Object.ReferenceEquals(Me.OtherPatientIDsField, Value) <> True) Then
               Me.OtherPatientIDsField = Value
               Me.RaisePropertyChanged("OtherPatientIDs")
            End If
         End Set
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="MPPSQuery", [Namespace]:=""), _
    System.SerializableAttribute()> _
   Partial Public Class MPPSQuery
      Inherits Object
      Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged

      <System.NonSerializedAttribute()> _
      Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private AccessionNumberField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PPSInfoField As Broker.WCFPPSInformation

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private PatientField As Broker.WCFPatient

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private RequestedProcedureIdField As String

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private ScheduledProcedureIdField As String

      <Global.System.ComponentModel.BrowsableAttribute(False)> _
      Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
         Get
            Return Me.extensionDataField
         End Get
         Set(ByVal value As System.Runtime.Serialization.ExtensionDataObject)
            Me.extensionDataField = Value
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property AccessionNumber() As String
         Get
            Return Me.AccessionNumberField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.AccessionNumberField, Value) <> True) Then
               Me.AccessionNumberField = Value
               Me.RaisePropertyChanged("AccessionNumber")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property PPSInfo() As Broker.WCFPPSInformation
         Get
            Return Me.PPSInfoField
         End Get
         Set(ByVal value As Broker.WCFPPSInformation)
            If (Object.ReferenceEquals(Me.PPSInfoField, Value) <> True) Then
               Me.PPSInfoField = Value
               Me.RaisePropertyChanged("PPSInfo")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property Patient() As Broker.WCFPatient
         Get
            Return Me.PatientField
         End Get
         Set(ByVal value As Broker.WCFPatient)
            If (Object.ReferenceEquals(Me.PatientField, Value) <> True) Then
               Me.PatientField = Value
               Me.RaisePropertyChanged("Patient")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property RequestedProcedureId() As String
         Get
            Return Me.RequestedProcedureIdField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.RequestedProcedureIdField, Value) <> True) Then
               Me.RequestedProcedureIdField = Value
               Me.RaisePropertyChanged("RequestedProcedureId")
            End If
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property ScheduledProcedureId() As String
         Get
            Return Me.ScheduledProcedureIdField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.ScheduledProcedureIdField, Value) <> True) Then
               Me.ScheduledProcedureIdField = Value
               Me.RaisePropertyChanged("ScheduledProcedureId")
            End If
         End Set
      End Property

      Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

      Protected Sub RaisePropertyChanged(ByVal propertyName As String)
         Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
         If (Not (propertyChanged) Is Nothing) Then
            propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
         End If
      End Sub
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"), _
    System.Runtime.Serialization.DataContractAttribute(Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils"), _
    System.SerializableAttribute()> _
   Partial Public Class ApplicationFault
      Inherits Object
      Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged

      <System.NonSerializedAttribute()> _
      Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject

      <System.Runtime.Serialization.OptionalFieldAttribute()> _
      Private MessageField As String

      <Global.System.ComponentModel.BrowsableAttribute(False)> _
      Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
         Get
            Return Me.extensionDataField
         End Get
         Set(ByVal value As System.Runtime.Serialization.ExtensionDataObject)
            Me.extensionDataField = Value
         End Set
      End Property

      <System.Runtime.Serialization.DataMemberAttribute()> _
      Public Property Message() As String
         Get
            Return Me.MessageField
         End Get
         Set(ByVal value As String)
            If (Object.ReferenceEquals(Me.MessageField, Value) <> True) Then
               Me.MessageField = Value
               Me.RaisePropertyChanged("Message")
            End If
         End Set
      End Property

      Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

      Protected Sub RaisePropertyChanged(ByVal propertyName As String)
         Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
         If (Not (propertyChanged) Is Nothing) Then
            propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
         End If
      End Sub
   End Class

   <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"), _
    System.ServiceModel.ServiceContractAttribute(ConfigurationName:="Broker.IBrokerService")> _
   Public Interface IBrokerService

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/PerformedProcedureStepExists", ReplyAction:="http://tempuri.org/IBrokerService/PerformedProcedureStepExistsResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/PerformedProcedureStepExistsApplicationFaultFau" & _
          "lt", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function PerformedProcedureStepExists(ByVal affectedSOPInstanceUID As String) As Boolean

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/PerformedProcedureStepExists", ReplyAction:="http://tempuri.org/IBrokerService/PerformedProcedureStepExistsResponse")> _
      Function BeginPerformedProcedureStepExists(ByVal affectedSOPInstanceUID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndPerformedProcedureStepExists(ByVal result As System.IAsyncResult) As Boolean

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/AddPatient", ReplyAction:="http://tempuri.org/IBrokerService/AddPatientResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/AddPatientApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub AddPatient(ByVal patient As Broker.WCFPatient)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/AddPatient", ReplyAction:="http://tempuri.org/IBrokerService/AddPatientResponse")> _
      Function BeginAddPatient(ByVal patient As Broker.WCFPatient, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndAddPatient(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/DeletePatient", ReplyAction:="http://tempuri.org/IBrokerService/DeletePatientResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/DeletePatientApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub DeletePatient(ByVal patientId As String, ByVal issuerOfPatientID As String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/DeletePatient", ReplyAction:="http://tempuri.org/IBrokerService/DeletePatientResponse")> _
      Function BeginDeletePatient(ByVal patientId As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndDeletePatient(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/UpdatePatient", ReplyAction:="http://tempuri.org/IBrokerService/UpdatePatientResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/UpdatePatientApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub UpdatePatient(ByVal origPatientId As String, ByVal origIssuerOfPatientId As String, ByVal patient As Broker.WCFPatient)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/UpdatePatient", ReplyAction:="http://tempuri.org/IBrokerService/UpdatePatientResponse")> _
      Function BeginUpdatePatient(ByVal origPatientId As String, ByVal origIssuerOfPatientId As String, ByVal patient As Broker.WCFPatient, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndUpdatePatient(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/FindPatient", ReplyAction:="http://tempuri.org/IBrokerService/FindPatientResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/FindPatientApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function FindPatient(ByVal patientID As String, ByVal issuerOfPatientID As String) As Broker.WCFPatient

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/FindPatient", ReplyAction:="http://tempuri.org/IBrokerService/FindPatientResponse")> _
      Function BeginFindPatient(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndFindPatient(ByVal result As System.IAsyncResult) As Broker.WCFPatient

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/GetPatientIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetPatientIDsResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/GetPatientIDsApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function GetPatientIDs() As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/GetPatientIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetPatientIDsResponse")> _
      Function BeginGetPatientIDs(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndGetPatientIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/AddImagingServiceRequest", ReplyAction:="http://tempuri.org/IBrokerService/AddImagingServiceRequestResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/AddImagingServiceRequestApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub AddImagingServiceRequest(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal request As Broker.ImagingServiceRequest)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/AddImagingServiceRequest", ReplyAction:="http://tempuri.org/IBrokerService/AddImagingServiceRequestResponse")> _
      Function BeginAddImagingServiceRequest(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal request As Broker.ImagingServiceRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndAddImagingServiceRequest(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/DeleteImagingServiceRequest", ReplyAction:="http://tempuri.org/IBrokerService/DeleteImagingServiceRequestResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/DeleteImagingServiceRequestApplicationFaultFaul" & _
          "t", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub DeleteImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/DeleteImagingServiceRequest", ReplyAction:="http://tempuri.org/IBrokerService/DeleteImagingServiceRequestResponse")> _
      Function BeginDeleteImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndDeleteImagingServiceRequest(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/UpdateImagingServiceRequest", ReplyAction:="http://tempuri.org/IBrokerService/UpdateImagingServiceRequestResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/UpdateImagingServiceRequestApplicationFaultFaul" & _
          "t", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub UpdateImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal entity As Broker.ImagingServiceRequest)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/UpdateImagingServiceRequest", ReplyAction:="http://tempuri.org/IBrokerService/UpdateImagingServiceRequestResponse")> _
      Function BeginUpdateImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal entity As Broker.ImagingServiceRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndUpdateImagingServiceRequest(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/FindImagingServiceRequest", ReplyAction:="http://tempuri.org/IBrokerService/FindImagingServiceRequestResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/FindImagingServiceRequestApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function FindImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String) As Broker.ImagingServiceRequest

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/FindImagingServiceRequest", ReplyAction:="http://tempuri.org/IBrokerService/FindImagingServiceRequestResponse")> _
      Function BeginFindImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndFindImagingServiceRequest(ByVal result As System.IAsyncResult) As Broker.ImagingServiceRequest

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/GetAccessionNumbers", ReplyAction:="http://tempuri.org/IBrokerService/GetAccessionNumbersResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/GetAccessionNumbersApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function GetAccessionNumbers(ByVal patientID As String, ByVal issuerOfPatientID As String) As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/GetAccessionNumbers", ReplyAction:="http://tempuri.org/IBrokerService/GetAccessionNumbersResponse")> _
      Function BeginGetAccessionNumbers(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndGetAccessionNumbers(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/AddRequestedProcedure", ReplyAction:="http://tempuri.org/IBrokerService/AddRequestedProcedureResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/AddRequestedProcedureApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub AddRequestedProcedure(ByVal accessionNumber As String, ByVal procedure As Broker.WCFRequestedProcedure)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/AddRequestedProcedure", ReplyAction:="http://tempuri.org/IBrokerService/AddRequestedProcedureResponse")> _
      Function BeginAddRequestedProcedure(ByVal accessionNumber As String, ByVal procedure As Broker.WCFRequestedProcedure, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndAddRequestedProcedure(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/DeleteRequestedProcedure", ReplyAction:="http://tempuri.org/IBrokerService/DeleteRequestedProcedureResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/DeleteRequestedProcedureApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub DeleteRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/DeleteRequestedProcedure", ReplyAction:="http://tempuri.org/IBrokerService/DeleteRequestedProcedureResponse")> _
      Function BeginDeleteRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndDeleteRequestedProcedure(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/UpdateRequestedProcedure", ReplyAction:="http://tempuri.org/IBrokerService/UpdateRequestedProcedureResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/UpdateRequestedProcedureApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub UpdateRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedure As Broker.WCFRequestedProcedure)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/UpdateRequestedProcedure", ReplyAction:="http://tempuri.org/IBrokerService/UpdateRequestedProcedureResponse")> _
      Function BeginUpdateRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedure As Broker.WCFRequestedProcedure, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndUpdateRequestedProcedure(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/FindRequestedProcedure", ReplyAction:="http://tempuri.org/IBrokerService/FindRequestedProcedureResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/FindRequestedProcedureApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function FindRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String) As Broker.WCFRequestedProcedure

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/FindRequestedProcedure", ReplyAction:="http://tempuri.org/IBrokerService/FindRequestedProcedureResponse")> _
      Function BeginFindRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndFindRequestedProcedure(ByVal result As System.IAsyncResult) As Broker.WCFRequestedProcedure

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/GetRequestedProcedureIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetRequestedProcedureIDsResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/GetRequestedProcedureIDsApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function GetRequestedProcedureIDs(ByVal accessionNumber As String) As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/GetRequestedProcedureIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetRequestedProcedureIDsResponse")> _
      Function BeginGetRequestedProcedureIDs(ByVal accessionNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndGetRequestedProcedureIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/AddScheduledProcedureStep", ReplyAction:="http://tempuri.org/IBrokerService/AddScheduledProcedureStepResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/AddScheduledProcedureStepApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub AddScheduledProcedureStep(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/AddScheduledProcedureStep", ReplyAction:="http://tempuri.org/IBrokerService/AddScheduledProcedureStepResponse")> _
      Function BeginAddScheduledProcedureStep(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndAddScheduledProcedureStep(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStep", ReplyAction:="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStepResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStepApplicationFaultFau" & _
          "lt", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub UpdateScheduledProcedureStep(ByVal scheduledProcedureStepID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStep", ReplyAction:="http://tempuri.org/IBrokerService/UpdateScheduledProcedureStepResponse")> _
      Function BeginUpdateScheduledProcedureStep(ByVal scheduledProcedureStepID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndUpdateScheduledProcedureStep(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStep", ReplyAction:="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStepResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStepApplicationFaultFau" & _
          "lt", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub DeleteScheduledProcedureStep(ByVal scheduledProcedureStepID As String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStep", ReplyAction:="http://tempuri.org/IBrokerService/DeleteScheduledProcedureStepResponse")> _
      Function BeginDeleteScheduledProcedureStep(ByVal scheduledProcedureStepID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndDeleteScheduledProcedureStep(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/FindScheduledProcedureStep", ReplyAction:="http://tempuri.org/IBrokerService/FindScheduledProcedureStepResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/FindScheduledProcedureStepApplicationFaultFault" & _
          "", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function FindScheduledProcedureStep(ByVal scheduledProcedureStepID As String) As Broker.WCFScheduledProcedureStep

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/FindScheduledProcedureStep", ReplyAction:="http://tempuri.org/IBrokerService/FindScheduledProcedureStepResponse")> _
      Function BeginFindScheduledProcedureStep(ByVal scheduledProcedureStepID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndFindScheduledProcedureStep(ByVal result As System.IAsyncResult) As Broker.WCFScheduledProcedureStep

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDsResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDsApplicationFaultFau" & _
          "lt", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function GetScheduledProcedureStepIDs(ByVal accessionNumber As String, ByVal requestedProcedureID As String) As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetScheduledProcedureStepIDsResponse")> _
      Function BeginGetScheduledProcedureStepIDs(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndGetScheduledProcedureStepIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/AddVisit", ReplyAction:="http://tempuri.org/IBrokerService/AddVisitResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/AddVisitApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub AddVisit(ByVal visit As Broker.WCFVisit)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/AddVisit", ReplyAction:="http://tempuri.org/IBrokerService/AddVisitResponse")> _
      Function BeginAddVisit(ByVal visit As Broker.WCFVisit, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndAddVisit(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/UpdateVisit", ReplyAction:="http://tempuri.org/IBrokerService/UpdateVisitResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/UpdateVisitApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub UpdateVisit(ByVal admissionID As String, ByVal visit As Broker.WCFVisit)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/UpdateVisit", ReplyAction:="http://tempuri.org/IBrokerService/UpdateVisitResponse")> _
      Function BeginUpdateVisit(ByVal admissionID As String, ByVal visit As Broker.WCFVisit, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndUpdateVisit(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/DeleteVisit", ReplyAction:="http://tempuri.org/IBrokerService/DeleteVisitResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/DeleteVisitApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub DeleteVisit(ByVal admissionID As String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/DeleteVisit", ReplyAction:="http://tempuri.org/IBrokerService/DeleteVisitResponse")> _
      Function BeginDeleteVisit(ByVal admissionID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndDeleteVisit(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/FindVisit", ReplyAction:="http://tempuri.org/IBrokerService/FindVisitResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/FindVisitApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function FindVisit(ByVal admissionID As String) As Broker.WCFVisit

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/FindVisit", ReplyAction:="http://tempuri.org/IBrokerService/FindVisitResponse")> _
      Function BeginFindVisit(ByVal admissionID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndFindVisit(ByVal result As System.IAsyncResult) As Broker.WCFVisit

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/GetAdmissionIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetAdmissionIDsResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/GetAdmissionIDsApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function GetAdmissionIDs() As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/GetAdmissionIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetAdmissionIDsResponse")> _
      Function BeginGetAdmissionIDs(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndGetAdmissionIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/AddMPPS", ReplyAction:="http://tempuri.org/IBrokerService/AddMPPSResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/AddMPPSApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub AddMPPS(ByVal mpps As Broker.WCFPPSInformation)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/AddMPPS", ReplyAction:="http://tempuri.org/IBrokerService/AddMPPSResponse")> _
      Function BeginAddMPPS(ByVal mpps As Broker.WCFPPSInformation, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndAddMPPS(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/DeleteMPPS", ReplyAction:="http://tempuri.org/IBrokerService/DeleteMPPSResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/DeleteMPPSApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub DeleteMPPS(ByVal mppsSOPInstanceUID As String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/DeleteMPPS", ReplyAction:="http://tempuri.org/IBrokerService/DeleteMPPSResponse")> _
      Function BeginDeleteMPPS(ByVal mppsSOPInstanceUID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndDeleteMPPS(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/UpdateMPPS", ReplyAction:="http://tempuri.org/IBrokerService/UpdateMPPSResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/UpdateMPPSApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub UpdateMPPS(ByVal mppsSOPInstanceUID As String, ByVal mpps As Broker.WCFPPSInformation)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/UpdateMPPS", ReplyAction:="http://tempuri.org/IBrokerService/UpdateMPPSResponse")> _
      Function BeginUpdateMPPS(ByVal mppsSOPInstanceUID As String, ByVal mpps As Broker.WCFPPSInformation, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndUpdateMPPS(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/FindMPPS", ReplyAction:="http://tempuri.org/IBrokerService/FindMPPSResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/FindMPPSApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function FindMPPS(ByVal mppsSOPInstanceUID As String) As Broker.WCFPPSInformation

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/FindMPPS", ReplyAction:="http://tempuri.org/IBrokerService/FindMPPSResponse")> _
      Function BeginFindMPPS(ByVal mppsSOPInstanceUID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndFindMPPS(ByVal result As System.IAsyncResult) As Broker.WCFPPSInformation

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/QueryMPPS", ReplyAction:="http://tempuri.org/IBrokerService/QueryMPPSResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/QueryMPPSApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function QueryMPPS(ByVal query As Broker.MPPSQuery) As System.Collections.Generic.List(Of Broker.WCFPPSInformation)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/QueryMPPS", ReplyAction:="http://tempuri.org/IBrokerService/QueryMPPSResponse")> _
      Function BeginQueryMPPS(ByVal query As Broker.MPPSQuery, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndQueryMPPS(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of Broker.WCFPPSInformation)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/HandleUnscheduledMPPS", ReplyAction:="http://tempuri.org/IBrokerService/HandleUnscheduledMPPSResponse"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/HandleUnscheduledMPPSApplicationFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Sub HandleUnscheduledMPPS(ByVal mppsSOPInstanceUID As String, ByVal scheduledProcedureStepID As String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/HandleUnscheduledMPPS", ReplyAction:="http://tempuri.org/IBrokerService/HandleUnscheduledMPPSResponse")> _
      Function BeginHandleUnscheduledMPPS(ByVal mppsSOPInstanceUID As String, ByVal scheduledProcedureStepID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Sub EndHandleUnscheduledMPPS(ByVal result As System.IAsyncResult)

      <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDsRespons" & _
          "e"), _
       System.ServiceModel.FaultContractAttribute(GetType(Broker.ApplicationFault), Action:="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDsApplica" & _
          "tionFaultFault", Name:="ApplicationFault", [Namespace]:="http://schemas.datacontract.org/2004/07/Leadtools.Medical.Worklist.Wcf.Utils")> _
      Function GetUnscheduledPerformedProcedureStepUIDs() As System.Collections.Generic.List(Of String)

      <System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDs", ReplyAction:="http://tempuri.org/IBrokerService/GetUnscheduledPerformedProcedureStepUIDsRespons" & _
          "e")> _
      Function BeginGetUnscheduledPerformedProcedureStepUIDs(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

      Function EndGetUnscheduledPerformedProcedureStepUIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String)
   End Interface

   <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Public Interface IBrokerServiceChannel
      Inherits Broker.IBrokerService, System.ServiceModel.IClientChannel
   End Interface

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class PerformedProcedureStepExistsCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As Boolean
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), Boolean)
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class FindPatientCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As Broker.WCFPatient
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), Broker.WCFPatient)
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class GetPatientIDsCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As System.Collections.Generic.List(Of String)
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), System.Collections.Generic.List(Of String))
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class FindImagingServiceRequestCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As Broker.ImagingServiceRequest
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), Broker.ImagingServiceRequest)
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class GetAccessionNumbersCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As System.Collections.Generic.List(Of String)
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), System.Collections.Generic.List(Of String))
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class FindRequestedProcedureCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As Broker.WCFRequestedProcedure
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), Broker.WCFRequestedProcedure)
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class GetRequestedProcedureIDsCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As System.Collections.Generic.List(Of String)
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), System.Collections.Generic.List(Of String))
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class FindScheduledProcedureStepCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As Broker.WCFScheduledProcedureStep
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), Broker.WCFScheduledProcedureStep)
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class GetScheduledProcedureStepIDsCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As System.Collections.Generic.List(Of String)
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), System.Collections.Generic.List(Of String))
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class FindVisitCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As Broker.WCFVisit
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), Broker.WCFVisit)
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class GetAdmissionIDsCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As System.Collections.Generic.List(Of String)
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), System.Collections.Generic.List(Of String))
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class FindMPPSCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As Broker.WCFPPSInformation
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), Broker.WCFPPSInformation)
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class QueryMPPSCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As System.Collections.Generic.List(Of Broker.WCFPPSInformation)
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), System.Collections.Generic.List(Of Broker.WCFPPSInformation))
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class GetUnscheduledPerformedProcedureStepUIDsCompletedEventArgs
      Inherits System.ComponentModel.AsyncCompletedEventArgs

      Private results() As Object

      Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
         MyBase.New(exception, cancelled, userState)
         Me.results = results
      End Sub

      Public ReadOnly Property Result() As System.Collections.Generic.List(Of String)
         Get
            MyBase.RaiseExceptionIfNecessary()
            Return CType(Me.results(0), System.Collections.Generic.List(Of String))
         End Get
      End Property
   End Class

   <System.Diagnostics.DebuggerStepThroughAttribute(), _
    System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")> _
   Partial Public Class BrokerServiceClient
      Inherits System.ServiceModel.ClientBase(Of Broker.IBrokerService)
      Implements Broker.IBrokerService

      Private onBeginPerformedProcedureStepExistsDelegate As BeginOperationDelegate

      Private onEndPerformedProcedureStepExistsDelegate As EndOperationDelegate

      Private onPerformedProcedureStepExistsCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginAddPatientDelegate As BeginOperationDelegate

      Private onEndAddPatientDelegate As EndOperationDelegate

      Private onAddPatientCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginDeletePatientDelegate As BeginOperationDelegate

      Private onEndDeletePatientDelegate As EndOperationDelegate

      Private onDeletePatientCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginUpdatePatientDelegate As BeginOperationDelegate

      Private onEndUpdatePatientDelegate As EndOperationDelegate

      Private onUpdatePatientCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginFindPatientDelegate As BeginOperationDelegate

      Private onEndFindPatientDelegate As EndOperationDelegate

      Private onFindPatientCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginGetPatientIDsDelegate As BeginOperationDelegate

      Private onEndGetPatientIDsDelegate As EndOperationDelegate

      Private onGetPatientIDsCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginAddImagingServiceRequestDelegate As BeginOperationDelegate

      Private onEndAddImagingServiceRequestDelegate As EndOperationDelegate

      Private onAddImagingServiceRequestCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginDeleteImagingServiceRequestDelegate As BeginOperationDelegate

      Private onEndDeleteImagingServiceRequestDelegate As EndOperationDelegate

      Private onDeleteImagingServiceRequestCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginUpdateImagingServiceRequestDelegate As BeginOperationDelegate

      Private onEndUpdateImagingServiceRequestDelegate As EndOperationDelegate

      Private onUpdateImagingServiceRequestCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginFindImagingServiceRequestDelegate As BeginOperationDelegate

      Private onEndFindImagingServiceRequestDelegate As EndOperationDelegate

      Private onFindImagingServiceRequestCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginGetAccessionNumbersDelegate As BeginOperationDelegate

      Private onEndGetAccessionNumbersDelegate As EndOperationDelegate

      Private onGetAccessionNumbersCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginAddRequestedProcedureDelegate As BeginOperationDelegate

      Private onEndAddRequestedProcedureDelegate As EndOperationDelegate

      Private onAddRequestedProcedureCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginDeleteRequestedProcedureDelegate As BeginOperationDelegate

      Private onEndDeleteRequestedProcedureDelegate As EndOperationDelegate

      Private onDeleteRequestedProcedureCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginUpdateRequestedProcedureDelegate As BeginOperationDelegate

      Private onEndUpdateRequestedProcedureDelegate As EndOperationDelegate

      Private onUpdateRequestedProcedureCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginFindRequestedProcedureDelegate As BeginOperationDelegate

      Private onEndFindRequestedProcedureDelegate As EndOperationDelegate

      Private onFindRequestedProcedureCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginGetRequestedProcedureIDsDelegate As BeginOperationDelegate

      Private onEndGetRequestedProcedureIDsDelegate As EndOperationDelegate

      Private onGetRequestedProcedureIDsCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginAddScheduledProcedureStepDelegate As BeginOperationDelegate

      Private onEndAddScheduledProcedureStepDelegate As EndOperationDelegate

      Private onAddScheduledProcedureStepCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginUpdateScheduledProcedureStepDelegate As BeginOperationDelegate

      Private onEndUpdateScheduledProcedureStepDelegate As EndOperationDelegate

      Private onUpdateScheduledProcedureStepCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginDeleteScheduledProcedureStepDelegate As BeginOperationDelegate

      Private onEndDeleteScheduledProcedureStepDelegate As EndOperationDelegate

      Private onDeleteScheduledProcedureStepCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginFindScheduledProcedureStepDelegate As BeginOperationDelegate

      Private onEndFindScheduledProcedureStepDelegate As EndOperationDelegate

      Private onFindScheduledProcedureStepCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginGetScheduledProcedureStepIDsDelegate As BeginOperationDelegate

      Private onEndGetScheduledProcedureStepIDsDelegate As EndOperationDelegate

      Private onGetScheduledProcedureStepIDsCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginAddVisitDelegate As BeginOperationDelegate

      Private onEndAddVisitDelegate As EndOperationDelegate

      Private onAddVisitCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginUpdateVisitDelegate As BeginOperationDelegate

      Private onEndUpdateVisitDelegate As EndOperationDelegate

      Private onUpdateVisitCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginDeleteVisitDelegate As BeginOperationDelegate

      Private onEndDeleteVisitDelegate As EndOperationDelegate

      Private onDeleteVisitCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginFindVisitDelegate As BeginOperationDelegate

      Private onEndFindVisitDelegate As EndOperationDelegate

      Private onFindVisitCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginGetAdmissionIDsDelegate As BeginOperationDelegate

      Private onEndGetAdmissionIDsDelegate As EndOperationDelegate

      Private onGetAdmissionIDsCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginAddMPPSDelegate As BeginOperationDelegate

      Private onEndAddMPPSDelegate As EndOperationDelegate

      Private onAddMPPSCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginDeleteMPPSDelegate As BeginOperationDelegate

      Private onEndDeleteMPPSDelegate As EndOperationDelegate

      Private onDeleteMPPSCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginUpdateMPPSDelegate As BeginOperationDelegate

      Private onEndUpdateMPPSDelegate As EndOperationDelegate

      Private onUpdateMPPSCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginFindMPPSDelegate As BeginOperationDelegate

      Private onEndFindMPPSDelegate As EndOperationDelegate

      Private onFindMPPSCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginQueryMPPSDelegate As BeginOperationDelegate

      Private onEndQueryMPPSDelegate As EndOperationDelegate

      Private onQueryMPPSCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginHandleUnscheduledMPPSDelegate As BeginOperationDelegate

      Private onEndHandleUnscheduledMPPSDelegate As EndOperationDelegate

      Private onHandleUnscheduledMPPSCompletedDelegate As System.Threading.SendOrPostCallback

      Private onBeginGetUnscheduledPerformedProcedureStepUIDsDelegate As BeginOperationDelegate

      Private onEndGetUnscheduledPerformedProcedureStepUIDsDelegate As EndOperationDelegate

      Private onGetUnscheduledPerformedProcedureStepUIDsCompletedDelegate As System.Threading.SendOrPostCallback

      Public Sub New()
         MyBase.New()
      End Sub

      Public Sub New(ByVal endpointConfigurationName As String)
         MyBase.New(endpointConfigurationName)
      End Sub

      Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
         MyBase.New(endpointConfigurationName, remoteAddress)
      End Sub

      Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
         MyBase.New(endpointConfigurationName, remoteAddress)
      End Sub

      Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
         MyBase.New(binding, remoteAddress)
      End Sub

      Public Event PerformedProcedureStepExistsCompleted As System.EventHandler(Of PerformedProcedureStepExistsCompletedEventArgs)

      Public Event AddPatientCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event DeletePatientCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event UpdatePatientCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event FindPatientCompleted As System.EventHandler(Of FindPatientCompletedEventArgs)

      Public Event GetPatientIDsCompleted As System.EventHandler(Of GetPatientIDsCompletedEventArgs)

      Public Event AddImagingServiceRequestCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event DeleteImagingServiceRequestCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event UpdateImagingServiceRequestCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event FindImagingServiceRequestCompleted As System.EventHandler(Of FindImagingServiceRequestCompletedEventArgs)

      Public Event GetAccessionNumbersCompleted As System.EventHandler(Of GetAccessionNumbersCompletedEventArgs)

      Public Event AddRequestedProcedureCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event DeleteRequestedProcedureCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event UpdateRequestedProcedureCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event FindRequestedProcedureCompleted As System.EventHandler(Of FindRequestedProcedureCompletedEventArgs)

      Public Event GetRequestedProcedureIDsCompleted As System.EventHandler(Of GetRequestedProcedureIDsCompletedEventArgs)

      Public Event AddScheduledProcedureStepCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event UpdateScheduledProcedureStepCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event DeleteScheduledProcedureStepCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event FindScheduledProcedureStepCompleted As System.EventHandler(Of FindScheduledProcedureStepCompletedEventArgs)

      Public Event GetScheduledProcedureStepIDsCompleted As System.EventHandler(Of GetScheduledProcedureStepIDsCompletedEventArgs)

      Public Event AddVisitCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event UpdateVisitCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event DeleteVisitCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event FindVisitCompleted As System.EventHandler(Of FindVisitCompletedEventArgs)

      Public Event GetAdmissionIDsCompleted As System.EventHandler(Of GetAdmissionIDsCompletedEventArgs)

      Public Event AddMPPSCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event DeleteMPPSCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event UpdateMPPSCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event FindMPPSCompleted As System.EventHandler(Of FindMPPSCompletedEventArgs)

      Public Event QueryMPPSCompleted As System.EventHandler(Of QueryMPPSCompletedEventArgs)

      Public Event HandleUnscheduledMPPSCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

      Public Event GetUnscheduledPerformedProcedureStepUIDsCompleted As System.EventHandler(Of GetUnscheduledPerformedProcedureStepUIDsCompletedEventArgs)

      Public Function PerformedProcedureStepExists(ByVal affectedSOPInstanceUID As String) As Boolean Implements Broker.IBrokerService.PerformedProcedureStepExists
         Return MyBase.Channel.PerformedProcedureStepExists(affectedSOPInstanceUID)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginPerformedProcedureStepExists(ByVal affectedSOPInstanceUID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginPerformedProcedureStepExists
         Return MyBase.Channel.BeginPerformedProcedureStepExists(affectedSOPInstanceUID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndPerformedProcedureStepExists(ByVal result As System.IAsyncResult) As Boolean Implements Broker.IBrokerService.EndPerformedProcedureStepExists
         Return MyBase.Channel.EndPerformedProcedureStepExists(result)
      End Function

      Private Function OnBeginPerformedProcedureStepExists(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim affectedSOPInstanceUID As String = CType(inValues(0), String)
         Return Me.BeginPerformedProcedureStepExists(affectedSOPInstanceUID, callback, asyncState)
      End Function

      Private Function OnEndPerformedProcedureStepExists(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As Boolean = Me.EndPerformedProcedureStepExists(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnPerformedProcedureStepExistsCompleted(ByVal state As Object)
         If (Not (Me.PerformedProcedureStepExistsCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent PerformedProcedureStepExistsCompleted(Me, New PerformedProcedureStepExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub PerformedProcedureStepExistsAsync(ByVal affectedSOPInstanceUID As String)
         Me.PerformedProcedureStepExistsAsync(affectedSOPInstanceUID, Nothing)
      End Sub

      Public Overloads Sub PerformedProcedureStepExistsAsync(ByVal affectedSOPInstanceUID As String, ByVal userState As Object)
         If (Me.onBeginPerformedProcedureStepExistsDelegate Is Nothing) Then
            Me.onBeginPerformedProcedureStepExistsDelegate = AddressOf Me.OnBeginPerformedProcedureStepExists
         End If
         If (Me.onEndPerformedProcedureStepExistsDelegate Is Nothing) Then
            Me.onEndPerformedProcedureStepExistsDelegate = AddressOf Me.OnEndPerformedProcedureStepExists
         End If
         If (Me.onPerformedProcedureStepExistsCompletedDelegate Is Nothing) Then
            Me.onPerformedProcedureStepExistsCompletedDelegate = AddressOf Me.OnPerformedProcedureStepExistsCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginPerformedProcedureStepExistsDelegate, New Object() {affectedSOPInstanceUID}, Me.onEndPerformedProcedureStepExistsDelegate, Me.onPerformedProcedureStepExistsCompletedDelegate, userState)
      End Sub

      Public Sub AddPatient(ByVal patient As Broker.WCFPatient) Implements Broker.IBrokerService.AddPatient
         MyBase.Channel.AddPatient(patient)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginAddPatient(ByVal patient As Broker.WCFPatient, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginAddPatient
         Return MyBase.Channel.BeginAddPatient(patient, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndAddPatient(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndAddPatient
         MyBase.Channel.EndAddPatient(result)
      End Sub

      Private Function OnBeginAddPatient(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim patient As Broker.WCFPatient = CType(inValues(0), Broker.WCFPatient)
         Return Me.BeginAddPatient(patient, callback, asyncState)
      End Function

      Private Function OnEndAddPatient(ByVal result As System.IAsyncResult) As Object()
         Me.EndAddPatient(result)
         Return Nothing
      End Function

      Private Sub OnAddPatientCompleted(ByVal state As Object)
         If (Not (Me.AddPatientCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent AddPatientCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub AddPatientAsync(ByVal patient As Broker.WCFPatient)
         Me.AddPatientAsync(patient, Nothing)
      End Sub

      Public Overloads Sub AddPatientAsync(ByVal patient As Broker.WCFPatient, ByVal userState As Object)
         If (Me.onBeginAddPatientDelegate Is Nothing) Then
            Me.onBeginAddPatientDelegate = AddressOf Me.OnBeginAddPatient
         End If
         If (Me.onEndAddPatientDelegate Is Nothing) Then
            Me.onEndAddPatientDelegate = AddressOf Me.OnEndAddPatient
         End If
         If (Me.onAddPatientCompletedDelegate Is Nothing) Then
            Me.onAddPatientCompletedDelegate = AddressOf Me.OnAddPatientCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginAddPatientDelegate, New Object() {patient}, Me.onEndAddPatientDelegate, Me.onAddPatientCompletedDelegate, userState)
      End Sub

      Public Sub DeletePatient(ByVal patientId As String, ByVal issuerOfPatientID As String) Implements Broker.IBrokerService.DeletePatient
         MyBase.Channel.DeletePatient(patientId, issuerOfPatientID)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginDeletePatient(ByVal patientId As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginDeletePatient
         Return MyBase.Channel.BeginDeletePatient(patientId, issuerOfPatientID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndDeletePatient(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndDeletePatient
         MyBase.Channel.EndDeletePatient(result)
      End Sub

      Private Function OnBeginDeletePatient(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim patientId As String = CType(inValues(0), String)
         Dim issuerOfPatientID As String = CType(inValues(1), String)
         Return Me.BeginDeletePatient(patientId, issuerOfPatientID, callback, asyncState)
      End Function

      Private Function OnEndDeletePatient(ByVal result As System.IAsyncResult) As Object()
         Me.EndDeletePatient(result)
         Return Nothing
      End Function

      Private Sub OnDeletePatientCompleted(ByVal state As Object)
         If (Not (Me.DeletePatientCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent DeletePatientCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub DeletePatientAsync(ByVal patientId As String, ByVal issuerOfPatientID As String)
         Me.DeletePatientAsync(patientId, issuerOfPatientID, Nothing)
      End Sub

      Public Overloads Sub DeletePatientAsync(ByVal patientId As String, ByVal issuerOfPatientID As String, ByVal userState As Object)
         If (Me.onBeginDeletePatientDelegate Is Nothing) Then
            Me.onBeginDeletePatientDelegate = AddressOf Me.OnBeginDeletePatient
         End If
         If (Me.onEndDeletePatientDelegate Is Nothing) Then
            Me.onEndDeletePatientDelegate = AddressOf Me.OnEndDeletePatient
         End If
         If (Me.onDeletePatientCompletedDelegate Is Nothing) Then
            Me.onDeletePatientCompletedDelegate = AddressOf Me.OnDeletePatientCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginDeletePatientDelegate, New Object() {patientId, issuerOfPatientID}, Me.onEndDeletePatientDelegate, Me.onDeletePatientCompletedDelegate, userState)
      End Sub

      Public Sub UpdatePatient(ByVal origPatientId As String, ByVal origIssuerOfPatientId As String, ByVal patient As Broker.WCFPatient) Implements Broker.IBrokerService.UpdatePatient
         MyBase.Channel.UpdatePatient(origPatientId, origIssuerOfPatientId, patient)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginUpdatePatient(ByVal origPatientId As String, ByVal origIssuerOfPatientId As String, ByVal patient As Broker.WCFPatient, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginUpdatePatient
         Return MyBase.Channel.BeginUpdatePatient(origPatientId, origIssuerOfPatientId, patient, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndUpdatePatient(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndUpdatePatient
         MyBase.Channel.EndUpdatePatient(result)
      End Sub

      Private Function OnBeginUpdatePatient(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim origPatientId As String = CType(inValues(0), String)
         Dim origIssuerOfPatientId As String = CType(inValues(1), String)
         Dim patient As Broker.WCFPatient = CType(inValues(2), Broker.WCFPatient)
         Return Me.BeginUpdatePatient(origPatientId, origIssuerOfPatientId, patient, callback, asyncState)
      End Function

      Private Function OnEndUpdatePatient(ByVal result As System.IAsyncResult) As Object()
         Me.EndUpdatePatient(result)
         Return Nothing
      End Function

      Private Sub OnUpdatePatientCompleted(ByVal state As Object)
         If (Not (Me.UpdatePatientCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent UpdatePatientCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub UpdatePatientAsync(ByVal origPatientId As String, ByVal origIssuerOfPatientId As String, ByVal patient As Broker.WCFPatient)
         Me.UpdatePatientAsync(origPatientId, origIssuerOfPatientId, patient, Nothing)
      End Sub

      Public Overloads Sub UpdatePatientAsync(ByVal origPatientId As String, ByVal origIssuerOfPatientId As String, ByVal patient As Broker.WCFPatient, ByVal userState As Object)
         If (Me.onBeginUpdatePatientDelegate Is Nothing) Then
            Me.onBeginUpdatePatientDelegate = AddressOf Me.OnBeginUpdatePatient
         End If
         If (Me.onEndUpdatePatientDelegate Is Nothing) Then
            Me.onEndUpdatePatientDelegate = AddressOf Me.OnEndUpdatePatient
         End If
         If (Me.onUpdatePatientCompletedDelegate Is Nothing) Then
            Me.onUpdatePatientCompletedDelegate = AddressOf Me.OnUpdatePatientCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginUpdatePatientDelegate, New Object() {origPatientId, origIssuerOfPatientId, patient}, Me.onEndUpdatePatientDelegate, Me.onUpdatePatientCompletedDelegate, userState)
      End Sub

      Public Function FindPatient(ByVal patientID As String, ByVal issuerOfPatientID As String) As Broker.WCFPatient Implements Broker.IBrokerService.FindPatient
         Return MyBase.Channel.FindPatient(patientID, issuerOfPatientID)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginFindPatient(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginFindPatient
         Return MyBase.Channel.BeginFindPatient(patientID, issuerOfPatientID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndFindPatient(ByVal result As System.IAsyncResult) As Broker.WCFPatient Implements Broker.IBrokerService.EndFindPatient
         Return MyBase.Channel.EndFindPatient(result)
      End Function

      Private Function OnBeginFindPatient(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim patientID As String = CType(inValues(0), String)
         Dim issuerOfPatientID As String = CType(inValues(1), String)
         Return Me.BeginFindPatient(patientID, issuerOfPatientID, callback, asyncState)
      End Function

      Private Function OnEndFindPatient(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As Broker.WCFPatient = Me.EndFindPatient(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnFindPatientCompleted(ByVal state As Object)
         If (Not (Me.FindPatientCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent FindPatientCompleted(Me, New FindPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub FindPatientAsync(ByVal patientID As String, ByVal issuerOfPatientID As String)
         Me.FindPatientAsync(patientID, issuerOfPatientID, Nothing)
      End Sub

      Public Overloads Sub FindPatientAsync(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal userState As Object)
         If (Me.onBeginFindPatientDelegate Is Nothing) Then
            Me.onBeginFindPatientDelegate = AddressOf Me.OnBeginFindPatient
         End If
         If (Me.onEndFindPatientDelegate Is Nothing) Then
            Me.onEndFindPatientDelegate = AddressOf Me.OnEndFindPatient
         End If
         If (Me.onFindPatientCompletedDelegate Is Nothing) Then
            Me.onFindPatientCompletedDelegate = AddressOf Me.OnFindPatientCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginFindPatientDelegate, New Object() {patientID, issuerOfPatientID}, Me.onEndFindPatientDelegate, Me.onFindPatientCompletedDelegate, userState)
      End Sub

      Public Function GetPatientIDs() As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.GetPatientIDs
         Return MyBase.Channel.GetPatientIDs
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginGetPatientIDs(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginGetPatientIDs
         Return MyBase.Channel.BeginGetPatientIDs(callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndGetPatientIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.EndGetPatientIDs
         Return MyBase.Channel.EndGetPatientIDs(result)
      End Function

      Private Function OnBeginGetPatientIDs(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Return Me.BeginGetPatientIDs(callback, asyncState)
      End Function

      Private Function OnEndGetPatientIDs(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As System.Collections.Generic.List(Of String) = Me.EndGetPatientIDs(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnGetPatientIDsCompleted(ByVal state As Object)
         If (Not (Me.GetPatientIDsCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent GetPatientIDsCompleted(Me, New GetPatientIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub GetPatientIDsAsync()
         Me.GetPatientIDsAsync(Nothing)
      End Sub

      Public Overloads Sub GetPatientIDsAsync(ByVal userState As Object)
         If (Me.onBeginGetPatientIDsDelegate Is Nothing) Then
            Me.onBeginGetPatientIDsDelegate = AddressOf Me.OnBeginGetPatientIDs
         End If
         If (Me.onEndGetPatientIDsDelegate Is Nothing) Then
            Me.onEndGetPatientIDsDelegate = AddressOf Me.OnEndGetPatientIDs
         End If
         If (Me.onGetPatientIDsCompletedDelegate Is Nothing) Then
            Me.onGetPatientIDsCompletedDelegate = AddressOf Me.OnGetPatientIDsCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginGetPatientIDsDelegate, Nothing, Me.onEndGetPatientIDsDelegate, Me.onGetPatientIDsCompletedDelegate, userState)
      End Sub

      Public Sub AddImagingServiceRequest(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal request As Broker.ImagingServiceRequest) Implements Broker.IBrokerService.AddImagingServiceRequest
         MyBase.Channel.AddImagingServiceRequest(patientID, issuerOfPatientID, request)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginAddImagingServiceRequest(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal request As Broker.ImagingServiceRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginAddImagingServiceRequest
         Return MyBase.Channel.BeginAddImagingServiceRequest(patientID, issuerOfPatientID, request, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndAddImagingServiceRequest(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndAddImagingServiceRequest
         MyBase.Channel.EndAddImagingServiceRequest(result)
      End Sub

      Private Function OnBeginAddImagingServiceRequest(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim patientID As String = CType(inValues(0), String)
         Dim issuerOfPatientID As String = CType(inValues(1), String)
         Dim request As Broker.ImagingServiceRequest = CType(inValues(2), Broker.ImagingServiceRequest)
         Return Me.BeginAddImagingServiceRequest(patientID, issuerOfPatientID, request, callback, asyncState)
      End Function

      Private Function OnEndAddImagingServiceRequest(ByVal result As System.IAsyncResult) As Object()
         Me.EndAddImagingServiceRequest(result)
         Return Nothing
      End Function

      Private Sub OnAddImagingServiceRequestCompleted(ByVal state As Object)
         If (Not (Me.AddImagingServiceRequestCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent AddImagingServiceRequestCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub AddImagingServiceRequestAsync(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal request As Broker.ImagingServiceRequest)
         Me.AddImagingServiceRequestAsync(patientID, issuerOfPatientID, request, Nothing)
      End Sub

      Public Overloads Sub AddImagingServiceRequestAsync(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal request As Broker.ImagingServiceRequest, ByVal userState As Object)
         If (Me.onBeginAddImagingServiceRequestDelegate Is Nothing) Then
            Me.onBeginAddImagingServiceRequestDelegate = AddressOf Me.OnBeginAddImagingServiceRequest
         End If
         If (Me.onEndAddImagingServiceRequestDelegate Is Nothing) Then
            Me.onEndAddImagingServiceRequestDelegate = AddressOf Me.OnEndAddImagingServiceRequest
         End If
         If (Me.onAddImagingServiceRequestCompletedDelegate Is Nothing) Then
            Me.onAddImagingServiceRequestCompletedDelegate = AddressOf Me.OnAddImagingServiceRequestCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginAddImagingServiceRequestDelegate, New Object() {patientID, issuerOfPatientID, request}, Me.onEndAddImagingServiceRequestDelegate, Me.onAddImagingServiceRequestCompletedDelegate, userState)
      End Sub

      Public Sub DeleteImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String) Implements Broker.IBrokerService.DeleteImagingServiceRequest
         MyBase.Channel.DeleteImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginDeleteImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginDeleteImagingServiceRequest
         Return MyBase.Channel.BeginDeleteImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndDeleteImagingServiceRequest(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndDeleteImagingServiceRequest
         MyBase.Channel.EndDeleteImagingServiceRequest(result)
      End Sub

      Private Function OnBeginDeleteImagingServiceRequest(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Dim patientID As String = CType(inValues(1), String)
         Dim issuerOfPatientID As String = CType(inValues(2), String)
         Return Me.BeginDeleteImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, callback, asyncState)
      End Function

      Private Function OnEndDeleteImagingServiceRequest(ByVal result As System.IAsyncResult) As Object()
         Me.EndDeleteImagingServiceRequest(result)
         Return Nothing
      End Function

      Private Sub OnDeleteImagingServiceRequestCompleted(ByVal state As Object)
         If (Not (Me.DeleteImagingServiceRequestCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent DeleteImagingServiceRequestCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub DeleteImagingServiceRequestAsync(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String)
         Me.DeleteImagingServiceRequestAsync(accessionNumber, patientID, issuerOfPatientID, Nothing)
      End Sub

      Public Overloads Sub DeleteImagingServiceRequestAsync(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal userState As Object)
         If (Me.onBeginDeleteImagingServiceRequestDelegate Is Nothing) Then
            Me.onBeginDeleteImagingServiceRequestDelegate = AddressOf Me.OnBeginDeleteImagingServiceRequest
         End If
         If (Me.onEndDeleteImagingServiceRequestDelegate Is Nothing) Then
            Me.onEndDeleteImagingServiceRequestDelegate = AddressOf Me.OnEndDeleteImagingServiceRequest
         End If
         If (Me.onDeleteImagingServiceRequestCompletedDelegate Is Nothing) Then
            Me.onDeleteImagingServiceRequestCompletedDelegate = AddressOf Me.OnDeleteImagingServiceRequestCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginDeleteImagingServiceRequestDelegate, New Object() {accessionNumber, patientID, issuerOfPatientID}, Me.onEndDeleteImagingServiceRequestDelegate, Me.onDeleteImagingServiceRequestCompletedDelegate, userState)
      End Sub

      Public Sub UpdateImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal entity As Broker.ImagingServiceRequest) Implements Broker.IBrokerService.UpdateImagingServiceRequest
         MyBase.Channel.UpdateImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, entity)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginUpdateImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal entity As Broker.ImagingServiceRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginUpdateImagingServiceRequest
         Return MyBase.Channel.BeginUpdateImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, entity, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndUpdateImagingServiceRequest(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndUpdateImagingServiceRequest
         MyBase.Channel.EndUpdateImagingServiceRequest(result)
      End Sub

      Private Function OnBeginUpdateImagingServiceRequest(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Dim patientID As String = CType(inValues(1), String)
         Dim issuerOfPatientID As String = CType(inValues(2), String)
         Dim entity As Broker.ImagingServiceRequest = CType(inValues(3), Broker.ImagingServiceRequest)
         Return Me.BeginUpdateImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, entity, callback, asyncState)
      End Function

      Private Function OnEndUpdateImagingServiceRequest(ByVal result As System.IAsyncResult) As Object()
         Me.EndUpdateImagingServiceRequest(result)
         Return Nothing
      End Function

      Private Sub OnUpdateImagingServiceRequestCompleted(ByVal state As Object)
         If (Not (Me.UpdateImagingServiceRequestCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent UpdateImagingServiceRequestCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub UpdateImagingServiceRequestAsync(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal entity As Broker.ImagingServiceRequest)
         Me.UpdateImagingServiceRequestAsync(accessionNumber, patientID, issuerOfPatientID, entity, Nothing)
      End Sub

      Public Overloads Sub UpdateImagingServiceRequestAsync(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal entity As Broker.ImagingServiceRequest, ByVal userState As Object)
         If (Me.onBeginUpdateImagingServiceRequestDelegate Is Nothing) Then
            Me.onBeginUpdateImagingServiceRequestDelegate = AddressOf Me.OnBeginUpdateImagingServiceRequest
         End If
         If (Me.onEndUpdateImagingServiceRequestDelegate Is Nothing) Then
            Me.onEndUpdateImagingServiceRequestDelegate = AddressOf Me.OnEndUpdateImagingServiceRequest
         End If
         If (Me.onUpdateImagingServiceRequestCompletedDelegate Is Nothing) Then
            Me.onUpdateImagingServiceRequestCompletedDelegate = AddressOf Me.OnUpdateImagingServiceRequestCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginUpdateImagingServiceRequestDelegate, New Object() {accessionNumber, patientID, issuerOfPatientID, entity}, Me.onEndUpdateImagingServiceRequestDelegate, Me.onUpdateImagingServiceRequestCompletedDelegate, userState)
      End Sub

      Public Function FindImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String) As Broker.ImagingServiceRequest Implements Broker.IBrokerService.FindImagingServiceRequest
         Return MyBase.Channel.FindImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginFindImagingServiceRequest(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginFindImagingServiceRequest
         Return MyBase.Channel.BeginFindImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndFindImagingServiceRequest(ByVal result As System.IAsyncResult) As Broker.ImagingServiceRequest Implements Broker.IBrokerService.EndFindImagingServiceRequest
         Return MyBase.Channel.EndFindImagingServiceRequest(result)
      End Function

      Private Function OnBeginFindImagingServiceRequest(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Dim patientID As String = CType(inValues(1), String)
         Dim issuerOfPatientID As String = CType(inValues(2), String)
         Return Me.BeginFindImagingServiceRequest(accessionNumber, patientID, issuerOfPatientID, callback, asyncState)
      End Function

      Private Function OnEndFindImagingServiceRequest(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As Broker.ImagingServiceRequest = Me.EndFindImagingServiceRequest(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnFindImagingServiceRequestCompleted(ByVal state As Object)
         If (Not (Me.FindImagingServiceRequestCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent FindImagingServiceRequestCompleted(Me, New FindImagingServiceRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub FindImagingServiceRequestAsync(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String)
         Me.FindImagingServiceRequestAsync(accessionNumber, patientID, issuerOfPatientID, Nothing)
      End Sub

      Public Overloads Sub FindImagingServiceRequestAsync(ByVal accessionNumber As String, ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal userState As Object)
         If (Me.onBeginFindImagingServiceRequestDelegate Is Nothing) Then
            Me.onBeginFindImagingServiceRequestDelegate = AddressOf Me.OnBeginFindImagingServiceRequest
         End If
         If (Me.onEndFindImagingServiceRequestDelegate Is Nothing) Then
            Me.onEndFindImagingServiceRequestDelegate = AddressOf Me.OnEndFindImagingServiceRequest
         End If
         If (Me.onFindImagingServiceRequestCompletedDelegate Is Nothing) Then
            Me.onFindImagingServiceRequestCompletedDelegate = AddressOf Me.OnFindImagingServiceRequestCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginFindImagingServiceRequestDelegate, New Object() {accessionNumber, patientID, issuerOfPatientID}, Me.onEndFindImagingServiceRequestDelegate, Me.onFindImagingServiceRequestCompletedDelegate, userState)
      End Sub

      Public Function GetAccessionNumbers(ByVal patientID As String, ByVal issuerOfPatientID As String) As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.GetAccessionNumbers
         Return MyBase.Channel.GetAccessionNumbers(patientID, issuerOfPatientID)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginGetAccessionNumbers(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginGetAccessionNumbers
         Return MyBase.Channel.BeginGetAccessionNumbers(patientID, issuerOfPatientID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndGetAccessionNumbers(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.EndGetAccessionNumbers
         Return MyBase.Channel.EndGetAccessionNumbers(result)
      End Function

      Private Function OnBeginGetAccessionNumbers(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim patientID As String = CType(inValues(0), String)
         Dim issuerOfPatientID As String = CType(inValues(1), String)
         Return Me.BeginGetAccessionNumbers(patientID, issuerOfPatientID, callback, asyncState)
      End Function

      Private Function OnEndGetAccessionNumbers(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As System.Collections.Generic.List(Of String) = Me.EndGetAccessionNumbers(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnGetAccessionNumbersCompleted(ByVal state As Object)
         If (Not (Me.GetAccessionNumbersCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent GetAccessionNumbersCompleted(Me, New GetAccessionNumbersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub GetAccessionNumbersAsync(ByVal patientID As String, ByVal issuerOfPatientID As String)
         Me.GetAccessionNumbersAsync(patientID, issuerOfPatientID, Nothing)
      End Sub

      Public Overloads Sub GetAccessionNumbersAsync(ByVal patientID As String, ByVal issuerOfPatientID As String, ByVal userState As Object)
         If (Me.onBeginGetAccessionNumbersDelegate Is Nothing) Then
            Me.onBeginGetAccessionNumbersDelegate = AddressOf Me.OnBeginGetAccessionNumbers
         End If
         If (Me.onEndGetAccessionNumbersDelegate Is Nothing) Then
            Me.onEndGetAccessionNumbersDelegate = AddressOf Me.OnEndGetAccessionNumbers
         End If
         If (Me.onGetAccessionNumbersCompletedDelegate Is Nothing) Then
            Me.onGetAccessionNumbersCompletedDelegate = AddressOf Me.OnGetAccessionNumbersCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginGetAccessionNumbersDelegate, New Object() {patientID, issuerOfPatientID}, Me.onEndGetAccessionNumbersDelegate, Me.onGetAccessionNumbersCompletedDelegate, userState)
      End Sub

      Public Sub AddRequestedProcedure(ByVal accessionNumber As String, ByVal procedure As Broker.WCFRequestedProcedure) Implements Broker.IBrokerService.AddRequestedProcedure
         MyBase.Channel.AddRequestedProcedure(accessionNumber, procedure)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginAddRequestedProcedure(ByVal accessionNumber As String, ByVal procedure As Broker.WCFRequestedProcedure, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginAddRequestedProcedure
         Return MyBase.Channel.BeginAddRequestedProcedure(accessionNumber, procedure, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndAddRequestedProcedure(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndAddRequestedProcedure
         MyBase.Channel.EndAddRequestedProcedure(result)
      End Sub

      Private Function OnBeginAddRequestedProcedure(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Dim procedure As Broker.WCFRequestedProcedure = CType(inValues(1), Broker.WCFRequestedProcedure)
         Return Me.BeginAddRequestedProcedure(accessionNumber, procedure, callback, asyncState)
      End Function

      Private Function OnEndAddRequestedProcedure(ByVal result As System.IAsyncResult) As Object()
         Me.EndAddRequestedProcedure(result)
         Return Nothing
      End Function

      Private Sub OnAddRequestedProcedureCompleted(ByVal state As Object)
         If (Not (Me.AddRequestedProcedureCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent AddRequestedProcedureCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub AddRequestedProcedureAsync(ByVal accessionNumber As String, ByVal procedure As Broker.WCFRequestedProcedure)
         Me.AddRequestedProcedureAsync(accessionNumber, procedure, Nothing)
      End Sub

      Public Overloads Sub AddRequestedProcedureAsync(ByVal accessionNumber As String, ByVal procedure As Broker.WCFRequestedProcedure, ByVal userState As Object)
         If (Me.onBeginAddRequestedProcedureDelegate Is Nothing) Then
            Me.onBeginAddRequestedProcedureDelegate = AddressOf Me.OnBeginAddRequestedProcedure
         End If
         If (Me.onEndAddRequestedProcedureDelegate Is Nothing) Then
            Me.onEndAddRequestedProcedureDelegate = AddressOf Me.OnEndAddRequestedProcedure
         End If
         If (Me.onAddRequestedProcedureCompletedDelegate Is Nothing) Then
            Me.onAddRequestedProcedureCompletedDelegate = AddressOf Me.OnAddRequestedProcedureCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginAddRequestedProcedureDelegate, New Object() {accessionNumber, procedure}, Me.onEndAddRequestedProcedureDelegate, Me.onAddRequestedProcedureCompletedDelegate, userState)
      End Sub

      Public Sub DeleteRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String) Implements Broker.IBrokerService.DeleteRequestedProcedure
         MyBase.Channel.DeleteRequestedProcedure(accessionNumber, requestedProcedureID)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginDeleteRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginDeleteRequestedProcedure
         Return MyBase.Channel.BeginDeleteRequestedProcedure(accessionNumber, requestedProcedureID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndDeleteRequestedProcedure(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndDeleteRequestedProcedure
         MyBase.Channel.EndDeleteRequestedProcedure(result)
      End Sub

      Private Function OnBeginDeleteRequestedProcedure(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Dim requestedProcedureID As String = CType(inValues(1), String)
         Return Me.BeginDeleteRequestedProcedure(accessionNumber, requestedProcedureID, callback, asyncState)
      End Function

      Private Function OnEndDeleteRequestedProcedure(ByVal result As System.IAsyncResult) As Object()
         Me.EndDeleteRequestedProcedure(result)
         Return Nothing
      End Function

      Private Sub OnDeleteRequestedProcedureCompleted(ByVal state As Object)
         If (Not (Me.DeleteRequestedProcedureCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent DeleteRequestedProcedureCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub DeleteRequestedProcedureAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String)
         Me.DeleteRequestedProcedureAsync(accessionNumber, requestedProcedureID, Nothing)
      End Sub

      Public Overloads Sub DeleteRequestedProcedureAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal userState As Object)
         If (Me.onBeginDeleteRequestedProcedureDelegate Is Nothing) Then
            Me.onBeginDeleteRequestedProcedureDelegate = AddressOf Me.OnBeginDeleteRequestedProcedure
         End If
         If (Me.onEndDeleteRequestedProcedureDelegate Is Nothing) Then
            Me.onEndDeleteRequestedProcedureDelegate = AddressOf Me.OnEndDeleteRequestedProcedure
         End If
         If (Me.onDeleteRequestedProcedureCompletedDelegate Is Nothing) Then
            Me.onDeleteRequestedProcedureCompletedDelegate = AddressOf Me.OnDeleteRequestedProcedureCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginDeleteRequestedProcedureDelegate, New Object() {accessionNumber, requestedProcedureID}, Me.onEndDeleteRequestedProcedureDelegate, Me.onDeleteRequestedProcedureCompletedDelegate, userState)
      End Sub

      Public Sub UpdateRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedure As Broker.WCFRequestedProcedure) Implements Broker.IBrokerService.UpdateRequestedProcedure
         MyBase.Channel.UpdateRequestedProcedure(accessionNumber, requestedProcedureID, procedure)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginUpdateRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedure As Broker.WCFRequestedProcedure, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginUpdateRequestedProcedure
         Return MyBase.Channel.BeginUpdateRequestedProcedure(accessionNumber, requestedProcedureID, procedure, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndUpdateRequestedProcedure(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndUpdateRequestedProcedure
         MyBase.Channel.EndUpdateRequestedProcedure(result)
      End Sub

      Private Function OnBeginUpdateRequestedProcedure(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Dim requestedProcedureID As String = CType(inValues(1), String)
         Dim procedure As Broker.WCFRequestedProcedure = CType(inValues(2), Broker.WCFRequestedProcedure)
         Return Me.BeginUpdateRequestedProcedure(accessionNumber, requestedProcedureID, procedure, callback, asyncState)
      End Function

      Private Function OnEndUpdateRequestedProcedure(ByVal result As System.IAsyncResult) As Object()
         Me.EndUpdateRequestedProcedure(result)
         Return Nothing
      End Function

      Private Sub OnUpdateRequestedProcedureCompleted(ByVal state As Object)
         If (Not (Me.UpdateRequestedProcedureCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent UpdateRequestedProcedureCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub UpdateRequestedProcedureAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedure As Broker.WCFRequestedProcedure)
         Me.UpdateRequestedProcedureAsync(accessionNumber, requestedProcedureID, procedure, Nothing)
      End Sub

      Public Overloads Sub UpdateRequestedProcedureAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedure As Broker.WCFRequestedProcedure, ByVal userState As Object)
         If (Me.onBeginUpdateRequestedProcedureDelegate Is Nothing) Then
            Me.onBeginUpdateRequestedProcedureDelegate = AddressOf Me.OnBeginUpdateRequestedProcedure
         End If
         If (Me.onEndUpdateRequestedProcedureDelegate Is Nothing) Then
            Me.onEndUpdateRequestedProcedureDelegate = AddressOf Me.OnEndUpdateRequestedProcedure
         End If
         If (Me.onUpdateRequestedProcedureCompletedDelegate Is Nothing) Then
            Me.onUpdateRequestedProcedureCompletedDelegate = AddressOf Me.OnUpdateRequestedProcedureCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginUpdateRequestedProcedureDelegate, New Object() {accessionNumber, requestedProcedureID, procedure}, Me.onEndUpdateRequestedProcedureDelegate, Me.onUpdateRequestedProcedureCompletedDelegate, userState)
      End Sub

      Public Function FindRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String) As Broker.WCFRequestedProcedure Implements Broker.IBrokerService.FindRequestedProcedure
         Return MyBase.Channel.FindRequestedProcedure(accessionNumber, requestedProcedureID)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginFindRequestedProcedure(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginFindRequestedProcedure
         Return MyBase.Channel.BeginFindRequestedProcedure(accessionNumber, requestedProcedureID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndFindRequestedProcedure(ByVal result As System.IAsyncResult) As Broker.WCFRequestedProcedure Implements Broker.IBrokerService.EndFindRequestedProcedure
         Return MyBase.Channel.EndFindRequestedProcedure(result)
      End Function

      Private Function OnBeginFindRequestedProcedure(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Dim requestedProcedureID As String = CType(inValues(1), String)
         Return Me.BeginFindRequestedProcedure(accessionNumber, requestedProcedureID, callback, asyncState)
      End Function

      Private Function OnEndFindRequestedProcedure(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As Broker.WCFRequestedProcedure = Me.EndFindRequestedProcedure(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnFindRequestedProcedureCompleted(ByVal state As Object)
         If (Not (Me.FindRequestedProcedureCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent FindRequestedProcedureCompleted(Me, New FindRequestedProcedureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub FindRequestedProcedureAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String)
         Me.FindRequestedProcedureAsync(accessionNumber, requestedProcedureID, Nothing)
      End Sub

      Public Overloads Sub FindRequestedProcedureAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal userState As Object)
         If (Me.onBeginFindRequestedProcedureDelegate Is Nothing) Then
            Me.onBeginFindRequestedProcedureDelegate = AddressOf Me.OnBeginFindRequestedProcedure
         End If
         If (Me.onEndFindRequestedProcedureDelegate Is Nothing) Then
            Me.onEndFindRequestedProcedureDelegate = AddressOf Me.OnEndFindRequestedProcedure
         End If
         If (Me.onFindRequestedProcedureCompletedDelegate Is Nothing) Then
            Me.onFindRequestedProcedureCompletedDelegate = AddressOf Me.OnFindRequestedProcedureCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginFindRequestedProcedureDelegate, New Object() {accessionNumber, requestedProcedureID}, Me.onEndFindRequestedProcedureDelegate, Me.onFindRequestedProcedureCompletedDelegate, userState)
      End Sub

      Public Function GetRequestedProcedureIDs(ByVal accessionNumber As String) As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.GetRequestedProcedureIDs
         Return MyBase.Channel.GetRequestedProcedureIDs(accessionNumber)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginGetRequestedProcedureIDs(ByVal accessionNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginGetRequestedProcedureIDs
         Return MyBase.Channel.BeginGetRequestedProcedureIDs(accessionNumber, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndGetRequestedProcedureIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.EndGetRequestedProcedureIDs
         Return MyBase.Channel.EndGetRequestedProcedureIDs(result)
      End Function

      Private Function OnBeginGetRequestedProcedureIDs(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Return Me.BeginGetRequestedProcedureIDs(accessionNumber, callback, asyncState)
      End Function

      Private Function OnEndGetRequestedProcedureIDs(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As System.Collections.Generic.List(Of String) = Me.EndGetRequestedProcedureIDs(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnGetRequestedProcedureIDsCompleted(ByVal state As Object)
         If (Not (Me.GetRequestedProcedureIDsCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent GetRequestedProcedureIDsCompleted(Me, New GetRequestedProcedureIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub GetRequestedProcedureIDsAsync(ByVal accessionNumber As String)
         Me.GetRequestedProcedureIDsAsync(accessionNumber, Nothing)
      End Sub

      Public Overloads Sub GetRequestedProcedureIDsAsync(ByVal accessionNumber As String, ByVal userState As Object)
         If (Me.onBeginGetRequestedProcedureIDsDelegate Is Nothing) Then
            Me.onBeginGetRequestedProcedureIDsDelegate = AddressOf Me.OnBeginGetRequestedProcedureIDs
         End If
         If (Me.onEndGetRequestedProcedureIDsDelegate Is Nothing) Then
            Me.onEndGetRequestedProcedureIDsDelegate = AddressOf Me.OnEndGetRequestedProcedureIDs
         End If
         If (Me.onGetRequestedProcedureIDsCompletedDelegate Is Nothing) Then
            Me.onGetRequestedProcedureIDsCompletedDelegate = AddressOf Me.OnGetRequestedProcedureIDsCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginGetRequestedProcedureIDsDelegate, New Object() {accessionNumber}, Me.onEndGetRequestedProcedureIDsDelegate, Me.onGetRequestedProcedureIDsCompletedDelegate, userState)
      End Sub

      Public Sub AddScheduledProcedureStep(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep) Implements Broker.IBrokerService.AddScheduledProcedureStep
         MyBase.Channel.AddScheduledProcedureStep(accessionNumber, requestedProcedureID, procedureStep)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginAddScheduledProcedureStep(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginAddScheduledProcedureStep
         Return MyBase.Channel.BeginAddScheduledProcedureStep(accessionNumber, requestedProcedureID, procedureStep, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndAddScheduledProcedureStep(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndAddScheduledProcedureStep
         MyBase.Channel.EndAddScheduledProcedureStep(result)
      End Sub

      Private Function OnBeginAddScheduledProcedureStep(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Dim requestedProcedureID As String = CType(inValues(1), String)
         Dim procedureStep As Broker.WCFScheduledProcedureStep = CType(inValues(2), Broker.WCFScheduledProcedureStep)
         Return Me.BeginAddScheduledProcedureStep(accessionNumber, requestedProcedureID, procedureStep, callback, asyncState)
      End Function

      Private Function OnEndAddScheduledProcedureStep(ByVal result As System.IAsyncResult) As Object()
         Me.EndAddScheduledProcedureStep(result)
         Return Nothing
      End Function

      Private Sub OnAddScheduledProcedureStepCompleted(ByVal state As Object)
         If (Not (Me.AddScheduledProcedureStepCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent AddScheduledProcedureStepCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub AddScheduledProcedureStepAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep)
         Me.AddScheduledProcedureStepAsync(accessionNumber, requestedProcedureID, procedureStep, Nothing)
      End Sub

      Public Overloads Sub AddScheduledProcedureStepAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep, ByVal userState As Object)
         If (Me.onBeginAddScheduledProcedureStepDelegate Is Nothing) Then
            Me.onBeginAddScheduledProcedureStepDelegate = AddressOf Me.OnBeginAddScheduledProcedureStep
         End If
         If (Me.onEndAddScheduledProcedureStepDelegate Is Nothing) Then
            Me.onEndAddScheduledProcedureStepDelegate = AddressOf Me.OnEndAddScheduledProcedureStep
         End If
         If (Me.onAddScheduledProcedureStepCompletedDelegate Is Nothing) Then
            Me.onAddScheduledProcedureStepCompletedDelegate = AddressOf Me.OnAddScheduledProcedureStepCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginAddScheduledProcedureStepDelegate, New Object() {accessionNumber, requestedProcedureID, procedureStep}, Me.onEndAddScheduledProcedureStepDelegate, Me.onAddScheduledProcedureStepCompletedDelegate, userState)
      End Sub

      Public Sub UpdateScheduledProcedureStep(ByVal scheduledProcedureStepID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep) Implements Broker.IBrokerService.UpdateScheduledProcedureStep
         MyBase.Channel.UpdateScheduledProcedureStep(scheduledProcedureStepID, procedureStep)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginUpdateScheduledProcedureStep(ByVal scheduledProcedureStepID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginUpdateScheduledProcedureStep
         Return MyBase.Channel.BeginUpdateScheduledProcedureStep(scheduledProcedureStepID, procedureStep, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndUpdateScheduledProcedureStep(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndUpdateScheduledProcedureStep
         MyBase.Channel.EndUpdateScheduledProcedureStep(result)
      End Sub

      Private Function OnBeginUpdateScheduledProcedureStep(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim scheduledProcedureStepID As String = CType(inValues(0), String)
         Dim procedureStep As Broker.WCFScheduledProcedureStep = CType(inValues(1), Broker.WCFScheduledProcedureStep)
         Return Me.BeginUpdateScheduledProcedureStep(scheduledProcedureStepID, procedureStep, callback, asyncState)
      End Function

      Private Function OnEndUpdateScheduledProcedureStep(ByVal result As System.IAsyncResult) As Object()
         Me.EndUpdateScheduledProcedureStep(result)
         Return Nothing
      End Function

      Private Sub OnUpdateScheduledProcedureStepCompleted(ByVal state As Object)
         If (Not (Me.UpdateScheduledProcedureStepCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent UpdateScheduledProcedureStepCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub UpdateScheduledProcedureStepAsync(ByVal scheduledProcedureStepID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep)
         Me.UpdateScheduledProcedureStepAsync(scheduledProcedureStepID, procedureStep, Nothing)
      End Sub

      Public Overloads Sub UpdateScheduledProcedureStepAsync(ByVal scheduledProcedureStepID As String, ByVal procedureStep As Broker.WCFScheduledProcedureStep, ByVal userState As Object)
         If (Me.onBeginUpdateScheduledProcedureStepDelegate Is Nothing) Then
            Me.onBeginUpdateScheduledProcedureStepDelegate = AddressOf Me.OnBeginUpdateScheduledProcedureStep
         End If
         If (Me.onEndUpdateScheduledProcedureStepDelegate Is Nothing) Then
            Me.onEndUpdateScheduledProcedureStepDelegate = AddressOf Me.OnEndUpdateScheduledProcedureStep
         End If
         If (Me.onUpdateScheduledProcedureStepCompletedDelegate Is Nothing) Then
            Me.onUpdateScheduledProcedureStepCompletedDelegate = AddressOf Me.OnUpdateScheduledProcedureStepCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginUpdateScheduledProcedureStepDelegate, New Object() {scheduledProcedureStepID, procedureStep}, Me.onEndUpdateScheduledProcedureStepDelegate, Me.onUpdateScheduledProcedureStepCompletedDelegate, userState)
      End Sub

      Public Sub DeleteScheduledProcedureStep(ByVal scheduledProcedureStepID As String) Implements Broker.IBrokerService.DeleteScheduledProcedureStep
         MyBase.Channel.DeleteScheduledProcedureStep(scheduledProcedureStepID)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginDeleteScheduledProcedureStep(ByVal scheduledProcedureStepID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginDeleteScheduledProcedureStep
         Return MyBase.Channel.BeginDeleteScheduledProcedureStep(scheduledProcedureStepID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndDeleteScheduledProcedureStep(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndDeleteScheduledProcedureStep
         MyBase.Channel.EndDeleteScheduledProcedureStep(result)
      End Sub

      Private Function OnBeginDeleteScheduledProcedureStep(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim scheduledProcedureStepID As String = CType(inValues(0), String)
         Return Me.BeginDeleteScheduledProcedureStep(scheduledProcedureStepID, callback, asyncState)
      End Function

      Private Function OnEndDeleteScheduledProcedureStep(ByVal result As System.IAsyncResult) As Object()
         Me.EndDeleteScheduledProcedureStep(result)
         Return Nothing
      End Function

      Private Sub OnDeleteScheduledProcedureStepCompleted(ByVal state As Object)
         If (Not (Me.DeleteScheduledProcedureStepCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent DeleteScheduledProcedureStepCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub DeleteScheduledProcedureStepAsync(ByVal scheduledProcedureStepID As String)
         Me.DeleteScheduledProcedureStepAsync(scheduledProcedureStepID, Nothing)
      End Sub

      Public Overloads Sub DeleteScheduledProcedureStepAsync(ByVal scheduledProcedureStepID As String, ByVal userState As Object)
         If (Me.onBeginDeleteScheduledProcedureStepDelegate Is Nothing) Then
            Me.onBeginDeleteScheduledProcedureStepDelegate = AddressOf Me.OnBeginDeleteScheduledProcedureStep
         End If
         If (Me.onEndDeleteScheduledProcedureStepDelegate Is Nothing) Then
            Me.onEndDeleteScheduledProcedureStepDelegate = AddressOf Me.OnEndDeleteScheduledProcedureStep
         End If
         If (Me.onDeleteScheduledProcedureStepCompletedDelegate Is Nothing) Then
            Me.onDeleteScheduledProcedureStepCompletedDelegate = AddressOf Me.OnDeleteScheduledProcedureStepCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginDeleteScheduledProcedureStepDelegate, New Object() {scheduledProcedureStepID}, Me.onEndDeleteScheduledProcedureStepDelegate, Me.onDeleteScheduledProcedureStepCompletedDelegate, userState)
      End Sub

      Public Function FindScheduledProcedureStep(ByVal scheduledProcedureStepID As String) As Broker.WCFScheduledProcedureStep Implements Broker.IBrokerService.FindScheduledProcedureStep
         Return MyBase.Channel.FindScheduledProcedureStep(scheduledProcedureStepID)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginFindScheduledProcedureStep(ByVal scheduledProcedureStepID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginFindScheduledProcedureStep
         Return MyBase.Channel.BeginFindScheduledProcedureStep(scheduledProcedureStepID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndFindScheduledProcedureStep(ByVal result As System.IAsyncResult) As Broker.WCFScheduledProcedureStep Implements Broker.IBrokerService.EndFindScheduledProcedureStep
         Return MyBase.Channel.EndFindScheduledProcedureStep(result)
      End Function

      Private Function OnBeginFindScheduledProcedureStep(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim scheduledProcedureStepID As String = CType(inValues(0), String)
         Return Me.BeginFindScheduledProcedureStep(scheduledProcedureStepID, callback, asyncState)
      End Function

      Private Function OnEndFindScheduledProcedureStep(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As Broker.WCFScheduledProcedureStep = Me.EndFindScheduledProcedureStep(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnFindScheduledProcedureStepCompleted(ByVal state As Object)
         If (Not (Me.FindScheduledProcedureStepCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent FindScheduledProcedureStepCompleted(Me, New FindScheduledProcedureStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub FindScheduledProcedureStepAsync(ByVal scheduledProcedureStepID As String)
         Me.FindScheduledProcedureStepAsync(scheduledProcedureStepID, Nothing)
      End Sub

      Public Overloads Sub FindScheduledProcedureStepAsync(ByVal scheduledProcedureStepID As String, ByVal userState As Object)
         If (Me.onBeginFindScheduledProcedureStepDelegate Is Nothing) Then
            Me.onBeginFindScheduledProcedureStepDelegate = AddressOf Me.OnBeginFindScheduledProcedureStep
         End If
         If (Me.onEndFindScheduledProcedureStepDelegate Is Nothing) Then
            Me.onEndFindScheduledProcedureStepDelegate = AddressOf Me.OnEndFindScheduledProcedureStep
         End If
         If (Me.onFindScheduledProcedureStepCompletedDelegate Is Nothing) Then
            Me.onFindScheduledProcedureStepCompletedDelegate = AddressOf Me.OnFindScheduledProcedureStepCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginFindScheduledProcedureStepDelegate, New Object() {scheduledProcedureStepID}, Me.onEndFindScheduledProcedureStepDelegate, Me.onFindScheduledProcedureStepCompletedDelegate, userState)
      End Sub

      Public Function GetScheduledProcedureStepIDs(ByVal accessionNumber As String, ByVal requestedProcedureID As String) As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.GetScheduledProcedureStepIDs
         Return MyBase.Channel.GetScheduledProcedureStepIDs(accessionNumber, requestedProcedureID)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginGetScheduledProcedureStepIDs(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginGetScheduledProcedureStepIDs
         Return MyBase.Channel.BeginGetScheduledProcedureStepIDs(accessionNumber, requestedProcedureID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndGetScheduledProcedureStepIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.EndGetScheduledProcedureStepIDs
         Return MyBase.Channel.EndGetScheduledProcedureStepIDs(result)
      End Function

      Private Function OnBeginGetScheduledProcedureStepIDs(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim accessionNumber As String = CType(inValues(0), String)
         Dim requestedProcedureID As String = CType(inValues(1), String)
         Return Me.BeginGetScheduledProcedureStepIDs(accessionNumber, requestedProcedureID, callback, asyncState)
      End Function

      Private Function OnEndGetScheduledProcedureStepIDs(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As System.Collections.Generic.List(Of String) = Me.EndGetScheduledProcedureStepIDs(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnGetScheduledProcedureStepIDsCompleted(ByVal state As Object)
         If (Not (Me.GetScheduledProcedureStepIDsCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent GetScheduledProcedureStepIDsCompleted(Me, New GetScheduledProcedureStepIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub GetScheduledProcedureStepIDsAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String)
         Me.GetScheduledProcedureStepIDsAsync(accessionNumber, requestedProcedureID, Nothing)
      End Sub

      Public Overloads Sub GetScheduledProcedureStepIDsAsync(ByVal accessionNumber As String, ByVal requestedProcedureID As String, ByVal userState As Object)
         If (Me.onBeginGetScheduledProcedureStepIDsDelegate Is Nothing) Then
            Me.onBeginGetScheduledProcedureStepIDsDelegate = AddressOf Me.OnBeginGetScheduledProcedureStepIDs
         End If
         If (Me.onEndGetScheduledProcedureStepIDsDelegate Is Nothing) Then
            Me.onEndGetScheduledProcedureStepIDsDelegate = AddressOf Me.OnEndGetScheduledProcedureStepIDs
         End If
         If (Me.onGetScheduledProcedureStepIDsCompletedDelegate Is Nothing) Then
            Me.onGetScheduledProcedureStepIDsCompletedDelegate = AddressOf Me.OnGetScheduledProcedureStepIDsCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginGetScheduledProcedureStepIDsDelegate, New Object() {accessionNumber, requestedProcedureID}, Me.onEndGetScheduledProcedureStepIDsDelegate, Me.onGetScheduledProcedureStepIDsCompletedDelegate, userState)
      End Sub

      Public Sub AddVisit(ByVal visit As Broker.WCFVisit) Implements Broker.IBrokerService.AddVisit
         MyBase.Channel.AddVisit(visit)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginAddVisit(ByVal visit As Broker.WCFVisit, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginAddVisit
         Return MyBase.Channel.BeginAddVisit(visit, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndAddVisit(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndAddVisit
         MyBase.Channel.EndAddVisit(result)
      End Sub

      Private Function OnBeginAddVisit(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim visit As Broker.WCFVisit = CType(inValues(0), Broker.WCFVisit)
         Return Me.BeginAddVisit(visit, callback, asyncState)
      End Function

      Private Function OnEndAddVisit(ByVal result As System.IAsyncResult) As Object()
         Me.EndAddVisit(result)
         Return Nothing
      End Function

      Private Sub OnAddVisitCompleted(ByVal state As Object)
         If (Not (Me.AddVisitCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent AddVisitCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub AddVisitAsync(ByVal visit As Broker.WCFVisit)
         Me.AddVisitAsync(visit, Nothing)
      End Sub

      Public Overloads Sub AddVisitAsync(ByVal visit As Broker.WCFVisit, ByVal userState As Object)
         If (Me.onBeginAddVisitDelegate Is Nothing) Then
            Me.onBeginAddVisitDelegate = AddressOf Me.OnBeginAddVisit
         End If
         If (Me.onEndAddVisitDelegate Is Nothing) Then
            Me.onEndAddVisitDelegate = AddressOf Me.OnEndAddVisit
         End If
         If (Me.onAddVisitCompletedDelegate Is Nothing) Then
            Me.onAddVisitCompletedDelegate = AddressOf Me.OnAddVisitCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginAddVisitDelegate, New Object() {visit}, Me.onEndAddVisitDelegate, Me.onAddVisitCompletedDelegate, userState)
      End Sub

      Public Sub UpdateVisit(ByVal admissionID As String, ByVal visit As Broker.WCFVisit) Implements Broker.IBrokerService.UpdateVisit
         MyBase.Channel.UpdateVisit(admissionID, visit)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginUpdateVisit(ByVal admissionID As String, ByVal visit As Broker.WCFVisit, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginUpdateVisit
         Return MyBase.Channel.BeginUpdateVisit(admissionID, visit, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndUpdateVisit(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndUpdateVisit
         MyBase.Channel.EndUpdateVisit(result)
      End Sub

      Private Function OnBeginUpdateVisit(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim admissionID As String = CType(inValues(0), String)
         Dim visit As Broker.WCFVisit = CType(inValues(1), Broker.WCFVisit)
         Return Me.BeginUpdateVisit(admissionID, visit, callback, asyncState)
      End Function

      Private Function OnEndUpdateVisit(ByVal result As System.IAsyncResult) As Object()
         Me.EndUpdateVisit(result)
         Return Nothing
      End Function

      Private Sub OnUpdateVisitCompleted(ByVal state As Object)
         If (Not (Me.UpdateVisitCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent UpdateVisitCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub UpdateVisitAsync(ByVal admissionID As String, ByVal visit As Broker.WCFVisit)
         Me.UpdateVisitAsync(admissionID, visit, Nothing)
      End Sub

      Public Overloads Sub UpdateVisitAsync(ByVal admissionID As String, ByVal visit As Broker.WCFVisit, ByVal userState As Object)
         If (Me.onBeginUpdateVisitDelegate Is Nothing) Then
            Me.onBeginUpdateVisitDelegate = AddressOf Me.OnBeginUpdateVisit
         End If
         If (Me.onEndUpdateVisitDelegate Is Nothing) Then
            Me.onEndUpdateVisitDelegate = AddressOf Me.OnEndUpdateVisit
         End If
         If (Me.onUpdateVisitCompletedDelegate Is Nothing) Then
            Me.onUpdateVisitCompletedDelegate = AddressOf Me.OnUpdateVisitCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginUpdateVisitDelegate, New Object() {admissionID, visit}, Me.onEndUpdateVisitDelegate, Me.onUpdateVisitCompletedDelegate, userState)
      End Sub

      Public Sub DeleteVisit(ByVal admissionID As String) Implements Broker.IBrokerService.DeleteVisit
         MyBase.Channel.DeleteVisit(admissionID)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginDeleteVisit(ByVal admissionID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginDeleteVisit
         Return MyBase.Channel.BeginDeleteVisit(admissionID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndDeleteVisit(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndDeleteVisit
         MyBase.Channel.EndDeleteVisit(result)
      End Sub

      Private Function OnBeginDeleteVisit(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim admissionID As String = CType(inValues(0), String)
         Return Me.BeginDeleteVisit(admissionID, callback, asyncState)
      End Function

      Private Function OnEndDeleteVisit(ByVal result As System.IAsyncResult) As Object()
         Me.EndDeleteVisit(result)
         Return Nothing
      End Function

      Private Sub OnDeleteVisitCompleted(ByVal state As Object)
         If (Not (Me.DeleteVisitCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent DeleteVisitCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub DeleteVisitAsync(ByVal admissionID As String)
         Me.DeleteVisitAsync(admissionID, Nothing)
      End Sub

      Public Overloads Sub DeleteVisitAsync(ByVal admissionID As String, ByVal userState As Object)
         If (Me.onBeginDeleteVisitDelegate Is Nothing) Then
            Me.onBeginDeleteVisitDelegate = AddressOf Me.OnBeginDeleteVisit
         End If
         If (Me.onEndDeleteVisitDelegate Is Nothing) Then
            Me.onEndDeleteVisitDelegate = AddressOf Me.OnEndDeleteVisit
         End If
         If (Me.onDeleteVisitCompletedDelegate Is Nothing) Then
            Me.onDeleteVisitCompletedDelegate = AddressOf Me.OnDeleteVisitCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginDeleteVisitDelegate, New Object() {admissionID}, Me.onEndDeleteVisitDelegate, Me.onDeleteVisitCompletedDelegate, userState)
      End Sub

      Public Function FindVisit(ByVal admissionID As String) As Broker.WCFVisit Implements Broker.IBrokerService.FindVisit
         Return MyBase.Channel.FindVisit(admissionID)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginFindVisit(ByVal admissionID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginFindVisit
         Return MyBase.Channel.BeginFindVisit(admissionID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndFindVisit(ByVal result As System.IAsyncResult) As Broker.WCFVisit Implements Broker.IBrokerService.EndFindVisit
         Return MyBase.Channel.EndFindVisit(result)
      End Function

      Private Function OnBeginFindVisit(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim admissionID As String = CType(inValues(0), String)
         Return Me.BeginFindVisit(admissionID, callback, asyncState)
      End Function

      Private Function OnEndFindVisit(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As Broker.WCFVisit = Me.EndFindVisit(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnFindVisitCompleted(ByVal state As Object)
         If (Not (Me.FindVisitCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent FindVisitCompleted(Me, New FindVisitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub FindVisitAsync(ByVal admissionID As String)
         Me.FindVisitAsync(admissionID, Nothing)
      End Sub

      Public Overloads Sub FindVisitAsync(ByVal admissionID As String, ByVal userState As Object)
         If (Me.onBeginFindVisitDelegate Is Nothing) Then
            Me.onBeginFindVisitDelegate = AddressOf Me.OnBeginFindVisit
         End If
         If (Me.onEndFindVisitDelegate Is Nothing) Then
            Me.onEndFindVisitDelegate = AddressOf Me.OnEndFindVisit
         End If
         If (Me.onFindVisitCompletedDelegate Is Nothing) Then
            Me.onFindVisitCompletedDelegate = AddressOf Me.OnFindVisitCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginFindVisitDelegate, New Object() {admissionID}, Me.onEndFindVisitDelegate, Me.onFindVisitCompletedDelegate, userState)
      End Sub

      Public Function GetAdmissionIDs() As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.GetAdmissionIDs
         Return MyBase.Channel.GetAdmissionIDs
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginGetAdmissionIDs(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginGetAdmissionIDs
         Return MyBase.Channel.BeginGetAdmissionIDs(callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndGetAdmissionIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.EndGetAdmissionIDs
         Return MyBase.Channel.EndGetAdmissionIDs(result)
      End Function

      Private Function OnBeginGetAdmissionIDs(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Return Me.BeginGetAdmissionIDs(callback, asyncState)
      End Function

      Private Function OnEndGetAdmissionIDs(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As System.Collections.Generic.List(Of String) = Me.EndGetAdmissionIDs(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnGetAdmissionIDsCompleted(ByVal state As Object)
         If (Not (Me.GetAdmissionIDsCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent GetAdmissionIDsCompleted(Me, New GetAdmissionIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub GetAdmissionIDsAsync()
         Me.GetAdmissionIDsAsync(Nothing)
      End Sub

      Public Overloads Sub GetAdmissionIDsAsync(ByVal userState As Object)
         If (Me.onBeginGetAdmissionIDsDelegate Is Nothing) Then
            Me.onBeginGetAdmissionIDsDelegate = AddressOf Me.OnBeginGetAdmissionIDs
         End If
         If (Me.onEndGetAdmissionIDsDelegate Is Nothing) Then
            Me.onEndGetAdmissionIDsDelegate = AddressOf Me.OnEndGetAdmissionIDs
         End If
         If (Me.onGetAdmissionIDsCompletedDelegate Is Nothing) Then
            Me.onGetAdmissionIDsCompletedDelegate = AddressOf Me.OnGetAdmissionIDsCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginGetAdmissionIDsDelegate, Nothing, Me.onEndGetAdmissionIDsDelegate, Me.onGetAdmissionIDsCompletedDelegate, userState)
      End Sub

      Public Sub AddMPPS(ByVal mpps As Broker.WCFPPSInformation) Implements Broker.IBrokerService.AddMPPS
         MyBase.Channel.AddMPPS(mpps)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginAddMPPS(ByVal mpps As Broker.WCFPPSInformation, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginAddMPPS
         Return MyBase.Channel.BeginAddMPPS(mpps, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndAddMPPS(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndAddMPPS
         MyBase.Channel.EndAddMPPS(result)
      End Sub

      Private Function OnBeginAddMPPS(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim mpps As Broker.WCFPPSInformation = CType(inValues(0), Broker.WCFPPSInformation)
         Return Me.BeginAddMPPS(mpps, callback, asyncState)
      End Function

      Private Function OnEndAddMPPS(ByVal result As System.IAsyncResult) As Object()
         Me.EndAddMPPS(result)
         Return Nothing
      End Function

      Private Sub OnAddMPPSCompleted(ByVal state As Object)
         If (Not (Me.AddMPPSCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent AddMPPSCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub AddMPPSAsync(ByVal mpps As Broker.WCFPPSInformation)
         Me.AddMPPSAsync(mpps, Nothing)
      End Sub

      Public Overloads Sub AddMPPSAsync(ByVal mpps As Broker.WCFPPSInformation, ByVal userState As Object)
         If (Me.onBeginAddMPPSDelegate Is Nothing) Then
            Me.onBeginAddMPPSDelegate = AddressOf Me.OnBeginAddMPPS
         End If
         If (Me.onEndAddMPPSDelegate Is Nothing) Then
            Me.onEndAddMPPSDelegate = AddressOf Me.OnEndAddMPPS
         End If
         If (Me.onAddMPPSCompletedDelegate Is Nothing) Then
            Me.onAddMPPSCompletedDelegate = AddressOf Me.OnAddMPPSCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginAddMPPSDelegate, New Object() {mpps}, Me.onEndAddMPPSDelegate, Me.onAddMPPSCompletedDelegate, userState)
      End Sub

      Public Sub DeleteMPPS(ByVal mppsSOPInstanceUID As String) Implements Broker.IBrokerService.DeleteMPPS
         MyBase.Channel.DeleteMPPS(mppsSOPInstanceUID)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginDeleteMPPS(ByVal mppsSOPInstanceUID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginDeleteMPPS
         Return MyBase.Channel.BeginDeleteMPPS(mppsSOPInstanceUID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndDeleteMPPS(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndDeleteMPPS
         MyBase.Channel.EndDeleteMPPS(result)
      End Sub

      Private Function OnBeginDeleteMPPS(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim mppsSOPInstanceUID As String = CType(inValues(0), String)
         Return Me.BeginDeleteMPPS(mppsSOPInstanceUID, callback, asyncState)
      End Function

      Private Function OnEndDeleteMPPS(ByVal result As System.IAsyncResult) As Object()
         Me.EndDeleteMPPS(result)
         Return Nothing
      End Function

      Private Sub OnDeleteMPPSCompleted(ByVal state As Object)
         If (Not (Me.DeleteMPPSCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent DeleteMPPSCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub DeleteMPPSAsync(ByVal mppsSOPInstanceUID As String)
         Me.DeleteMPPSAsync(mppsSOPInstanceUID, Nothing)
      End Sub

      Public Overloads Sub DeleteMPPSAsync(ByVal mppsSOPInstanceUID As String, ByVal userState As Object)
         If (Me.onBeginDeleteMPPSDelegate Is Nothing) Then
            Me.onBeginDeleteMPPSDelegate = AddressOf Me.OnBeginDeleteMPPS
         End If
         If (Me.onEndDeleteMPPSDelegate Is Nothing) Then
            Me.onEndDeleteMPPSDelegate = AddressOf Me.OnEndDeleteMPPS
         End If
         If (Me.onDeleteMPPSCompletedDelegate Is Nothing) Then
            Me.onDeleteMPPSCompletedDelegate = AddressOf Me.OnDeleteMPPSCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginDeleteMPPSDelegate, New Object() {mppsSOPInstanceUID}, Me.onEndDeleteMPPSDelegate, Me.onDeleteMPPSCompletedDelegate, userState)
      End Sub

      Public Sub UpdateMPPS(ByVal mppsSOPInstanceUID As String, ByVal mpps As Broker.WCFPPSInformation) Implements Broker.IBrokerService.UpdateMPPS
         MyBase.Channel.UpdateMPPS(mppsSOPInstanceUID, mpps)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginUpdateMPPS(ByVal mppsSOPInstanceUID As String, ByVal mpps As Broker.WCFPPSInformation, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginUpdateMPPS
         Return MyBase.Channel.BeginUpdateMPPS(mppsSOPInstanceUID, mpps, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndUpdateMPPS(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndUpdateMPPS
         MyBase.Channel.EndUpdateMPPS(result)
      End Sub

      Private Function OnBeginUpdateMPPS(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim mppsSOPInstanceUID As String = CType(inValues(0), String)
         Dim mpps As Broker.WCFPPSInformation = CType(inValues(1), Broker.WCFPPSInformation)
         Return Me.BeginUpdateMPPS(mppsSOPInstanceUID, mpps, callback, asyncState)
      End Function

      Private Function OnEndUpdateMPPS(ByVal result As System.IAsyncResult) As Object()
         Me.EndUpdateMPPS(result)
         Return Nothing
      End Function

      Private Sub OnUpdateMPPSCompleted(ByVal state As Object)
         If (Not (Me.UpdateMPPSCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent UpdateMPPSCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub UpdateMPPSAsync(ByVal mppsSOPInstanceUID As String, ByVal mpps As Broker.WCFPPSInformation)
         Me.UpdateMPPSAsync(mppsSOPInstanceUID, mpps, Nothing)
      End Sub

      Public Overloads Sub UpdateMPPSAsync(ByVal mppsSOPInstanceUID As String, ByVal mpps As Broker.WCFPPSInformation, ByVal userState As Object)
         If (Me.onBeginUpdateMPPSDelegate Is Nothing) Then
            Me.onBeginUpdateMPPSDelegate = AddressOf Me.OnBeginUpdateMPPS
         End If
         If (Me.onEndUpdateMPPSDelegate Is Nothing) Then
            Me.onEndUpdateMPPSDelegate = AddressOf Me.OnEndUpdateMPPS
         End If
         If (Me.onUpdateMPPSCompletedDelegate Is Nothing) Then
            Me.onUpdateMPPSCompletedDelegate = AddressOf Me.OnUpdateMPPSCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginUpdateMPPSDelegate, New Object() {mppsSOPInstanceUID, mpps}, Me.onEndUpdateMPPSDelegate, Me.onUpdateMPPSCompletedDelegate, userState)
      End Sub

      Public Function FindMPPS(ByVal mppsSOPInstanceUID As String) As Broker.WCFPPSInformation Implements Broker.IBrokerService.FindMPPS
         Return MyBase.Channel.FindMPPS(mppsSOPInstanceUID)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginFindMPPS(ByVal mppsSOPInstanceUID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginFindMPPS
         Return MyBase.Channel.BeginFindMPPS(mppsSOPInstanceUID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndFindMPPS(ByVal result As System.IAsyncResult) As Broker.WCFPPSInformation Implements Broker.IBrokerService.EndFindMPPS
         Return MyBase.Channel.EndFindMPPS(result)
      End Function

      Private Function OnBeginFindMPPS(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim mppsSOPInstanceUID As String = CType(inValues(0), String)
         Return Me.BeginFindMPPS(mppsSOPInstanceUID, callback, asyncState)
      End Function

      Private Function OnEndFindMPPS(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As Broker.WCFPPSInformation = Me.EndFindMPPS(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnFindMPPSCompleted(ByVal state As Object)
         If (Not (Me.FindMPPSCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent FindMPPSCompleted(Me, New FindMPPSCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub FindMPPSAsync(ByVal mppsSOPInstanceUID As String)
         Me.FindMPPSAsync(mppsSOPInstanceUID, Nothing)
      End Sub

      Public Overloads Sub FindMPPSAsync(ByVal mppsSOPInstanceUID As String, ByVal userState As Object)
         If (Me.onBeginFindMPPSDelegate Is Nothing) Then
            Me.onBeginFindMPPSDelegate = AddressOf Me.OnBeginFindMPPS
         End If
         If (Me.onEndFindMPPSDelegate Is Nothing) Then
            Me.onEndFindMPPSDelegate = AddressOf Me.OnEndFindMPPS
         End If
         If (Me.onFindMPPSCompletedDelegate Is Nothing) Then
            Me.onFindMPPSCompletedDelegate = AddressOf Me.OnFindMPPSCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginFindMPPSDelegate, New Object() {mppsSOPInstanceUID}, Me.onEndFindMPPSDelegate, Me.onFindMPPSCompletedDelegate, userState)
      End Sub

      Public Function QueryMPPS(ByVal query As Broker.MPPSQuery) As System.Collections.Generic.List(Of Broker.WCFPPSInformation) Implements Broker.IBrokerService.QueryMPPS
         Return MyBase.Channel.QueryMPPS(query)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginQueryMPPS(ByVal query As Broker.MPPSQuery, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginQueryMPPS
         Return MyBase.Channel.BeginQueryMPPS(query, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndQueryMPPS(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of Broker.WCFPPSInformation) Implements Broker.IBrokerService.EndQueryMPPS
         Return MyBase.Channel.EndQueryMPPS(result)
      End Function

      Private Function OnBeginQueryMPPS(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim query As Broker.MPPSQuery = CType(inValues(0), Broker.MPPSQuery)
         Return Me.BeginQueryMPPS(query, callback, asyncState)
      End Function

      Private Function OnEndQueryMPPS(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As System.Collections.Generic.List(Of Broker.WCFPPSInformation) = Me.EndQueryMPPS(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnQueryMPPSCompleted(ByVal state As Object)
         If (Not (Me.QueryMPPSCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent QueryMPPSCompleted(Me, New QueryMPPSCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub QueryMPPSAsync(ByVal query As Broker.MPPSQuery)
         Me.QueryMPPSAsync(query, Nothing)
      End Sub

      Public Overloads Sub QueryMPPSAsync(ByVal query As Broker.MPPSQuery, ByVal userState As Object)
         If (Me.onBeginQueryMPPSDelegate Is Nothing) Then
            Me.onBeginQueryMPPSDelegate = AddressOf Me.OnBeginQueryMPPS
         End If
         If (Me.onEndQueryMPPSDelegate Is Nothing) Then
            Me.onEndQueryMPPSDelegate = AddressOf Me.OnEndQueryMPPS
         End If
         If (Me.onQueryMPPSCompletedDelegate Is Nothing) Then
            Me.onQueryMPPSCompletedDelegate = AddressOf Me.OnQueryMPPSCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginQueryMPPSDelegate, New Object() {query}, Me.onEndQueryMPPSDelegate, Me.onQueryMPPSCompletedDelegate, userState)
      End Sub

      Public Sub HandleUnscheduledMPPS(ByVal mppsSOPInstanceUID As String, ByVal scheduledProcedureStepID As String) Implements Broker.IBrokerService.HandleUnscheduledMPPS
         MyBase.Channel.HandleUnscheduledMPPS(mppsSOPInstanceUID, scheduledProcedureStepID)
      End Sub

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginHandleUnscheduledMPPS(ByVal mppsSOPInstanceUID As String, ByVal scheduledProcedureStepID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginHandleUnscheduledMPPS
         Return MyBase.Channel.BeginHandleUnscheduledMPPS(mppsSOPInstanceUID, scheduledProcedureStepID, callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Sub EndHandleUnscheduledMPPS(ByVal result As System.IAsyncResult) Implements Broker.IBrokerService.EndHandleUnscheduledMPPS
         MyBase.Channel.EndHandleUnscheduledMPPS(result)
      End Sub

      Private Function OnBeginHandleUnscheduledMPPS(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Dim mppsSOPInstanceUID As String = CType(inValues(0), String)
         Dim scheduledProcedureStepID As String = CType(inValues(1), String)
         Return Me.BeginHandleUnscheduledMPPS(mppsSOPInstanceUID, scheduledProcedureStepID, callback, asyncState)
      End Function

      Private Function OnEndHandleUnscheduledMPPS(ByVal result As System.IAsyncResult) As Object()
         Me.EndHandleUnscheduledMPPS(result)
         Return Nothing
      End Function

      Private Sub OnHandleUnscheduledMPPSCompleted(ByVal state As Object)
         If (Not (Me.HandleUnscheduledMPPSCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent HandleUnscheduledMPPSCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub HandleUnscheduledMPPSAsync(ByVal mppsSOPInstanceUID As String, ByVal scheduledProcedureStepID As String)
         Me.HandleUnscheduledMPPSAsync(mppsSOPInstanceUID, scheduledProcedureStepID, Nothing)
      End Sub

      Public Overloads Sub HandleUnscheduledMPPSAsync(ByVal mppsSOPInstanceUID As String, ByVal scheduledProcedureStepID As String, ByVal userState As Object)
         If (Me.onBeginHandleUnscheduledMPPSDelegate Is Nothing) Then
            Me.onBeginHandleUnscheduledMPPSDelegate = AddressOf Me.OnBeginHandleUnscheduledMPPS
         End If
         If (Me.onEndHandleUnscheduledMPPSDelegate Is Nothing) Then
            Me.onEndHandleUnscheduledMPPSDelegate = AddressOf Me.OnEndHandleUnscheduledMPPS
         End If
         If (Me.onHandleUnscheduledMPPSCompletedDelegate Is Nothing) Then
            Me.onHandleUnscheduledMPPSCompletedDelegate = AddressOf Me.OnHandleUnscheduledMPPSCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginHandleUnscheduledMPPSDelegate, New Object() {mppsSOPInstanceUID, scheduledProcedureStepID}, Me.onEndHandleUnscheduledMPPSDelegate, Me.onHandleUnscheduledMPPSCompletedDelegate, userState)
      End Sub

      Public Function GetUnscheduledPerformedProcedureStepUIDs() As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.GetUnscheduledPerformedProcedureStepUIDs
         Return MyBase.Channel.GetUnscheduledPerformedProcedureStepUIDs
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function BeginGetUnscheduledPerformedProcedureStepUIDs(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Broker.IBrokerService.BeginGetUnscheduledPerformedProcedureStepUIDs
         Return MyBase.Channel.BeginGetUnscheduledPerformedProcedureStepUIDs(callback, asyncState)
      End Function

      <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
      Public Function EndGetUnscheduledPerformedProcedureStepUIDs(ByVal result As System.IAsyncResult) As System.Collections.Generic.List(Of String) Implements Broker.IBrokerService.EndGetUnscheduledPerformedProcedureStepUIDs
         Return MyBase.Channel.EndGetUnscheduledPerformedProcedureStepUIDs(result)
      End Function

      Private Function OnBeginGetUnscheduledPerformedProcedureStepUIDs(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
         Return Me.BeginGetUnscheduledPerformedProcedureStepUIDs(callback, asyncState)
      End Function

      Private Function OnEndGetUnscheduledPerformedProcedureStepUIDs(ByVal result As System.IAsyncResult) As Object()
         Dim retVal As System.Collections.Generic.List(Of String) = Me.EndGetUnscheduledPerformedProcedureStepUIDs(result)
         Return New Object() {retVal}
      End Function

      Private Sub OnGetUnscheduledPerformedProcedureStepUIDsCompleted(ByVal state As Object)
         If (Not (Me.GetUnscheduledPerformedProcedureStepUIDsCompletedEvent) Is Nothing) Then
            Dim e As InvokeAsyncCompletedEventArgs = CType(state, InvokeAsyncCompletedEventArgs)
            RaiseEvent GetUnscheduledPerformedProcedureStepUIDsCompleted(Me, New GetUnscheduledPerformedProcedureStepUIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
         End If
      End Sub

      Public Overloads Sub GetUnscheduledPerformedProcedureStepUIDsAsync()
         Me.GetUnscheduledPerformedProcedureStepUIDsAsync(Nothing)
      End Sub

      Public Overloads Sub GetUnscheduledPerformedProcedureStepUIDsAsync(ByVal userState As Object)
         If (Me.onBeginGetUnscheduledPerformedProcedureStepUIDsDelegate Is Nothing) Then
            Me.onBeginGetUnscheduledPerformedProcedureStepUIDsDelegate = AddressOf Me.OnBeginGetUnscheduledPerformedProcedureStepUIDs
         End If
         If (Me.onEndGetUnscheduledPerformedProcedureStepUIDsDelegate Is Nothing) Then
            Me.onEndGetUnscheduledPerformedProcedureStepUIDsDelegate = AddressOf Me.OnEndGetUnscheduledPerformedProcedureStepUIDs
         End If
         If (Me.onGetUnscheduledPerformedProcedureStepUIDsCompletedDelegate Is Nothing) Then
            Me.onGetUnscheduledPerformedProcedureStepUIDsCompletedDelegate = AddressOf Me.OnGetUnscheduledPerformedProcedureStepUIDsCompleted
         End If
         MyBase.InvokeAsync(Me.onBeginGetUnscheduledPerformedProcedureStepUIDsDelegate, Nothing, Me.onEndGetUnscheduledPerformedProcedureStepUIDsDelegate, Me.onGetUnscheduledPerformedProcedureStepUIDsCompletedDelegate, userState)
      End Sub
   End Class
End Namespace
